/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IEndpoint,
  IEndpointInterface,
} from "../../../../../contracts/interfaces/external/vertexprotocol/IEndpoint";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes12",
        name: "subaccountName",
        type: "bytes12",
      },
      {
        internalType: "uint32",
        name: "productId",
        type: "uint32",
      },
      {
        internalType: "uint128",
        name: "amount",
        type: "uint128",
      },
    ],
    name: "depositCollateral",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes12",
        name: "subaccountName",
        type: "bytes12",
      },
      {
        internalType: "uint32",
        name: "productId",
        type: "uint32",
      },
      {
        internalType: "uint128",
        name: "amount",
        type: "uint128",
      },
      {
        internalType: "string",
        name: "referralCode",
        type: "string",
      },
    ],
    name: "depositCollateralWithReferral",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "transaction",
        type: "bytes",
      },
    ],
    name: "submitSlowModeTransaction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IEndpoint__factory {
  static readonly abi = _abi;
  static createInterface(): IEndpointInterface {
    return new Interface(_abi) as IEndpointInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): IEndpoint {
    return new Contract(address, _abi, runner) as unknown as IEndpoint;
  }
}
