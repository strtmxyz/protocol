/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IHasGuardInfo,
  IHasGuardInfoInterface,
} from "../../../contracts/interfaces/IHasGuardInfo";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "name",
        type: "bytes32",
      },
    ],
    name: "getAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "externalAsset",
        type: "address",
      },
    ],
    name: "getAssetGuard",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "externalContract",
        type: "address",
      },
    ],
    name: "getGuard",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IHasGuardInfo__factory {
  static readonly abi = _abi;
  static createInterface(): IHasGuardInfoInterface {
    return new Interface(_abi) as IHasGuardInfoInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IHasGuardInfo {
    return new Contract(address, _abi, runner) as unknown as IHasGuardInfo;
  }
}
