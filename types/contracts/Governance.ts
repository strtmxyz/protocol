/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Governance {
  export type ContractNameStruct = {
    name: BytesLike;
    destination: AddressLike;
  };

  export type ContractNameStructOutput = [name: string, destination: string] & {
    name: string;
    destination: string;
  };
}

export interface GovernanceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "assetGuards"
      | "contractGuards"
      | "initialize"
      | "nameToDestination"
      | "owner"
      | "renounceOwnership"
      | "setAddresses"
      | "setAssetGuard"
      | "setContractGuard"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddressSet"
      | "AssetGuardSet"
      | "ContractGuardSet"
      | "Initialized"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "assetGuards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contractGuards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nameToDestination",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAddresses",
    values: [Governance.ContractNameStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetGuard",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractGuard",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "assetGuards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractGuards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nameToDestination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAssetGuard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractGuard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace AddressSetEvent {
  export type InputTuple = [name: BytesLike, destination: AddressLike];
  export type OutputTuple = [name: string, destination: string];
  export interface OutputObject {
    name: string;
    destination: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetGuardSetEvent {
  export type InputTuple = [assetType: BigNumberish, guardAddress: AddressLike];
  export type OutputTuple = [assetType: bigint, guardAddress: string];
  export interface OutputObject {
    assetType: bigint;
    guardAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractGuardSetEvent {
  export type InputTuple = [
    extContract: AddressLike,
    guardAddress: AddressLike
  ];
  export type OutputTuple = [extContract: string, guardAddress: string];
  export interface OutputObject {
    extContract: string;
    guardAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Governance extends BaseContract {
  connect(runner?: ContractRunner | null): Governance;
  waitForDeployment(): Promise<this>;

  interface: GovernanceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  assetGuards: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  contractGuards: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  nameToDestination: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAddresses: TypedContractMethod<
    [contractNames: Governance.ContractNameStruct[]],
    [void],
    "nonpayable"
  >;

  setAssetGuard: TypedContractMethod<
    [assetType: BigNumberish, guardAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setContractGuard: TypedContractMethod<
    [extContract: AddressLike, guardAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "assetGuards"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "contractGuards"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "nameToDestination"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAddresses"
  ): TypedContractMethod<
    [contractNames: Governance.ContractNameStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAssetGuard"
  ): TypedContractMethod<
    [assetType: BigNumberish, guardAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setContractGuard"
  ): TypedContractMethod<
    [extContract: AddressLike, guardAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AddressSet"
  ): TypedContractEvent<
    AddressSetEvent.InputTuple,
    AddressSetEvent.OutputTuple,
    AddressSetEvent.OutputObject
  >;
  getEvent(
    key: "AssetGuardSet"
  ): TypedContractEvent<
    AssetGuardSetEvent.InputTuple,
    AssetGuardSetEvent.OutputTuple,
    AssetGuardSetEvent.OutputObject
  >;
  getEvent(
    key: "ContractGuardSet"
  ): TypedContractEvent<
    ContractGuardSetEvent.InputTuple,
    ContractGuardSetEvent.OutputTuple,
    ContractGuardSetEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "AddressSet(bytes32,address)": TypedContractEvent<
      AddressSetEvent.InputTuple,
      AddressSetEvent.OutputTuple,
      AddressSetEvent.OutputObject
    >;
    AddressSet: TypedContractEvent<
      AddressSetEvent.InputTuple,
      AddressSetEvent.OutputTuple,
      AddressSetEvent.OutputObject
    >;

    "AssetGuardSet(uint16,address)": TypedContractEvent<
      AssetGuardSetEvent.InputTuple,
      AssetGuardSetEvent.OutputTuple,
      AssetGuardSetEvent.OutputObject
    >;
    AssetGuardSet: TypedContractEvent<
      AssetGuardSetEvent.InputTuple,
      AssetGuardSetEvent.OutputTuple,
      AssetGuardSetEvent.OutputObject
    >;

    "ContractGuardSet(address,address)": TypedContractEvent<
      ContractGuardSetEvent.InputTuple,
      ContractGuardSetEvent.OutputTuple,
      ContractGuardSetEvent.OutputObject
    >;
    ContractGuardSet: TypedContractEvent<
      ContractGuardSetEvent.InputTuple,
      ContractGuardSetEvent.OutputTuple,
      ContractGuardSetEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
