/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IAssetHandler {
  export type AssetStruct = {
    asset: AddressLike;
    assetType: BigNumberish;
    aggregator: AddressLike;
  };

  export type AssetStructOutput = [
    asset: string,
    assetType: bigint,
    aggregator: string
  ] & { asset: string; assetType: bigint; aggregator: string };
}

export interface IAssetHandlerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAsset"
      | "addAssets"
      | "assetTypes"
      | "getUSDPrice"
      | "priceAggregators"
      | "removeAsset"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AddedAsset" | "RemovedAsset"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addAsset",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addAssets",
    values: [IAssetHandler.AssetStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "assetTypes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUSDPrice",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "priceAggregators",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAsset",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "addAsset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addAssets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assetTypes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUSDPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceAggregators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAsset",
    data: BytesLike
  ): Result;
}

export namespace AddedAssetEvent {
  export type InputTuple = [
    asset: AddressLike,
    assetType: BigNumberish,
    aggregator: AddressLike
  ];
  export type OutputTuple = [
    asset: string,
    assetType: bigint,
    aggregator: string
  ];
  export interface OutputObject {
    asset: string;
    assetType: bigint;
    aggregator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemovedAssetEvent {
  export type InputTuple = [asset: AddressLike];
  export type OutputTuple = [asset: string];
  export interface OutputObject {
    asset: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IAssetHandler extends BaseContract {
  connect(runner?: ContractRunner | null): IAssetHandler;
  waitForDeployment(): Promise<this>;

  interface: IAssetHandlerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAsset: TypedContractMethod<
    [asset: AddressLike, assetType: BigNumberish, aggregator: AddressLike],
    [void],
    "nonpayable"
  >;

  addAssets: TypedContractMethod<
    [assets: IAssetHandler.AssetStruct[]],
    [void],
    "nonpayable"
  >;

  assetTypes: TypedContractMethod<[asset: AddressLike], [bigint], "view">;

  getUSDPrice: TypedContractMethod<[asset: AddressLike], [bigint], "view">;

  priceAggregators: TypedContractMethod<[asset: AddressLike], [string], "view">;

  removeAsset: TypedContractMethod<[asset: AddressLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAsset"
  ): TypedContractMethod<
    [asset: AddressLike, assetType: BigNumberish, aggregator: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addAssets"
  ): TypedContractMethod<
    [assets: IAssetHandler.AssetStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "assetTypes"
  ): TypedContractMethod<[asset: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUSDPrice"
  ): TypedContractMethod<[asset: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "priceAggregators"
  ): TypedContractMethod<[asset: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "removeAsset"
  ): TypedContractMethod<[asset: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AddedAsset"
  ): TypedContractEvent<
    AddedAssetEvent.InputTuple,
    AddedAssetEvent.OutputTuple,
    AddedAssetEvent.OutputObject
  >;
  getEvent(
    key: "RemovedAsset"
  ): TypedContractEvent<
    RemovedAssetEvent.InputTuple,
    RemovedAssetEvent.OutputTuple,
    RemovedAssetEvent.OutputObject
  >;

  filters: {
    "AddedAsset(address,uint16,address)": TypedContractEvent<
      AddedAssetEvent.InputTuple,
      AddedAssetEvent.OutputTuple,
      AddedAssetEvent.OutputObject
    >;
    AddedAsset: TypedContractEvent<
      AddedAssetEvent.InputTuple,
      AddedAssetEvent.OutputTuple,
      AddedAssetEvent.OutputObject
    >;

    "RemovedAsset(address)": TypedContractEvent<
      RemovedAssetEvent.InputTuple,
      RemovedAssetEvent.OutputTuple,
      RemovedAssetEvent.OutputObject
    >;
    RemovedAsset: TypedContractEvent<
      RemovedAssetEvent.InputTuple,
      RemovedAssetEvent.OutputTuple,
      RemovedAssetEvent.OutputObject
    >;
  };
}
