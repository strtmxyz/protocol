/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export type CurveMathStruct = {
  priceRoot_: BigNumberish;
  ambientSeeds_: BigNumberish;
  concLiq_: BigNumberish;
  seedDeflator_: BigNumberish;
  concGrowth_: BigNumberish;
};

export type CurveMathStructOutput = [
  priceRoot_: bigint,
  ambientSeeds_: bigint,
  concLiq_: bigint,
  seedDeflator_: bigint,
  concGrowth_: bigint
] & {
  priceRoot_: bigint;
  ambientSeeds_: bigint;
  concLiq_: bigint;
  seedDeflator_: bigint;
  concGrowth_: bigint;
};

export interface ICrocQueryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "queryCurve"
      | "queryCurveTick"
      | "queryPrice"
      | "queryRangePosition"
      | "queryRangeTokens"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "queryCurve",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "queryCurveTick",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "queryPrice",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "queryRangePosition",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "queryRangeTokens",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(functionFragment: "queryCurve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queryCurveTick",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "queryPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queryRangePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryRangeTokens",
    data: BytesLike
  ): Result;
}

export interface ICrocQuery extends BaseContract {
  connect(runner?: ContractRunner | null): ICrocQuery;
  waitForDeployment(): Promise<this>;

  interface: ICrocQueryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  queryCurve: TypedContractMethod<
    [base: AddressLike, quote: AddressLike, poolIdx: BigNumberish],
    [CurveMathStructOutput],
    "view"
  >;

  queryCurveTick: TypedContractMethod<
    [base: AddressLike, quote: AddressLike, poolIdx: BigNumberish],
    [bigint],
    "view"
  >;

  queryPrice: TypedContractMethod<
    [base: AddressLike, quote: AddressLike, poolIdx: BigNumberish],
    [bigint],
    "view"
  >;

  queryRangePosition: TypedContractMethod<
    [
      owner: AddressLike,
      base: AddressLike,
      quote: AddressLike,
      poolIdx: BigNumberish,
      bidTick: BigNumberish,
      askTick: BigNumberish
    ],
    [[bigint, bigint] & { liq: bigint; timestamp: bigint }],
    "view"
  >;

  queryRangeTokens: TypedContractMethod<
    [
      owner: AddressLike,
      base: AddressLike,
      quote: AddressLike,
      poolIdx: BigNumberish,
      bidTick: BigNumberish,
      askTick: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        liq: bigint;
        baseQty: bigint;
        quoteQty: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "queryCurve"
  ): TypedContractMethod<
    [base: AddressLike, quote: AddressLike, poolIdx: BigNumberish],
    [CurveMathStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "queryCurveTick"
  ): TypedContractMethod<
    [base: AddressLike, quote: AddressLike, poolIdx: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "queryPrice"
  ): TypedContractMethod<
    [base: AddressLike, quote: AddressLike, poolIdx: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "queryRangePosition"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      base: AddressLike,
      quote: AddressLike,
      poolIdx: BigNumberish,
      bidTick: BigNumberish,
      askTick: BigNumberish
    ],
    [[bigint, bigint] & { liq: bigint; timestamp: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "queryRangeTokens"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      base: AddressLike,
      quote: AddressLike,
      poolIdx: BigNumberish,
      bidTick: BigNumberish,
      askTick: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        liq: bigint;
        baseQty: bigint;
        quoteQty: bigint;
      }
    ],
    "view"
  >;

  filters: {};
}
