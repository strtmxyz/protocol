/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IAssetGuardInterface extends Interface {
  getFunction(
    nameOrSignature: "calcValue" | "getBalance" | "getDecimals"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ERC20Approval"
      | "ERC721Approval"
      | "UnwrapNativeToken"
      | "WrapNativeToken"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "calcValue",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDecimals",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "calcValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDecimals",
    data: BytesLike
  ): Result;
}

export namespace ERC20ApprovalEvent {
  export type InputTuple = [
    vault: AddressLike,
    token: AddressLike,
    spender: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    vault: string,
    token: string,
    spender: string,
    amount: bigint
  ];
  export interface OutputObject {
    vault: string;
    token: string;
    spender: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ERC721ApprovalEvent {
  export type InputTuple = [
    vault: AddressLike,
    token: AddressLike,
    spender: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [
    vault: string,
    token: string,
    spender: string,
    tokenId: bigint
  ];
  export interface OutputObject {
    vault: string;
    token: string;
    spender: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnwrapNativeTokenEvent {
  export type InputTuple = [
    vault: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [vault: string, token: string, amount: bigint];
  export interface OutputObject {
    vault: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WrapNativeTokenEvent {
  export type InputTuple = [
    vault: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [vault: string, token: string, amount: bigint];
  export interface OutputObject {
    vault: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IAssetGuard extends BaseContract {
  connect(runner?: ContractRunner | null): IAssetGuard;
  waitForDeployment(): Promise<this>;

  interface: IAssetGuardInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  calcValue: TypedContractMethod<
    [vault: AddressLike, asset: AddressLike, balance: BigNumberish],
    [bigint],
    "view"
  >;

  getBalance: TypedContractMethod<
    [vault: AddressLike, asset: AddressLike],
    [bigint],
    "view"
  >;

  getDecimals: TypedContractMethod<[asset: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "calcValue"
  ): TypedContractMethod<
    [vault: AddressLike, asset: AddressLike, balance: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<
    [vault: AddressLike, asset: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDecimals"
  ): TypedContractMethod<[asset: AddressLike], [bigint], "view">;

  getEvent(
    key: "ERC20Approval"
  ): TypedContractEvent<
    ERC20ApprovalEvent.InputTuple,
    ERC20ApprovalEvent.OutputTuple,
    ERC20ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ERC721Approval"
  ): TypedContractEvent<
    ERC721ApprovalEvent.InputTuple,
    ERC721ApprovalEvent.OutputTuple,
    ERC721ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "UnwrapNativeToken"
  ): TypedContractEvent<
    UnwrapNativeTokenEvent.InputTuple,
    UnwrapNativeTokenEvent.OutputTuple,
    UnwrapNativeTokenEvent.OutputObject
  >;
  getEvent(
    key: "WrapNativeToken"
  ): TypedContractEvent<
    WrapNativeTokenEvent.InputTuple,
    WrapNativeTokenEvent.OutputTuple,
    WrapNativeTokenEvent.OutputObject
  >;

  filters: {
    "ERC20Approval(address,address,address,uint256)": TypedContractEvent<
      ERC20ApprovalEvent.InputTuple,
      ERC20ApprovalEvent.OutputTuple,
      ERC20ApprovalEvent.OutputObject
    >;
    ERC20Approval: TypedContractEvent<
      ERC20ApprovalEvent.InputTuple,
      ERC20ApprovalEvent.OutputTuple,
      ERC20ApprovalEvent.OutputObject
    >;

    "ERC721Approval(address,address,address,uint256)": TypedContractEvent<
      ERC721ApprovalEvent.InputTuple,
      ERC721ApprovalEvent.OutputTuple,
      ERC721ApprovalEvent.OutputObject
    >;
    ERC721Approval: TypedContractEvent<
      ERC721ApprovalEvent.InputTuple,
      ERC721ApprovalEvent.OutputTuple,
      ERC721ApprovalEvent.OutputObject
    >;

    "UnwrapNativeToken(address,address,uint256)": TypedContractEvent<
      UnwrapNativeTokenEvent.InputTuple,
      UnwrapNativeTokenEvent.OutputTuple,
      UnwrapNativeTokenEvent.OutputObject
    >;
    UnwrapNativeToken: TypedContractEvent<
      UnwrapNativeTokenEvent.InputTuple,
      UnwrapNativeTokenEvent.OutputTuple,
      UnwrapNativeTokenEvent.OutputObject
    >;

    "WrapNativeToken(address,address,uint256)": TypedContractEvent<
      WrapNativeTokenEvent.InputTuple,
      WrapNativeTokenEvent.OutputTuple,
      WrapNativeTokenEvent.OutputObject
    >;
    WrapNativeToken: TypedContractEvent<
      WrapNativeTokenEvent.InputTuple,
      WrapNativeTokenEvent.OutputTuple,
      WrapNativeTokenEvent.OutputObject
    >;
  };
}
