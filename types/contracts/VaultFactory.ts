/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface VaultFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addUnderlyingAsset"
      | "addUnderlyingAssetWhitelist"
      | "addWhitelistedAsset"
      | "admin"
      | "assetIndex"
      | "assetWhitelisted"
      | "batchSetAssetWhitelist"
      | "batchUpgradeVaults"
      | "createVault"
      | "creationFee"
      | "deployedVaults"
      | "emergencyRecoverAsset"
      | "getAddress"
      | "getAdjustedCapacityLimits"
      | "getAdjustedMaxCapacityLimit"
      | "getAdjustedMinCapacityLimit"
      | "getAssetGuard"
      | "getAssetHandler"
      | "getAssetPrice"
      | "getAssetType"
      | "getAssetsWithTypes"
      | "getDeployedVaults"
      | "getDetailedVaultInfo"
      | "getFactoryStats"
      | "getGuard"
      | "getMaximumSupportedAssetCount"
      | "getTokenType"
      | "getUnderlyingAssetCount"
      | "getUnderlyingAssets"
      | "getVaultCount"
      | "getVaultInfo"
      | "getVaultManager"
      | "getVaultsByManager"
      | "getWhitelistedAssetCount"
      | "getWhitelistedAssets"
      | "governance"
      | "governanceAddresses"
      | "hasGuard"
      | "implementationVersion"
      | "initialize"
      | "isAssetWhitelisted"
      | "isUnderlyingAssetAllowed"
      | "isValidAsset"
      | "isValidVault"
      | "isVault"
      | "maxCapacityLimit"
      | "minCapacityLimit"
      | "owner"
      | "pause"
      | "paused"
      | "proxyAdmin"
      | "removeUnderlyingAsset"
      | "removeUnderlyingAssetWhitelist"
      | "removeWhitelistedAsset"
      | "renounceOwnership"
      | "setAdminAddress"
      | "setAssetHandler"
      | "setAssetWhitelist"
      | "setFactorySettings"
      | "setFactorySettingsInAssetUnits"
      | "setGovernanceAddress(bytes32,address)"
      | "setGovernanceAddress(address)"
      | "setMaximumSupportedAssetCount"
      | "setTreasuryAddress"
      | "setVaultStorageVersion"
      | "tokenType"
      | "transferOwnership"
      | "treasury"
      | "underlyingAssetAllowed"
      | "underlyingAssetIndex"
      | "underlyingAssets"
      | "unpause"
      | "updateVaultFees"
      | "updateVaultImplementation"
      | "upgradeVault"
      | "vaultImplementation"
      | "vaultIndex"
      | "vaultManager"
      | "vaultStorageVersion"
      | "vaultVersion"
      | "version"
      | "whitelistedAssets"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminAddressSet"
      | "AssetWhitelisted"
      | "AssetWhitelistedRemoved"
      | "FactorySettingsUpdated"
      | "GovernanceAddressMapped"
      | "GovernanceAddressSet"
      | "Initialized"
      | "OwnershipTransferred"
      | "Paused"
      | "SetAssetHandler"
      | "SetVaultStorageVersion"
      | "TreasuryAddressSet"
      | "UnderlyingAssetAdded"
      | "UnderlyingAssetRemoved"
      | "Unpaused"
      | "VaultCreated"
      | "VaultImplementationUpdated"
      | "VaultUpgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addUnderlyingAsset",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addUnderlyingAssetWhitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addWhitelistedAsset",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "assetIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assetWhitelisted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "batchSetAssetWhitelist",
    values: [AddressLike[], BigNumberish[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchUpgradeVaults",
    values: [AddressLike[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createVault",
    values: [
      string,
      string,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "creationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployedVaults",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyRecoverAsset",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdjustedCapacityLimits",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdjustedMaxCapacityLimit",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdjustedMinCapacityLimit",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetGuard",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetHandler",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetPrice",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetType",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetsWithTypes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDeployedVaults",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDetailedVaultInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFactoryStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGuard",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaximumSupportedAssetCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenType",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderlyingAssetCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderlyingAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultsByManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWhitelistedAssetCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWhitelistedAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceAddresses",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasGuard",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "implementationVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAssetWhitelisted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isUnderlyingAssetAllowed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidAsset",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxCapacityLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minCapacityLimit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxyAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeUnderlyingAsset",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeUnderlyingAssetWhitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWhitelistedAsset",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdminAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetHandler",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetWhitelist",
    values: [AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFactorySettings",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFactorySettingsInAssetUnits",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernanceAddress(bytes32,address)",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernanceAddress(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaximumSupportedAssetCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setVaultStorageVersion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenType",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "underlyingAssetAllowed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingAssetIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingAssets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateVaultFees",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVaultImplementation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeVault",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vaultIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultStorageVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vaultVersion",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "whitelistedAssets",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addUnderlyingAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addUnderlyingAssetWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addWhitelistedAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assetIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchSetAssetWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchUpgradeVaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployedVaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyRecoverAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAdjustedCapacityLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAdjustedMaxCapacityLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAdjustedMinCapacityLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetGuard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetsWithTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeployedVaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDetailedVaultInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFactoryStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGuard", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMaximumSupportedAssetCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlyingAssetCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlyingAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultsByManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWhitelistedAssetCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWhitelistedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "governanceAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasGuard", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "implementationVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAssetWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUnderlyingAssetAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxCapacityLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minCapacityLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proxyAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeUnderlyingAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeUnderlyingAssetWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWhitelistedAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdminAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAssetHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAssetWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFactorySettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFactorySettingsInAssetUnits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernanceAddress(bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernanceAddress(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaximumSupportedAssetCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVaultStorageVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "underlyingAssetAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingAssetIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateVaultFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVaultImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaultIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultStorageVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedAssets",
    data: BytesLike
  ): Result;
}

export namespace AdminAddressSetEvent {
  export type InputTuple = [adminAddress: AddressLike];
  export type OutputTuple = [adminAddress: string];
  export interface OutputObject {
    adminAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetWhitelistedEvent {
  export type InputTuple = [
    asset: AddressLike,
    tokenType: BigNumberish,
    allowed: boolean
  ];
  export type OutputTuple = [
    asset: string,
    tokenType: bigint,
    allowed: boolean
  ];
  export interface OutputObject {
    asset: string;
    tokenType: bigint;
    allowed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetWhitelistedRemovedEvent {
  export type InputTuple = [asset: AddressLike];
  export type OutputTuple = [asset: string];
  export interface OutputObject {
    asset: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FactorySettingsUpdatedEvent {
  export type InputTuple = [
    maxCapacityLimit: BigNumberish,
    minCapacityLimit: BigNumberish,
    creationFee: BigNumberish
  ];
  export type OutputTuple = [
    maxCapacityLimit: bigint,
    minCapacityLimit: bigint,
    creationFee: bigint
  ];
  export interface OutputObject {
    maxCapacityLimit: bigint;
    minCapacityLimit: bigint;
    creationFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernanceAddressMappedEvent {
  export type InputTuple = [name: BytesLike, addr: AddressLike];
  export type OutputTuple = [name: string, addr: string];
  export interface OutputObject {
    name: string;
    addr: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernanceAddressSetEvent {
  export type InputTuple = [governanceAddress: AddressLike];
  export type OutputTuple = [governanceAddress: string];
  export interface OutputObject {
    governanceAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetAssetHandlerEvent {
  export type InputTuple = [assetHandler: AddressLike];
  export type OutputTuple = [assetHandler: string];
  export interface OutputObject {
    assetHandler: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetVaultStorageVersionEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreasuryAddressSetEvent {
  export type InputTuple = [treasuryAddress: AddressLike];
  export type OutputTuple = [treasuryAddress: string];
  export interface OutputObject {
    treasuryAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnderlyingAssetAddedEvent {
  export type InputTuple = [asset: AddressLike, tokenType: BigNumberish];
  export type OutputTuple = [asset: string, tokenType: bigint];
  export interface OutputObject {
    asset: string;
    tokenType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnderlyingAssetRemovedEvent {
  export type InputTuple = [asset: AddressLike];
  export type OutputTuple = [asset: string];
  export interface OutputObject {
    asset: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultCreatedEvent {
  export type InputTuple = [
    vault: AddressLike,
    manager: AddressLike,
    underlyingAsset: AddressLike,
    name: string,
    symbol: string,
    maxCapacity: BigNumberish
  ];
  export type OutputTuple = [
    vault: string,
    manager: string,
    underlyingAsset: string,
    name: string,
    symbol: string,
    maxCapacity: bigint
  ];
  export interface OutputObject {
    vault: string;
    manager: string;
    underlyingAsset: string;
    name: string;
    symbol: string;
    maxCapacity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultImplementationUpdatedEvent {
  export type InputTuple = [
    oldImplementation: AddressLike,
    newImplementation: AddressLike
  ];
  export type OutputTuple = [
    oldImplementation: string,
    newImplementation: string
  ];
  export interface OutputObject {
    oldImplementation: string;
    newImplementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultUpgradedEvent {
  export type InputTuple = [vault: AddressLike, newImplementation: AddressLike];
  export type OutputTuple = [vault: string, newImplementation: string];
  export interface OutputObject {
    vault: string;
    newImplementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VaultFactory extends BaseContract {
  connect(runner?: ContractRunner | null): VaultFactory;
  waitForDeployment(): Promise<this>;

  interface: VaultFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addUnderlyingAsset: TypedContractMethod<
    [_asset: AddressLike, _tokenType: BigNumberish],
    [void],
    "nonpayable"
  >;

  addUnderlyingAssetWhitelist: TypedContractMethod<
    [_underlyingAsset: AddressLike],
    [void],
    "nonpayable"
  >;

  addWhitelistedAsset: TypedContractMethod<
    [_asset: AddressLike, _tokenType: BigNumberish],
    [void],
    "nonpayable"
  >;

  admin: TypedContractMethod<[], [string], "view">;

  assetIndex: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  assetWhitelisted: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  batchSetAssetWhitelist: TypedContractMethod<
    [_assets: AddressLike[], _tokenTypes: BigNumberish[], _allowed: boolean[]],
    [void],
    "nonpayable"
  >;

  batchUpgradeVaults: TypedContractMethod<
    [_vaults: AddressLike[], _newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  createVault: TypedContractMethod<
    [
      _name: string,
      _symbol: string,
      _underlyingAsset: AddressLike,
      _manager: AddressLike,
      _maxCapacity: BigNumberish,
      _managerFee: BigNumberish,
      _withdrawalFee: BigNumberish
    ],
    [string],
    "payable"
  >;

  creationFee: TypedContractMethod<[], [bigint], "view">;

  deployedVaults: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  emergencyRecoverAsset: TypedContractMethod<
    [_asset: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAddress: TypedContractMethod<[_name: BytesLike], [string], "view">;

  getAdjustedCapacityLimits: TypedContractMethod<
    [underlyingAsset: AddressLike],
    [[bigint, bigint] & { adjustedMaxLimit: bigint; adjustedMinLimit: bigint }],
    "view"
  >;

  getAdjustedMaxCapacityLimit: TypedContractMethod<
    [underlyingAsset: AddressLike],
    [bigint],
    "view"
  >;

  getAdjustedMinCapacityLimit: TypedContractMethod<
    [underlyingAsset: AddressLike],
    [bigint],
    "view"
  >;

  getAssetGuard: TypedContractMethod<
    [externalAsset: AddressLike],
    [string],
    "view"
  >;

  getAssetHandler: TypedContractMethod<[], [string], "view">;

  getAssetPrice: TypedContractMethod<[asset: AddressLike], [bigint], "view">;

  getAssetType: TypedContractMethod<[asset: AddressLike], [bigint], "view">;

  getAssetsWithTypes: TypedContractMethod<
    [],
    [[string[], bigint[]] & { assets: string[]; types: bigint[] }],
    "view"
  >;

  getDeployedVaults: TypedContractMethod<[], [string[]], "view">;

  getDetailedVaultInfo: TypedContractMethod<
    [_vault: AddressLike],
    [
      [string, bigint, bigint, bigint, bigint, bigint] & {
        underlyingAsset: string;
        totalShares: bigint;
        totalAssetsAmount: bigint;
        sharePrice: bigint;
        maxCap: bigint;
        minDeposit: bigint;
      }
    ],
    "view"
  >;

  getFactoryStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, string[]] & {
        totalVaults: bigint;
        totalValueLocked: bigint;
        whitelistedAssetsCount: bigint;
        topVaultsByTVL: string[];
      }
    ],
    "view"
  >;

  getGuard: TypedContractMethod<
    [externalContract: AddressLike],
    [[string, string] & { guard: string; platform: string }],
    "view"
  >;

  getMaximumSupportedAssetCount: TypedContractMethod<[], [bigint], "view">;

  getTokenType: TypedContractMethod<[_asset: AddressLike], [bigint], "view">;

  getUnderlyingAssetCount: TypedContractMethod<[], [bigint], "view">;

  getUnderlyingAssets: TypedContractMethod<[], [string[]], "view">;

  getVaultCount: TypedContractMethod<[], [bigint], "view">;

  getVaultInfo: TypedContractMethod<
    [_vault: AddressLike],
    [
      [string, string, bigint, bigint, bigint, boolean, bigint] & {
        manager: string;
        underlyingAsset: string;
        totalAssets: bigint;
        totalSupply: bigint;
        maxCapacity: bigint;
        isPaused: boolean;
        sharePrice: bigint;
      }
    ],
    "view"
  >;

  getVaultManager: TypedContractMethod<[_vault: AddressLike], [string], "view">;

  getVaultsByManager: TypedContractMethod<
    [_manager: AddressLike],
    [string[]],
    "view"
  >;

  getWhitelistedAssetCount: TypedContractMethod<[], [bigint], "view">;

  getWhitelistedAssets: TypedContractMethod<[], [string[]], "view">;

  governance: TypedContractMethod<[], [string], "view">;

  governanceAddresses: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  hasGuard: TypedContractMethod<[_asset: AddressLike], [boolean], "view">;

  implementationVersion: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<
    [
      assetHandler: AddressLike,
      _treasury: AddressLike,
      _governance: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  isAssetWhitelisted: TypedContractMethod<
    [_asset: AddressLike],
    [boolean],
    "view"
  >;

  isUnderlyingAssetAllowed: TypedContractMethod<
    [_asset: AddressLike],
    [boolean],
    "view"
  >;

  isValidAsset: TypedContractMethod<[asset: AddressLike], [boolean], "view">;

  isValidVault: TypedContractMethod<[_vault: AddressLike], [boolean], "view">;

  isVault: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  maxCapacityLimit: TypedContractMethod<[], [bigint], "view">;

  minCapacityLimit: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  proxyAdmin: TypedContractMethod<[], [string], "view">;

  removeUnderlyingAsset: TypedContractMethod<
    [_asset: AddressLike],
    [void],
    "nonpayable"
  >;

  removeUnderlyingAssetWhitelist: TypedContractMethod<
    [_underlyingAsset: AddressLike],
    [void],
    "nonpayable"
  >;

  removeWhitelistedAsset: TypedContractMethod<
    [_asset: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAdminAddress: TypedContractMethod<
    [_adminAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setAssetHandler: TypedContractMethod<
    [assetHandler: AddressLike],
    [void],
    "nonpayable"
  >;

  setAssetWhitelist: TypedContractMethod<
    [_asset: AddressLike, _tokenType: BigNumberish, _allowed: boolean],
    [void],
    "nonpayable"
  >;

  setFactorySettings: TypedContractMethod<
    [
      _maxCapacityLimit: BigNumberish,
      _minCapacityLimit: BigNumberish,
      _creationFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setFactorySettingsInAssetUnits: TypedContractMethod<
    [
      _maxCapacityAmount: BigNumberish,
      _minCapacityAmount: BigNumberish,
      _creationFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  "setGovernanceAddress(bytes32,address)": TypedContractMethod<
    [_name: BytesLike, _address: AddressLike],
    [void],
    "nonpayable"
  >;

  "setGovernanceAddress(address)": TypedContractMethod<
    [_governanceAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setMaximumSupportedAssetCount: TypedContractMethod<
    [count: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTreasuryAddress: TypedContractMethod<
    [_treasuryAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setVaultStorageVersion: TypedContractMethod<
    [_vaultStorageVersion: BigNumberish],
    [void],
    "nonpayable"
  >;

  tokenType: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  treasury: TypedContractMethod<[], [string], "view">;

  underlyingAssetAllowed: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  underlyingAssetIndex: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  underlyingAssets: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateVaultFees: TypedContractMethod<
    [
      _vault: AddressLike,
      _managerFee: BigNumberish,
      _withdrawalFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updateVaultImplementation: TypedContractMethod<
    [_newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeVault: TypedContractMethod<
    [_vault: AddressLike, _newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  vaultImplementation: TypedContractMethod<[], [string], "view">;

  vaultIndex: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  vaultManager: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  vaultStorageVersion: TypedContractMethod<[], [bigint], "view">;

  vaultVersion: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  version: TypedContractMethod<[], [string], "view">;

  whitelistedAssets: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addUnderlyingAsset"
  ): TypedContractMethod<
    [_asset: AddressLike, _tokenType: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addUnderlyingAssetWhitelist"
  ): TypedContractMethod<[_underlyingAsset: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addWhitelistedAsset"
  ): TypedContractMethod<
    [_asset: AddressLike, _tokenType: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "assetIndex"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "assetWhitelisted"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "batchSetAssetWhitelist"
  ): TypedContractMethod<
    [_assets: AddressLike[], _tokenTypes: BigNumberish[], _allowed: boolean[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchUpgradeVaults"
  ): TypedContractMethod<
    [_vaults: AddressLike[], _newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createVault"
  ): TypedContractMethod<
    [
      _name: string,
      _symbol: string,
      _underlyingAsset: AddressLike,
      _manager: AddressLike,
      _maxCapacity: BigNumberish,
      _managerFee: BigNumberish,
      _withdrawalFee: BigNumberish
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "creationFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deployedVaults"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "emergencyRecoverAsset"
  ): TypedContractMethod<
    [_asset: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAddress"
  ): TypedContractMethod<[_name: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getAdjustedCapacityLimits"
  ): TypedContractMethod<
    [underlyingAsset: AddressLike],
    [[bigint, bigint] & { adjustedMaxLimit: bigint; adjustedMinLimit: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAdjustedMaxCapacityLimit"
  ): TypedContractMethod<[underlyingAsset: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAdjustedMinCapacityLimit"
  ): TypedContractMethod<[underlyingAsset: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAssetGuard"
  ): TypedContractMethod<[externalAsset: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getAssetHandler"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAssetPrice"
  ): TypedContractMethod<[asset: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAssetType"
  ): TypedContractMethod<[asset: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAssetsWithTypes"
  ): TypedContractMethod<
    [],
    [[string[], bigint[]] & { assets: string[]; types: bigint[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDeployedVaults"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getDetailedVaultInfo"
  ): TypedContractMethod<
    [_vault: AddressLike],
    [
      [string, bigint, bigint, bigint, bigint, bigint] & {
        underlyingAsset: string;
        totalShares: bigint;
        totalAssetsAmount: bigint;
        sharePrice: bigint;
        maxCap: bigint;
        minDeposit: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFactoryStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, string[]] & {
        totalVaults: bigint;
        totalValueLocked: bigint;
        whitelistedAssetsCount: bigint;
        topVaultsByTVL: string[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGuard"
  ): TypedContractMethod<
    [externalContract: AddressLike],
    [[string, string] & { guard: string; platform: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMaximumSupportedAssetCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenType"
  ): TypedContractMethod<[_asset: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUnderlyingAssetCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUnderlyingAssets"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getVaultCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVaultInfo"
  ): TypedContractMethod<
    [_vault: AddressLike],
    [
      [string, string, bigint, bigint, bigint, boolean, bigint] & {
        manager: string;
        underlyingAsset: string;
        totalAssets: bigint;
        totalSupply: bigint;
        maxCapacity: bigint;
        isPaused: boolean;
        sharePrice: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVaultManager"
  ): TypedContractMethod<[_vault: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getVaultsByManager"
  ): TypedContractMethod<[_manager: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getWhitelistedAssetCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getWhitelistedAssets"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "governance"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "governanceAddresses"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "hasGuard"
  ): TypedContractMethod<[_asset: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "implementationVersion"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      assetHandler: AddressLike,
      _treasury: AddressLike,
      _governance: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isAssetWhitelisted"
  ): TypedContractMethod<[_asset: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isUnderlyingAssetAllowed"
  ): TypedContractMethod<[_asset: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isValidAsset"
  ): TypedContractMethod<[asset: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isValidVault"
  ): TypedContractMethod<[_vault: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isVault"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "maxCapacityLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minCapacityLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "proxyAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeUnderlyingAsset"
  ): TypedContractMethod<[_asset: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeUnderlyingAssetWhitelist"
  ): TypedContractMethod<[_underlyingAsset: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeWhitelistedAsset"
  ): TypedContractMethod<[_asset: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAdminAddress"
  ): TypedContractMethod<[_adminAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAssetHandler"
  ): TypedContractMethod<[assetHandler: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAssetWhitelist"
  ): TypedContractMethod<
    [_asset: AddressLike, _tokenType: BigNumberish, _allowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFactorySettings"
  ): TypedContractMethod<
    [
      _maxCapacityLimit: BigNumberish,
      _minCapacityLimit: BigNumberish,
      _creationFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFactorySettingsInAssetUnits"
  ): TypedContractMethod<
    [
      _maxCapacityAmount: BigNumberish,
      _minCapacityAmount: BigNumberish,
      _creationFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGovernanceAddress(bytes32,address)"
  ): TypedContractMethod<
    [_name: BytesLike, _address: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGovernanceAddress(address)"
  ): TypedContractMethod<
    [_governanceAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaximumSupportedAssetCount"
  ): TypedContractMethod<[count: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTreasuryAddress"
  ): TypedContractMethod<[_treasuryAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVaultStorageVersion"
  ): TypedContractMethod<
    [_vaultStorageVersion: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tokenType"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "underlyingAssetAllowed"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "underlyingAssetIndex"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "underlyingAssets"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateVaultFees"
  ): TypedContractMethod<
    [
      _vault: AddressLike,
      _managerFee: BigNumberish,
      _withdrawalFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateVaultImplementation"
  ): TypedContractMethod<
    [_newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeVault"
  ): TypedContractMethod<
    [_vault: AddressLike, _newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "vaultImplementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "vaultIndex"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "vaultManager"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "vaultStorageVersion"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "vaultVersion"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "whitelistedAssets"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getEvent(
    key: "AdminAddressSet"
  ): TypedContractEvent<
    AdminAddressSetEvent.InputTuple,
    AdminAddressSetEvent.OutputTuple,
    AdminAddressSetEvent.OutputObject
  >;
  getEvent(
    key: "AssetWhitelisted"
  ): TypedContractEvent<
    AssetWhitelistedEvent.InputTuple,
    AssetWhitelistedEvent.OutputTuple,
    AssetWhitelistedEvent.OutputObject
  >;
  getEvent(
    key: "AssetWhitelistedRemoved"
  ): TypedContractEvent<
    AssetWhitelistedRemovedEvent.InputTuple,
    AssetWhitelistedRemovedEvent.OutputTuple,
    AssetWhitelistedRemovedEvent.OutputObject
  >;
  getEvent(
    key: "FactorySettingsUpdated"
  ): TypedContractEvent<
    FactorySettingsUpdatedEvent.InputTuple,
    FactorySettingsUpdatedEvent.OutputTuple,
    FactorySettingsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "GovernanceAddressMapped"
  ): TypedContractEvent<
    GovernanceAddressMappedEvent.InputTuple,
    GovernanceAddressMappedEvent.OutputTuple,
    GovernanceAddressMappedEvent.OutputObject
  >;
  getEvent(
    key: "GovernanceAddressSet"
  ): TypedContractEvent<
    GovernanceAddressSetEvent.InputTuple,
    GovernanceAddressSetEvent.OutputTuple,
    GovernanceAddressSetEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "SetAssetHandler"
  ): TypedContractEvent<
    SetAssetHandlerEvent.InputTuple,
    SetAssetHandlerEvent.OutputTuple,
    SetAssetHandlerEvent.OutputObject
  >;
  getEvent(
    key: "SetVaultStorageVersion"
  ): TypedContractEvent<
    SetVaultStorageVersionEvent.InputTuple,
    SetVaultStorageVersionEvent.OutputTuple,
    SetVaultStorageVersionEvent.OutputObject
  >;
  getEvent(
    key: "TreasuryAddressSet"
  ): TypedContractEvent<
    TreasuryAddressSetEvent.InputTuple,
    TreasuryAddressSetEvent.OutputTuple,
    TreasuryAddressSetEvent.OutputObject
  >;
  getEvent(
    key: "UnderlyingAssetAdded"
  ): TypedContractEvent<
    UnderlyingAssetAddedEvent.InputTuple,
    UnderlyingAssetAddedEvent.OutputTuple,
    UnderlyingAssetAddedEvent.OutputObject
  >;
  getEvent(
    key: "UnderlyingAssetRemoved"
  ): TypedContractEvent<
    UnderlyingAssetRemovedEvent.InputTuple,
    UnderlyingAssetRemovedEvent.OutputTuple,
    UnderlyingAssetRemovedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "VaultCreated"
  ): TypedContractEvent<
    VaultCreatedEvent.InputTuple,
    VaultCreatedEvent.OutputTuple,
    VaultCreatedEvent.OutputObject
  >;
  getEvent(
    key: "VaultImplementationUpdated"
  ): TypedContractEvent<
    VaultImplementationUpdatedEvent.InputTuple,
    VaultImplementationUpdatedEvent.OutputTuple,
    VaultImplementationUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "VaultUpgraded"
  ): TypedContractEvent<
    VaultUpgradedEvent.InputTuple,
    VaultUpgradedEvent.OutputTuple,
    VaultUpgradedEvent.OutputObject
  >;

  filters: {
    "AdminAddressSet(address)": TypedContractEvent<
      AdminAddressSetEvent.InputTuple,
      AdminAddressSetEvent.OutputTuple,
      AdminAddressSetEvent.OutputObject
    >;
    AdminAddressSet: TypedContractEvent<
      AdminAddressSetEvent.InputTuple,
      AdminAddressSetEvent.OutputTuple,
      AdminAddressSetEvent.OutputObject
    >;

    "AssetWhitelisted(address,uint16,bool)": TypedContractEvent<
      AssetWhitelistedEvent.InputTuple,
      AssetWhitelistedEvent.OutputTuple,
      AssetWhitelistedEvent.OutputObject
    >;
    AssetWhitelisted: TypedContractEvent<
      AssetWhitelistedEvent.InputTuple,
      AssetWhitelistedEvent.OutputTuple,
      AssetWhitelistedEvent.OutputObject
    >;

    "AssetWhitelistedRemoved(address)": TypedContractEvent<
      AssetWhitelistedRemovedEvent.InputTuple,
      AssetWhitelistedRemovedEvent.OutputTuple,
      AssetWhitelistedRemovedEvent.OutputObject
    >;
    AssetWhitelistedRemoved: TypedContractEvent<
      AssetWhitelistedRemovedEvent.InputTuple,
      AssetWhitelistedRemovedEvent.OutputTuple,
      AssetWhitelistedRemovedEvent.OutputObject
    >;

    "FactorySettingsUpdated(uint256,uint256,uint256)": TypedContractEvent<
      FactorySettingsUpdatedEvent.InputTuple,
      FactorySettingsUpdatedEvent.OutputTuple,
      FactorySettingsUpdatedEvent.OutputObject
    >;
    FactorySettingsUpdated: TypedContractEvent<
      FactorySettingsUpdatedEvent.InputTuple,
      FactorySettingsUpdatedEvent.OutputTuple,
      FactorySettingsUpdatedEvent.OutputObject
    >;

    "GovernanceAddressMapped(bytes32,address)": TypedContractEvent<
      GovernanceAddressMappedEvent.InputTuple,
      GovernanceAddressMappedEvent.OutputTuple,
      GovernanceAddressMappedEvent.OutputObject
    >;
    GovernanceAddressMapped: TypedContractEvent<
      GovernanceAddressMappedEvent.InputTuple,
      GovernanceAddressMappedEvent.OutputTuple,
      GovernanceAddressMappedEvent.OutputObject
    >;

    "GovernanceAddressSet(address)": TypedContractEvent<
      GovernanceAddressSetEvent.InputTuple,
      GovernanceAddressSetEvent.OutputTuple,
      GovernanceAddressSetEvent.OutputObject
    >;
    GovernanceAddressSet: TypedContractEvent<
      GovernanceAddressSetEvent.InputTuple,
      GovernanceAddressSetEvent.OutputTuple,
      GovernanceAddressSetEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "SetAssetHandler(address)": TypedContractEvent<
      SetAssetHandlerEvent.InputTuple,
      SetAssetHandlerEvent.OutputTuple,
      SetAssetHandlerEvent.OutputObject
    >;
    SetAssetHandler: TypedContractEvent<
      SetAssetHandlerEvent.InputTuple,
      SetAssetHandlerEvent.OutputTuple,
      SetAssetHandlerEvent.OutputObject
    >;

    "SetVaultStorageVersion(uint256)": TypedContractEvent<
      SetVaultStorageVersionEvent.InputTuple,
      SetVaultStorageVersionEvent.OutputTuple,
      SetVaultStorageVersionEvent.OutputObject
    >;
    SetVaultStorageVersion: TypedContractEvent<
      SetVaultStorageVersionEvent.InputTuple,
      SetVaultStorageVersionEvent.OutputTuple,
      SetVaultStorageVersionEvent.OutputObject
    >;

    "TreasuryAddressSet(address)": TypedContractEvent<
      TreasuryAddressSetEvent.InputTuple,
      TreasuryAddressSetEvent.OutputTuple,
      TreasuryAddressSetEvent.OutputObject
    >;
    TreasuryAddressSet: TypedContractEvent<
      TreasuryAddressSetEvent.InputTuple,
      TreasuryAddressSetEvent.OutputTuple,
      TreasuryAddressSetEvent.OutputObject
    >;

    "UnderlyingAssetAdded(address,uint16)": TypedContractEvent<
      UnderlyingAssetAddedEvent.InputTuple,
      UnderlyingAssetAddedEvent.OutputTuple,
      UnderlyingAssetAddedEvent.OutputObject
    >;
    UnderlyingAssetAdded: TypedContractEvent<
      UnderlyingAssetAddedEvent.InputTuple,
      UnderlyingAssetAddedEvent.OutputTuple,
      UnderlyingAssetAddedEvent.OutputObject
    >;

    "UnderlyingAssetRemoved(address)": TypedContractEvent<
      UnderlyingAssetRemovedEvent.InputTuple,
      UnderlyingAssetRemovedEvent.OutputTuple,
      UnderlyingAssetRemovedEvent.OutputObject
    >;
    UnderlyingAssetRemoved: TypedContractEvent<
      UnderlyingAssetRemovedEvent.InputTuple,
      UnderlyingAssetRemovedEvent.OutputTuple,
      UnderlyingAssetRemovedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "VaultCreated(address,address,address,string,string,uint256)": TypedContractEvent<
      VaultCreatedEvent.InputTuple,
      VaultCreatedEvent.OutputTuple,
      VaultCreatedEvent.OutputObject
    >;
    VaultCreated: TypedContractEvent<
      VaultCreatedEvent.InputTuple,
      VaultCreatedEvent.OutputTuple,
      VaultCreatedEvent.OutputObject
    >;

    "VaultImplementationUpdated(address,address)": TypedContractEvent<
      VaultImplementationUpdatedEvent.InputTuple,
      VaultImplementationUpdatedEvent.OutputTuple,
      VaultImplementationUpdatedEvent.OutputObject
    >;
    VaultImplementationUpdated: TypedContractEvent<
      VaultImplementationUpdatedEvent.InputTuple,
      VaultImplementationUpdatedEvent.OutputTuple,
      VaultImplementationUpdatedEvent.OutputObject
    >;

    "VaultUpgraded(address,address)": TypedContractEvent<
      VaultUpgradedEvent.InputTuple,
      VaultUpgradedEvent.OutputTuple,
      VaultUpgradedEvent.OutputObject
    >;
    VaultUpgraded: TypedContractEvent<
      VaultUpgradedEvent.InputTuple,
      VaultUpgradedEvent.OutputTuple,
      VaultUpgradedEvent.OutputObject
    >;
  };
}
