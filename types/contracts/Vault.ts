/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface VaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "FEE_DENOMINATOR"
      | "MAX_FEE"
      | "MAX_PRICE_DEVIATION"
      | "MAX_PROTOCOL_FEE"
      | "_updateAssetPricesExternal"
      | "addSupportedAsset"
      | "addSupportedPlatform"
      | "advanceEpoch"
      | "allowance"
      | "approve"
      | "areAllPositionsLiquidated"
      | "asset"
      | "assetBalance"
      | "assetPosition"
      | "authorizedStrategies"
      | "balanceOf"
      | "callContract"
      | "canGoLive"
      | "convertAssetValueToUnderlying"
      | "convertToAssets"
      | "convertToShares"
      | "currentEpoch"
      | "currentRealization"
      | "decimals"
      | "deposit"
      | "emergencyLiquidateAll"
      | "emergencyOracleMode"
      | "epochEndAssets"
      | "epochStartAssets"
      | "epochStartTime"
      | "factory"
      | "fundraisingDuration"
      | "getAllSupportedAssets"
      | "getAssetType"
      | "getAssetsToLiquidate"
      | "getAutoRealizationStatus"
      | "getEpochInfo"
      | "getSupportedAssets"
      | "getSupportedAssetsCount"
      | "getVaultAssetBreakdown"
      | "getVaultInfo"
      | "goLive"
      | "initialize"
      | "isAssetSupported"
      | "isPlatformSupported"
      | "isSupportedAsset"
      | "lastAssetPrices"
      | "lastRealizationTime"
      | "liquidateAllPositionsForHarvest"
      | "managementFee"
      | "manager"
      | "maxCapacity"
      | "maxDeposit"
      | "maxMint"
      | "maxPriceDeviationBps"
      | "maxRedeem"
      | "maxWithdraw"
      | "minDepositAmount"
      | "minFundraisingAmount"
      | "mint"
      | "name"
      | "owner"
      | "pause"
      | "paused"
      | "performanceFee"
      | "previewDeposit"
      | "previewMint"
      | "previewRedeem"
      | "previewWithdraw"
      | "previewWithdrawalAfterFees"
      | "previewWithdrawalImpact"
      | "protocolFee"
      | "protocolTreasury"
      | "realizationCooldown"
      | "realizeByManager"
      | "redeem"
      | "removeSupportedAsset"
      | "removeSupportedPlatform"
      | "renounceOwnership"
      | "returnToFundraising"
      | "setEmergencyOracleMode"
      | "setEmergencyPrice"
      | "setStrategyAuthorization"
      | "shouldManagerRealize"
      | "supportedAssets"
      | "supportedPlatforms"
      | "symbol"
      | "totalAssets"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "underlyingAsset"
      | "unpause"
      | "updateEpochSettings"
      | "updateFees"
      | "updateOracleProtection"
      | "updateProtocolTreasury"
      | "updateVaultSettings"
      | "vaultState"
      | "version"
      | "withdraw"
      | "withdrawalFee"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AllPositionsLiquidated"
      | "Approval"
      | "AssetAdded"
      | "AssetRemoved"
      | "AutoRealizationTriggered"
      | "ContractCalled"
      | "Deposit"
      | "Deposited"
      | "EmergencyOracleModeActivated"
      | "EpochAdvanced"
      | "FeesExtracted"
      | "HarvestBlocked"
      | "Initialized"
      | "OracleProtectionUpdated"
      | "OwnershipTransferred"
      | "Paused"
      | "StateChanged"
      | "Transfer"
      | "Unpaused"
      | "Withdraw"
      | "Withdrawn"
      | "YieldHarvested"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "FEE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_PRICE_DEVIATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PROTOCOL_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_updateAssetPricesExternal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addSupportedAsset",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addSupportedPlatform",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "advanceEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "areAllPositionsLiquidated",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "asset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "assetBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assetPosition",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedStrategies",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "callContract",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "canGoLive", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "convertAssetValueToUnderlying",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToAssets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentRealization",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyLiquidateAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyOracleMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochEndAssets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "epochStartAssets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "epochStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fundraisingDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllSupportedAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetType",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetsToLiquidate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAutoRealizationStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedAssetsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultAssetBreakdown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultInfo",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "goLive", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isAssetSupported",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isPlatformSupported",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isSupportedAsset",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastAssetPrices",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastRealizationTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateAllPositionsForHarvest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "managementFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxCapacity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxDeposit",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxMint",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxPriceDeviationBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxRedeem",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxWithdraw",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "minDepositAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minFundraisingAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "performanceFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "previewDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewMint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewRedeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewWithdrawalAfterFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewWithdrawalImpact",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "realizationCooldown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "realizeByManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSupportedAsset",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSupportedPlatform",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "returnToFundraising",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyOracleMode",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyPrice",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategyAuthorization",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "shouldManagerRealize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportedAssets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedPlatforms",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingAsset",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateEpochSettings",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFees",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOracleProtection",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProtocolTreasury",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVaultSettings",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultState",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalFee",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "FEE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PRICE_DEVIATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PROTOCOL_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_updateAssetPricesExternal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSupportedAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSupportedPlatform",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "advanceEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "areAllPositionsLiquidated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "callContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canGoLive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convertAssetValueToUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRealization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyLiquidateAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyOracleMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochEndAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochStartAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundraisingDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllSupportedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetsToLiquidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAutoRealizationStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedAssetsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultAssetBreakdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "goLive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAssetSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPlatformSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSupportedAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastAssetPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRealizationTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateAllPositionsForHarvest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managementFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxCapacity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxDeposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxPriceDeviationBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxRedeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minFundraisingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performanceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewWithdrawalAfterFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewWithdrawalImpact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realizationCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realizeByManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeSupportedAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSupportedPlatform",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnToFundraising",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyOracleMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategyAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shouldManagerRealize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedPlatforms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateEpochSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateOracleProtection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProtocolTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVaultSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaultState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalFee",
    data: BytesLike
  ): Result;
}

export namespace AllPositionsLiquidatedEvent {
  export type InputTuple = [
    totalConvertedValue: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [totalConvertedValue: bigint, timestamp: bigint];
  export interface OutputObject {
    totalConvertedValue: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetAddedEvent {
  export type InputTuple = [
    vault: AddressLike,
    asset: AddressLike,
    position: BigNumberish
  ];
  export type OutputTuple = [vault: string, asset: string, position: bigint];
  export interface OutputObject {
    vault: string;
    asset: string;
    position: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetRemovedEvent {
  export type InputTuple = [vault: AddressLike, asset: AddressLike];
  export type OutputTuple = [vault: string, asset: string];
  export interface OutputObject {
    vault: string;
    asset: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AutoRealizationTriggeredEvent {
  export type InputTuple = [
    triggeredBy: AddressLike,
    preRealizationValue: BigNumberish,
    totalFeesExtracted: BigNumberish,
    blockNumber: BigNumberish
  ];
  export type OutputTuple = [
    triggeredBy: string,
    preRealizationValue: bigint,
    totalFeesExtracted: bigint,
    blockNumber: bigint
  ];
  export interface OutputObject {
    triggeredBy: string;
    preRealizationValue: bigint;
    totalFeesExtracted: bigint;
    blockNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractCalledEvent {
  export type InputTuple = [
    vault: AddressLike,
    target: AddressLike,
    data: BytesLike,
    value: BigNumberish
  ];
  export type OutputTuple = [
    vault: string,
    target: string,
    data: string,
    value: bigint
  ];
  export interface OutputObject {
    vault: string;
    target: string;
    data: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    sender: AddressLike,
    owner: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    owner: string,
    assets: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    sender: string;
    owner: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositedEvent {
  export type InputTuple = [
    vault: AddressLike,
    user: AddressLike,
    asset: AddressLike,
    amount: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    vault: string,
    user: string,
    asset: string,
    amount: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    vault: string;
    user: string;
    asset: string;
    amount: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyOracleModeActivatedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EpochAdvancedEvent {
  export type InputTuple = [
    oldEpoch: BigNumberish,
    newEpoch: BigNumberish,
    totalAssetsReturned: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    oldEpoch: bigint,
    newEpoch: bigint,
    totalAssetsReturned: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    oldEpoch: bigint;
    newEpoch: bigint;
    totalAssetsReturned: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesExtractedEvent {
  export type InputTuple = [
    vault: AddressLike,
    manager: AddressLike,
    protocolTreasury: AddressLike,
    managementFee: BigNumberish,
    managerPerformanceFee: BigNumberish,
    protocolFee: BigNumberish
  ];
  export type OutputTuple = [
    vault: string,
    manager: string,
    protocolTreasury: string,
    managementFee: bigint,
    managerPerformanceFee: bigint,
    protocolFee: bigint
  ];
  export interface OutputObject {
    vault: string;
    manager: string;
    protocolTreasury: string;
    managementFee: bigint;
    managerPerformanceFee: bigint;
    protocolFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HarvestBlockedEvent {
  export type InputTuple = [
    reason: string,
    remainingAssets: BigNumberish,
    assetsToLiquidate: AddressLike[]
  ];
  export type OutputTuple = [
    reason: string,
    remainingAssets: bigint,
    assetsToLiquidate: string[]
  ];
  export interface OutputObject {
    reason: string;
    remainingAssets: bigint;
    assetsToLiquidate: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OracleProtectionUpdatedEvent {
  export type InputTuple = [
    harvestCooldown: BigNumberish,
    maxPriceDeviationBps: BigNumberish,
    emergencyMode: boolean
  ];
  export type OutputTuple = [
    harvestCooldown: bigint,
    maxPriceDeviationBps: bigint,
    emergencyMode: boolean
  ];
  export interface OutputObject {
    harvestCooldown: bigint;
    maxPriceDeviationBps: bigint;
    emergencyMode: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StateChangedEvent {
  export type InputTuple = [
    epoch: BigNumberish,
    oldState: BigNumberish,
    newState: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    epoch: bigint,
    oldState: bigint,
    newState: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    epoch: bigint;
    oldState: bigint;
    newState: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    sender: AddressLike,
    receiver: AddressLike,
    owner: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    receiver: string,
    owner: string,
    assets: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    sender: string;
    receiver: string;
    owner: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [
    vault: AddressLike,
    user: AddressLike,
    asset: AddressLike,
    amount: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    vault: string,
    user: string,
    asset: string,
    amount: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    vault: string;
    user: string;
    asset: string;
    amount: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace YieldHarvestedEvent {
  export type InputTuple = [
    vault: AddressLike,
    asset: AddressLike,
    amount: BigNumberish,
    managementFee: BigNumberish,
    performanceFee: BigNumberish,
    protocolFee: BigNumberish
  ];
  export type OutputTuple = [
    vault: string,
    asset: string,
    amount: bigint,
    managementFee: bigint,
    performanceFee: bigint,
    protocolFee: bigint
  ];
  export interface OutputObject {
    vault: string;
    asset: string;
    amount: bigint;
    managementFee: bigint;
    performanceFee: bigint;
    protocolFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Vault extends BaseContract {
  connect(runner?: ContractRunner | null): Vault;
  waitForDeployment(): Promise<this>;

  interface: VaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  FEE_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  MAX_FEE: TypedContractMethod<[], [bigint], "view">;

  MAX_PRICE_DEVIATION: TypedContractMethod<[], [bigint], "view">;

  MAX_PROTOCOL_FEE: TypedContractMethod<[], [bigint], "view">;

  _updateAssetPricesExternal: TypedContractMethod<[], [void], "nonpayable">;

  addSupportedAsset: TypedContractMethod<
    [_asset: AddressLike],
    [void],
    "nonpayable"
  >;

  addSupportedPlatform: TypedContractMethod<
    [_platform: string],
    [void],
    "nonpayable"
  >;

  advanceEpoch: TypedContractMethod<[], [void], "nonpayable">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  areAllPositionsLiquidated: TypedContractMethod<[], [boolean], "view">;

  asset: TypedContractMethod<[], [string], "view">;

  assetBalance: TypedContractMethod<[asset: AddressLike], [bigint], "view">;

  assetPosition: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  authorizedStrategies: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  callContract: TypedContractMethod<
    [target: AddressLike, value: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  canGoLive: TypedContractMethod<[], [boolean], "view">;

  convertAssetValueToUnderlying: TypedContractMethod<
    [assetAddress: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;

  convertToAssets: TypedContractMethod<
    [shares: BigNumberish],
    [bigint],
    "view"
  >;

  convertToShares: TypedContractMethod<
    [assets: BigNumberish],
    [bigint],
    "view"
  >;

  currentEpoch: TypedContractMethod<[], [bigint], "view">;

  currentRealization: TypedContractMethod<
    [],
    [
      [boolean, bigint, bigint, bigint, bigint] & {
        isRealized: boolean;
        realizedAt: bigint;
        preRealizationValue: bigint;
        totalFeesExtracted: bigint;
        blockNumber: bigint;
      }
    ],
    "view"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  deposit: TypedContractMethod<
    [assets: BigNumberish, receiver: AddressLike],
    [bigint],
    "nonpayable"
  >;

  emergencyLiquidateAll: TypedContractMethod<[], [void], "nonpayable">;

  emergencyOracleMode: TypedContractMethod<[], [boolean], "view">;

  epochEndAssets: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  epochStartAssets: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  epochStartTime: TypedContractMethod<[], [bigint], "view">;

  factory: TypedContractMethod<[], [string], "view">;

  fundraisingDuration: TypedContractMethod<[], [bigint], "view">;

  getAllSupportedAssets: TypedContractMethod<[], [string[]], "view">;

  getAssetType: TypedContractMethod<[asset: AddressLike], [bigint], "view">;

  getAssetsToLiquidate: TypedContractMethod<
    [],
    [[string[], bigint] & { assetsToLiquidate: string[]; totalValue: bigint }],
    "view"
  >;

  getAutoRealizationStatus: TypedContractMethod<
    [],
    [
      [boolean, bigint, bigint, boolean] & {
        isRealized: boolean;
        realizedAt: bigint;
        timeToNextRealization: bigint;
        hasUnrealizedProfits: boolean;
      }
    ],
    "view"
  >;

  getEpochInfo: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        epoch: bigint;
        state: bigint;
        startTime: bigint;
        startAssets: bigint;
        endAssets: bigint;
      }
    ],
    "view"
  >;

  getSupportedAssets: TypedContractMethod<[], [string[]], "view">;

  getSupportedAssetsCount: TypedContractMethod<[], [bigint], "view">;

  getVaultAssetBreakdown: TypedContractMethod<
    [],
    [
      [string[], bigint[], bigint[]] & {
        assetAddresses: string[];
        assetBalances: bigint[];
        assetValues: bigint[];
      }
    ],
    "view"
  >;

  getVaultInfo: TypedContractMethod<
    [],
    [
      [string, bigint, bigint, bigint, bigint, bigint] & {
        vaultUnderlyingAsset: string;
        totalShares: bigint;
        totalAssetsAmount: bigint;
        sharePrice: bigint;
        maxCap: bigint;
        minDeposit: bigint;
      }
    ],
    "view"
  >;

  goLive: TypedContractMethod<[], [void], "nonpayable">;

  initialize: TypedContractMethod<
    [
      _name: string,
      _symbol: string,
      _underlyingAsset: AddressLike,
      _manager: AddressLike,
      _maxCapacity: BigNumberish,
      _managementFee: BigNumberish,
      _performanceFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  isAssetSupported: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  isPlatformSupported: TypedContractMethod<[arg0: string], [boolean], "view">;

  isSupportedAsset: TypedContractMethod<
    [asset: AddressLike],
    [boolean],
    "view"
  >;

  lastAssetPrices: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  lastRealizationTime: TypedContractMethod<[], [bigint], "view">;

  liquidateAllPositionsForHarvest: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  managementFee: TypedContractMethod<[], [bigint], "view">;

  manager: TypedContractMethod<[], [string], "view">;

  maxCapacity: TypedContractMethod<[], [bigint], "view">;

  maxDeposit: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  maxMint: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  maxPriceDeviationBps: TypedContractMethod<[], [bigint], "view">;

  maxRedeem: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  maxWithdraw: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  minDepositAmount: TypedContractMethod<[], [bigint], "view">;

  minFundraisingAmount: TypedContractMethod<[], [bigint], "view">;

  mint: TypedContractMethod<
    [shares: BigNumberish, receiver: AddressLike],
    [bigint],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  performanceFee: TypedContractMethod<[], [bigint], "view">;

  previewDeposit: TypedContractMethod<[assets: BigNumberish], [bigint], "view">;

  previewMint: TypedContractMethod<[shares: BigNumberish], [bigint], "view">;

  previewRedeem: TypedContractMethod<[shares: BigNumberish], [bigint], "view">;

  previewWithdraw: TypedContractMethod<
    [assets: BigNumberish],
    [bigint],
    "view"
  >;

  previewWithdrawalAfterFees: TypedContractMethod<
    [assets: BigNumberish],
    [bigint],
    "view"
  >;

  previewWithdrawalImpact: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [boolean, bigint] & {
        willAutoRealize: boolean;
        estimatedFeesToPay: bigint;
      }
    ],
    "view"
  >;

  protocolFee: TypedContractMethod<[], [bigint], "view">;

  protocolTreasury: TypedContractMethod<[], [string], "view">;

  realizationCooldown: TypedContractMethod<[], [bigint], "view">;

  realizeByManager: TypedContractMethod<[], [void], "nonpayable">;

  redeem: TypedContractMethod<
    [shares: BigNumberish, receiver: AddressLike, owner: AddressLike],
    [bigint],
    "nonpayable"
  >;

  removeSupportedAsset: TypedContractMethod<
    [_asset: AddressLike],
    [void],
    "nonpayable"
  >;

  removeSupportedPlatform: TypedContractMethod<
    [_platform: string],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  returnToFundraising: TypedContractMethod<[], [void], "nonpayable">;

  setEmergencyOracleMode: TypedContractMethod<
    [_emergencyMode: boolean],
    [void],
    "nonpayable"
  >;

  setEmergencyPrice: TypedContractMethod<
    [_asset: AddressLike, _price: BigNumberish],
    [void],
    "nonpayable"
  >;

  setStrategyAuthorization: TypedContractMethod<
    [_strategy: AddressLike, _authorized: boolean],
    [void],
    "nonpayable"
  >;

  shouldManagerRealize: TypedContractMethod<
    [],
    [
      [boolean, string, bigint] & {
        needsManualRealization: boolean;
        reason: string;
        cooldownRemaining: bigint;
      }
    ],
    "view"
  >;

  supportedAssets: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  supportedPlatforms: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalAssets: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  underlyingAsset: TypedContractMethod<[], [string], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateEpochSettings: TypedContractMethod<
    [_fundraisingDuration: BigNumberish, _minFundraisingAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateFees: TypedContractMethod<
    [
      _managementFee: BigNumberish,
      _performanceFee: BigNumberish,
      _withdrawalFee: BigNumberish,
      _protocolFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updateOracleProtection: TypedContractMethod<
    [_realizationCooldown: BigNumberish, _maxPriceDeviationBps: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateProtocolTreasury: TypedContractMethod<
    [_newTreasury: AddressLike],
    [void],
    "nonpayable"
  >;

  updateVaultSettings: TypedContractMethod<
    [_maxCapacity: BigNumberish, _minDepositAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  vaultState: TypedContractMethod<[], [bigint], "view">;

  version: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<
    [assets: BigNumberish, receiver: AddressLike, owner: AddressLike],
    [bigint],
    "nonpayable"
  >;

  withdrawalFee: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "FEE_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_PRICE_DEVIATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_PROTOCOL_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_updateAssetPricesExternal"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addSupportedAsset"
  ): TypedContractMethod<[_asset: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addSupportedPlatform"
  ): TypedContractMethod<[_platform: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "advanceEpoch"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "areAllPositionsLiquidated"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "asset"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "assetBalance"
  ): TypedContractMethod<[asset: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "assetPosition"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "authorizedStrategies"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "callContract"
  ): TypedContractMethod<
    [target: AddressLike, value: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "canGoLive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "convertAssetValueToUnderlying"
  ): TypedContractMethod<
    [assetAddress: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "convertToAssets"
  ): TypedContractMethod<[shares: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "convertToShares"
  ): TypedContractMethod<[assets: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "currentEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "currentRealization"
  ): TypedContractMethod<
    [],
    [
      [boolean, bigint, bigint, bigint, bigint] & {
        isRealized: boolean;
        realizedAt: bigint;
        preRealizationValue: bigint;
        totalFeesExtracted: bigint;
        blockNumber: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [assets: BigNumberish, receiver: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyLiquidateAll"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyOracleMode"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "epochEndAssets"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "epochStartAssets"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "epochStartTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fundraisingDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAllSupportedAssets"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAssetType"
  ): TypedContractMethod<[asset: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAssetsToLiquidate"
  ): TypedContractMethod<
    [],
    [[string[], bigint] & { assetsToLiquidate: string[]; totalValue: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAutoRealizationStatus"
  ): TypedContractMethod<
    [],
    [
      [boolean, bigint, bigint, boolean] & {
        isRealized: boolean;
        realizedAt: bigint;
        timeToNextRealization: bigint;
        hasUnrealizedProfits: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEpochInfo"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        epoch: bigint;
        state: bigint;
        startTime: bigint;
        startAssets: bigint;
        endAssets: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSupportedAssets"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getSupportedAssetsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVaultAssetBreakdown"
  ): TypedContractMethod<
    [],
    [
      [string[], bigint[], bigint[]] & {
        assetAddresses: string[];
        assetBalances: bigint[];
        assetValues: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVaultInfo"
  ): TypedContractMethod<
    [],
    [
      [string, bigint, bigint, bigint, bigint, bigint] & {
        vaultUnderlyingAsset: string;
        totalShares: bigint;
        totalAssetsAmount: bigint;
        sharePrice: bigint;
        maxCap: bigint;
        minDeposit: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "goLive"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _name: string,
      _symbol: string,
      _underlyingAsset: AddressLike,
      _manager: AddressLike,
      _maxCapacity: BigNumberish,
      _managementFee: BigNumberish,
      _performanceFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isAssetSupported"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isPlatformSupported"
  ): TypedContractMethod<[arg0: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "isSupportedAsset"
  ): TypedContractMethod<[asset: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastAssetPrices"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastRealizationTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "liquidateAllPositionsForHarvest"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "managementFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "manager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "maxCapacity"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxDeposit"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxMint"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxPriceDeviationBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxRedeem"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxWithdraw"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "minDepositAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minFundraisingAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [shares: BigNumberish, receiver: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "performanceFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "previewDeposit"
  ): TypedContractMethod<[assets: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "previewMint"
  ): TypedContractMethod<[shares: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "previewRedeem"
  ): TypedContractMethod<[shares: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "previewWithdraw"
  ): TypedContractMethod<[assets: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "previewWithdrawalAfterFees"
  ): TypedContractMethod<[assets: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "previewWithdrawalImpact"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [boolean, bigint] & {
        willAutoRealize: boolean;
        estimatedFeesToPay: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "protocolFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "protocolTreasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "realizationCooldown"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "realizeByManager"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "redeem"
  ): TypedContractMethod<
    [shares: BigNumberish, receiver: AddressLike, owner: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeSupportedAsset"
  ): TypedContractMethod<[_asset: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeSupportedPlatform"
  ): TypedContractMethod<[_platform: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "returnToFundraising"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setEmergencyOracleMode"
  ): TypedContractMethod<[_emergencyMode: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setEmergencyPrice"
  ): TypedContractMethod<
    [_asset: AddressLike, _price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setStrategyAuthorization"
  ): TypedContractMethod<
    [_strategy: AddressLike, _authorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "shouldManagerRealize"
  ): TypedContractMethod<
    [],
    [
      [boolean, string, bigint] & {
        needsManualRealization: boolean;
        reason: string;
        cooldownRemaining: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "supportedAssets"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "supportedPlatforms"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalAssets"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "underlyingAsset"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateEpochSettings"
  ): TypedContractMethod<
    [_fundraisingDuration: BigNumberish, _minFundraisingAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateFees"
  ): TypedContractMethod<
    [
      _managementFee: BigNumberish,
      _performanceFee: BigNumberish,
      _withdrawalFee: BigNumberish,
      _protocolFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateOracleProtection"
  ): TypedContractMethod<
    [_realizationCooldown: BigNumberish, _maxPriceDeviationBps: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateProtocolTreasury"
  ): TypedContractMethod<[_newTreasury: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateVaultSettings"
  ): TypedContractMethod<
    [_maxCapacity: BigNumberish, _minDepositAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "vaultState"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [assets: BigNumberish, receiver: AddressLike, owner: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawalFee"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "AllPositionsLiquidated"
  ): TypedContractEvent<
    AllPositionsLiquidatedEvent.InputTuple,
    AllPositionsLiquidatedEvent.OutputTuple,
    AllPositionsLiquidatedEvent.OutputObject
  >;
  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "AssetAdded"
  ): TypedContractEvent<
    AssetAddedEvent.InputTuple,
    AssetAddedEvent.OutputTuple,
    AssetAddedEvent.OutputObject
  >;
  getEvent(
    key: "AssetRemoved"
  ): TypedContractEvent<
    AssetRemovedEvent.InputTuple,
    AssetRemovedEvent.OutputTuple,
    AssetRemovedEvent.OutputObject
  >;
  getEvent(
    key: "AutoRealizationTriggered"
  ): TypedContractEvent<
    AutoRealizationTriggeredEvent.InputTuple,
    AutoRealizationTriggeredEvent.OutputTuple,
    AutoRealizationTriggeredEvent.OutputObject
  >;
  getEvent(
    key: "ContractCalled"
  ): TypedContractEvent<
    ContractCalledEvent.InputTuple,
    ContractCalledEvent.OutputTuple,
    ContractCalledEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "Deposited"
  ): TypedContractEvent<
    DepositedEvent.InputTuple,
    DepositedEvent.OutputTuple,
    DepositedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyOracleModeActivated"
  ): TypedContractEvent<
    EmergencyOracleModeActivatedEvent.InputTuple,
    EmergencyOracleModeActivatedEvent.OutputTuple,
    EmergencyOracleModeActivatedEvent.OutputObject
  >;
  getEvent(
    key: "EpochAdvanced"
  ): TypedContractEvent<
    EpochAdvancedEvent.InputTuple,
    EpochAdvancedEvent.OutputTuple,
    EpochAdvancedEvent.OutputObject
  >;
  getEvent(
    key: "FeesExtracted"
  ): TypedContractEvent<
    FeesExtractedEvent.InputTuple,
    FeesExtractedEvent.OutputTuple,
    FeesExtractedEvent.OutputObject
  >;
  getEvent(
    key: "HarvestBlocked"
  ): TypedContractEvent<
    HarvestBlockedEvent.InputTuple,
    HarvestBlockedEvent.OutputTuple,
    HarvestBlockedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OracleProtectionUpdated"
  ): TypedContractEvent<
    OracleProtectionUpdatedEvent.InputTuple,
    OracleProtectionUpdatedEvent.OutputTuple,
    OracleProtectionUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "StateChanged"
  ): TypedContractEvent<
    StateChangedEvent.InputTuple,
    StateChangedEvent.OutputTuple,
    StateChangedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "YieldHarvested"
  ): TypedContractEvent<
    YieldHarvestedEvent.InputTuple,
    YieldHarvestedEvent.OutputTuple,
    YieldHarvestedEvent.OutputObject
  >;

  filters: {
    "AllPositionsLiquidated(uint256,uint256)": TypedContractEvent<
      AllPositionsLiquidatedEvent.InputTuple,
      AllPositionsLiquidatedEvent.OutputTuple,
      AllPositionsLiquidatedEvent.OutputObject
    >;
    AllPositionsLiquidated: TypedContractEvent<
      AllPositionsLiquidatedEvent.InputTuple,
      AllPositionsLiquidatedEvent.OutputTuple,
      AllPositionsLiquidatedEvent.OutputObject
    >;

    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "AssetAdded(address,address,uint256)": TypedContractEvent<
      AssetAddedEvent.InputTuple,
      AssetAddedEvent.OutputTuple,
      AssetAddedEvent.OutputObject
    >;
    AssetAdded: TypedContractEvent<
      AssetAddedEvent.InputTuple,
      AssetAddedEvent.OutputTuple,
      AssetAddedEvent.OutputObject
    >;

    "AssetRemoved(address,address)": TypedContractEvent<
      AssetRemovedEvent.InputTuple,
      AssetRemovedEvent.OutputTuple,
      AssetRemovedEvent.OutputObject
    >;
    AssetRemoved: TypedContractEvent<
      AssetRemovedEvent.InputTuple,
      AssetRemovedEvent.OutputTuple,
      AssetRemovedEvent.OutputObject
    >;

    "AutoRealizationTriggered(address,uint256,uint256,uint256)": TypedContractEvent<
      AutoRealizationTriggeredEvent.InputTuple,
      AutoRealizationTriggeredEvent.OutputTuple,
      AutoRealizationTriggeredEvent.OutputObject
    >;
    AutoRealizationTriggered: TypedContractEvent<
      AutoRealizationTriggeredEvent.InputTuple,
      AutoRealizationTriggeredEvent.OutputTuple,
      AutoRealizationTriggeredEvent.OutputObject
    >;

    "ContractCalled(address,address,bytes,uint256)": TypedContractEvent<
      ContractCalledEvent.InputTuple,
      ContractCalledEvent.OutputTuple,
      ContractCalledEvent.OutputObject
    >;
    ContractCalled: TypedContractEvent<
      ContractCalledEvent.InputTuple,
      ContractCalledEvent.OutputTuple,
      ContractCalledEvent.OutputObject
    >;

    "Deposit(address,address,uint256,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "Deposited(address,address,address,uint256,uint256)": TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
    Deposited: TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;

    "EmergencyOracleModeActivated()": TypedContractEvent<
      EmergencyOracleModeActivatedEvent.InputTuple,
      EmergencyOracleModeActivatedEvent.OutputTuple,
      EmergencyOracleModeActivatedEvent.OutputObject
    >;
    EmergencyOracleModeActivated: TypedContractEvent<
      EmergencyOracleModeActivatedEvent.InputTuple,
      EmergencyOracleModeActivatedEvent.OutputTuple,
      EmergencyOracleModeActivatedEvent.OutputObject
    >;

    "EpochAdvanced(uint256,uint256,uint256,uint256)": TypedContractEvent<
      EpochAdvancedEvent.InputTuple,
      EpochAdvancedEvent.OutputTuple,
      EpochAdvancedEvent.OutputObject
    >;
    EpochAdvanced: TypedContractEvent<
      EpochAdvancedEvent.InputTuple,
      EpochAdvancedEvent.OutputTuple,
      EpochAdvancedEvent.OutputObject
    >;

    "FeesExtracted(address,address,address,uint256,uint256,uint256)": TypedContractEvent<
      FeesExtractedEvent.InputTuple,
      FeesExtractedEvent.OutputTuple,
      FeesExtractedEvent.OutputObject
    >;
    FeesExtracted: TypedContractEvent<
      FeesExtractedEvent.InputTuple,
      FeesExtractedEvent.OutputTuple,
      FeesExtractedEvent.OutputObject
    >;

    "HarvestBlocked(string,uint256,address[])": TypedContractEvent<
      HarvestBlockedEvent.InputTuple,
      HarvestBlockedEvent.OutputTuple,
      HarvestBlockedEvent.OutputObject
    >;
    HarvestBlocked: TypedContractEvent<
      HarvestBlockedEvent.InputTuple,
      HarvestBlockedEvent.OutputTuple,
      HarvestBlockedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OracleProtectionUpdated(uint256,uint256,bool)": TypedContractEvent<
      OracleProtectionUpdatedEvent.InputTuple,
      OracleProtectionUpdatedEvent.OutputTuple,
      OracleProtectionUpdatedEvent.OutputObject
    >;
    OracleProtectionUpdated: TypedContractEvent<
      OracleProtectionUpdatedEvent.InputTuple,
      OracleProtectionUpdatedEvent.OutputTuple,
      OracleProtectionUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "StateChanged(uint256,uint8,uint8,uint256)": TypedContractEvent<
      StateChangedEvent.InputTuple,
      StateChangedEvent.OutputTuple,
      StateChangedEvent.OutputObject
    >;
    StateChanged: TypedContractEvent<
      StateChangedEvent.InputTuple,
      StateChangedEvent.OutputTuple,
      StateChangedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Withdraw(address,address,address,uint256,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;

    "Withdrawn(address,address,address,uint256,uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;

    "YieldHarvested(address,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      YieldHarvestedEvent.InputTuple,
      YieldHarvestedEvent.OutputTuple,
      YieldHarvestedEvent.OutputObject
    >;
    YieldHarvested: TypedContractEvent<
      YieldHarvestedEvent.InputTuple,
      YieldHarvestedEvent.OutputTuple,
      YieldHarvestedEvent.OutputObject
    >;
  };
}
