/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface TxDataUtilsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "convert32toAddress"
      | "getArrayIndex"
      | "getArrayLast"
      | "getArrayLength"
      | "getBytes"
      | "getInput"
      | "getMethod"
      | "getParams"
      | "read32"
      | "read4left"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "convert32toAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getArrayIndex",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getArrayLast",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getArrayLength",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBytes",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInput",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMethod",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getParams",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "read32",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "read4left",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "convert32toAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArrayIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArrayLast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArrayLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBytes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getInput", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMethod", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getParams", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "read32", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "read4left", data: BytesLike): Result;
}

export interface TxDataUtils extends BaseContract {
  connect(runner?: ContractRunner | null): TxDataUtils;
  waitForDeployment(): Promise<this>;

  interface: TxDataUtilsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  convert32toAddress: TypedContractMethod<[data: BytesLike], [string], "view">;

  getArrayIndex: TypedContractMethod<
    [data: BytesLike, inputNum: BigNumberish, arrayIndex: BigNumberish],
    [string],
    "view"
  >;

  getArrayLast: TypedContractMethod<
    [data: BytesLike, inputNum: BigNumberish],
    [string],
    "view"
  >;

  getArrayLength: TypedContractMethod<
    [data: BytesLike, inputNum: BigNumberish],
    [bigint],
    "view"
  >;

  getBytes: TypedContractMethod<
    [data: BytesLike, inputNum: BigNumberish, offset: BigNumberish],
    [string],
    "view"
  >;

  getInput: TypedContractMethod<
    [data: BytesLike, inputNum: BigNumberish],
    [string],
    "view"
  >;

  getMethod: TypedContractMethod<[data: BytesLike], [string], "view">;

  getParams: TypedContractMethod<[data: BytesLike], [string], "view">;

  read32: TypedContractMethod<
    [data: BytesLike, offset: BigNumberish, length: BigNumberish],
    [string],
    "view"
  >;

  read4left: TypedContractMethod<
    [data: BytesLike, offset: BigNumberish],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "convert32toAddress"
  ): TypedContractMethod<[data: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getArrayIndex"
  ): TypedContractMethod<
    [data: BytesLike, inputNum: BigNumberish, arrayIndex: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getArrayLast"
  ): TypedContractMethod<
    [data: BytesLike, inputNum: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getArrayLength"
  ): TypedContractMethod<
    [data: BytesLike, inputNum: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBytes"
  ): TypedContractMethod<
    [data: BytesLike, inputNum: BigNumberish, offset: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getInput"
  ): TypedContractMethod<
    [data: BytesLike, inputNum: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMethod"
  ): TypedContractMethod<[data: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getParams"
  ): TypedContractMethod<[data: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "read32"
  ): TypedContractMethod<
    [data: BytesLike, offset: BigNumberish, length: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "read4left"
  ): TypedContractMethod<
    [data: BytesLike, offset: BigNumberish],
    [string],
    "view"
  >;

  filters: {};
}
