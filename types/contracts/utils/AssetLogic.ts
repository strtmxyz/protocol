/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface AssetLogicInterface extends Interface {
  getFunction(nameOrSignature: "MAX_BATCH_SIZE"): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AssetAdded" | "AssetRemoved" | "BatchAssetsAdded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_BATCH_SIZE",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_BATCH_SIZE",
    data: BytesLike
  ): Result;
}

export namespace AssetAddedEvent {
  export type InputTuple = [
    vault: AddressLike,
    asset: AddressLike,
    position: BigNumberish
  ];
  export type OutputTuple = [vault: string, asset: string, position: bigint];
  export interface OutputObject {
    vault: string;
    asset: string;
    position: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetRemovedEvent {
  export type InputTuple = [vault: AddressLike, asset: AddressLike];
  export type OutputTuple = [vault: string, asset: string];
  export interface OutputObject {
    vault: string;
    asset: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchAssetsAddedEvent {
  export type InputTuple = [
    vault: AddressLike,
    assets: AddressLike[],
    totalCount: BigNumberish
  ];
  export type OutputTuple = [
    vault: string,
    assets: string[],
    totalCount: bigint
  ];
  export interface OutputObject {
    vault: string;
    assets: string[];
    totalCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AssetLogic extends BaseContract {
  connect(runner?: ContractRunner | null): AssetLogic;
  waitForDeployment(): Promise<this>;

  interface: AssetLogicInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_BATCH_SIZE: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_BATCH_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "AssetAdded"
  ): TypedContractEvent<
    AssetAddedEvent.InputTuple,
    AssetAddedEvent.OutputTuple,
    AssetAddedEvent.OutputObject
  >;
  getEvent(
    key: "AssetRemoved"
  ): TypedContractEvent<
    AssetRemovedEvent.InputTuple,
    AssetRemovedEvent.OutputTuple,
    AssetRemovedEvent.OutputObject
  >;
  getEvent(
    key: "BatchAssetsAdded"
  ): TypedContractEvent<
    BatchAssetsAddedEvent.InputTuple,
    BatchAssetsAddedEvent.OutputTuple,
    BatchAssetsAddedEvent.OutputObject
  >;

  filters: {
    "AssetAdded(address,address,uint256)": TypedContractEvent<
      AssetAddedEvent.InputTuple,
      AssetAddedEvent.OutputTuple,
      AssetAddedEvent.OutputObject
    >;
    AssetAdded: TypedContractEvent<
      AssetAddedEvent.InputTuple,
      AssetAddedEvent.OutputTuple,
      AssetAddedEvent.OutputObject
    >;

    "AssetRemoved(address,address)": TypedContractEvent<
      AssetRemovedEvent.InputTuple,
      AssetRemovedEvent.OutputTuple,
      AssetRemovedEvent.OutputObject
    >;
    AssetRemoved: TypedContractEvent<
      AssetRemovedEvent.InputTuple,
      AssetRemovedEvent.OutputTuple,
      AssetRemovedEvent.OutputObject
    >;

    "BatchAssetsAdded(address,address[],uint256)": TypedContractEvent<
      BatchAssetsAddedEvent.InputTuple,
      BatchAssetsAddedEvent.OutputTuple,
      BatchAssetsAddedEvent.OutputObject
    >;
    BatchAssetsAdded: TypedContractEvent<
      BatchAssetsAddedEvent.InputTuple,
      BatchAssetsAddedEvent.OutputTuple,
      BatchAssetsAddedEvent.OutputObject
    >;
  };
}
