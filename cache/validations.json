{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:ERC4626Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:51",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "decimals()",
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "maxMint(address)",
          "maxWithdraw(address)",
          "maxRedeem(address)",
          "previewDeposit(uint256)",
          "previewMint(uint256)",
          "previewWithdraw(uint256)",
          "previewRedeem(uint256)",
          "deposit(uint256,address)",
          "mint(uint256,address)",
          "withdraw(uint256,address,address)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1621": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(ERC4626Storage)387_storage": {
              "label": "struct ERC4626Upgradeable.ERC4626Storage",
              "members": [
                {
                  "label": "_asset",
                  "type": "t_contract(IERC20)1621",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_underlyingDecimals",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC4626": [
              {
                "contract": "ERC4626Upgradeable",
                "label": "_asset",
                "type": "t_contract(IERC20)1621",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:56",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC4626Upgradeable",
                "label": "_underlyingDecimals",
                "type": "t_uint8",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:57",
                "offset": 20,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)755_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils"
        ],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(EIP712Storage)824_storage": {
              "label": "struct EIP712Upgradeable.EIP712Storage",
              "members": [
                {
                  "label": "_hashedName",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_hashedVersion",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_version",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44",
                "offset": 0,
                "slot": "3"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC1363.sol:IERC1363": {
        "src": "@openzeppelin/contracts/interfaces/IERC1363.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFromAndCall(address,address,uint256)",
          "transferFromAndCall(address,address,uint256,bytes)",
          "approveAndCall(address,uint256)",
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267": {
        "src": "@openzeppelin/contracts/interfaces/IERC5267.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "5bc0c12b2faca3b0025dac44fd5e074b6ffb9abc7c2ae956906250f68fb58ae2",
          "withoutMetadata": "f78f3b3ec0cfd3d0376afa7ebbe17cb10b6c7508163caee561240d33775a0c1d",
          "linkedWithoutMetadata": "f78f3b3ec0cfd3d0376afa7ebbe17cb10b6c7508163caee561240d33775a0c1d"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:26"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:15",
        "version": {
          "withMetadata": "de122949e3e0d960404da8ce72165b05c3bb6cda19b9165634d5cde2c8ede5d6",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "4758503cc14cb30a9296cd96b01a05864676128d039f59facfeef721d0e56fed",
          "withoutMetadata": "90ed13c85a95a01f41a9ad5dc3aaa5fe0872b8f878b53baffb9cf5f0f31350ac",
          "linkedWithoutMetadata": "90ed13c85a95a01f41a9ad5dc3aaa5fe0872b8f878b53baffb9cf5f0f31350ac"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProxyAdmin",
            "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:17",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:62",
        "version": {
          "withMetadata": "98f229b2c7b57c24004ea1ac0b13f47d278d91b3aee77558ff4dddafffa5ffe0",
          "withoutMetadata": "98f229b2c7b57c24004ea1ac0b13f47d278d91b3aee77558ff4dddafffa5ffe0",
          "linkedWithoutMetadata": "98f229b2c7b57c24004ea1ac0b13f47d278d91b3aee77558ff4dddafffa5ffe0"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:79"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_admin",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:67"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "9b22860624094cdf665bfb3f41f35e035bb94f79b4004eadcc9d2af256bc2130",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:11",
        "version": {
          "withMetadata": "6e77a0e76a5dc64a1545ae816562b7f78beb64cefbc46e88d87c883fb64227b5",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin/contracts/utils/Errors.sol:14",
        "version": {
          "withMetadata": "1ecc3c56f6e1c8cdc94d52bd41087bdbbcd8fe692567632f3ce3b99c8ed5d77f",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "af0292779d3f7f64aaa6bca67855a06fb162f4cfe6a78f164d9c5077cf4e19f0",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "2ad559740016ef6ae4ed930ac6e26e4b7e948a58957560f1bc1cd31efa92b42d",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:13",
        "version": {
          "withMetadata": "c5414ea72e4e888250ecce156ff5488b043a184c792f679151f3242e7a2144d5",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils": {
        "src": "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:15",
        "version": {
          "withMetadata": "69ac7caa8a45815506a87e87173fc358fafced6649dbf72a97a8ac466ee8b801",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "e8333f49c136d3ed0de47e3047d69c1e05232a00123e4f584fa07771f50c1e49",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/Panic.sol:Panic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "1c9249bbe9670e66491de42af74d452fcaa33ac4cb93b79d0e36e88bbda5da19",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:11",
        "version": {
          "withMetadata": "75e94ee1591c232994acc5c5c2459819568c4b8d70a293138209128cea3ba523",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/Vault.sol:Vault": {
        "src": "contracts/Vault.sol:24",
        "version": {
          "withMetadata": "b6a5ded0523011698e9e67f1e601806b600340c89d73a0f2c76e7ee69feb2229",
          "withoutMetadata": "09d444f5128c7585202c3469954bcce50f3deeebab048f608594e9b444c34820",
          "linkedWithoutMetadata": "09d444f5128c7585202c3469954bcce50f3deeebab048f608594e9b444c34820"
        },
        "inherit": [
          "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:ERC4626Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "contracts/utils/VaultLogic.sol:VaultLogic",
          "contracts/utils/FeeLogic.sol:FeeLogic",
          "@openzeppelin/contracts/utils/math/Math.sol:Math"
        ],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "emergencyLiquidateAll()",
          "assetBalance(address)",
          "totalAssets()",
          "getVaultAssetBreakdown()",
          "maxDeposit(address)",
          "maxWithdraw(address)",
          "previewDeposit(uint256)",
          "previewWithdraw(uint256)",
          "deposit(uint256,address)",
          "withdraw(uint256,address,address)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "_updateAssetPricesExternal()",
          "addSupportedAsset(address)",
          "removeSupportedAsset(address)",
          "addSupportedPlatform(string)",
          "removeSupportedPlatform(string)",
          "updateFees(uint256,uint256,uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "updateOracleProtection(uint256,uint256)",
          "setEmergencyOracleMode(bool)",
          "setEmergencyPrice(address,uint256)",
          "pause()",
          "unpause()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "convertAssetValueToUnderlying(address,uint256)",
          "getAutoRealizationStatus()",
          "previewWithdrawalImpact(uint256)",
          "shouldManagerRealize()",
          "version()",
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/Vault.sol:267",
            "expectedLinearization": [
              "ERC20Upgradeable",
              "ERC4626Upgradeable",
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable"
            ],
            "foundOrder": [
              "ERC4626Upgradeable",
              "ERC20Upgradeable",
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable"
            ]
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "underlyingAsset",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:162"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:163"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:164"
            },
            {
              "label": "protocolTreasury",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:165"
            },
            {
              "label": "currentEpoch",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:168"
            },
            {
              "label": "vaultState",
              "offset": 0,
              "slot": "5",
              "type": "t_enum(VaultState)9856",
              "contract": "Vault",
              "src": "contracts/Vault.sol:169"
            },
            {
              "label": "epochStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:170"
            },
            {
              "label": "fundraisingDuration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:171"
            },
            {
              "label": "minFundraisingAmount",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:172"
            },
            {
              "label": "managementFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:175"
            },
            {
              "label": "performanceFee",
              "offset": 2,
              "slot": "9",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:176"
            },
            {
              "label": "withdrawalFee",
              "offset": 4,
              "slot": "9",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:177"
            },
            {
              "label": "protocolFee",
              "offset": 6,
              "slot": "9",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:178"
            },
            {
              "label": "_totalAssets",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:184"
            },
            {
              "label": "lastRealizationTime",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:185"
            },
            {
              "label": "maxCapacity",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:186"
            },
            {
              "label": "minDepositAmount",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:187"
            },
            {
              "label": "realizationCooldown",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:190"
            },
            {
              "label": "maxPriceDeviationBps",
              "offset": 0,
              "slot": "15",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:191"
            },
            {
              "label": "emergencyOracleMode",
              "offset": 2,
              "slot": "15",
              "type": "t_bool",
              "contract": "Vault",
              "src": "contracts/Vault.sol:192"
            },
            {
              "label": "lastAssetPrices",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:194"
            },
            {
              "label": "currentRealization",
              "offset": 0,
              "slot": "17",
              "type": "t_struct(RealizationState)10029_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:204"
            },
            {
              "label": "supportedAssets",
              "offset": 0,
              "slot": "22",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:207"
            },
            {
              "label": "assetPosition",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:208"
            },
            {
              "label": "isAssetSupported",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:209"
            },
            {
              "label": "supportedPlatforms",
              "offset": 0,
              "slot": "25",
              "type": "t_array(t_string_storage)dyn_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:212"
            },
            {
              "label": "isPlatformSupported",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_string_memory_ptr,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:213"
            },
            {
              "label": "authorizedStrategies",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:216"
            },
            {
              "label": "epochStartAssets",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:219"
            },
            {
              "label": "epochEndAssets",
              "offset": 0,
              "slot": "29",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:220"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1621": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(ERC4626Storage)387_storage": {
              "label": "struct ERC4626Upgradeable.ERC4626Storage",
              "members": [
                {
                  "label": "_asset",
                  "type": "t_contract(IERC20)1621",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_underlyingDecimals",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)755_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]",
              "numberOfBytes": "32"
            },
            "t_enum(VaultState)9856": {
              "label": "enum Vault.VaultState",
              "members": [
                "FUNDRAISING",
                "LIVE"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_bool)": {
              "label": "mapping(string => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RealizationState)10029_storage": {
              "label": "struct Vault.RealizationState",
              "members": [
                {
                  "label": "isRealized",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "realizedAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "preRealizationValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "totalFeesExtracted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC4626": [
              {
                "contract": "ERC4626Upgradeable",
                "label": "_asset",
                "type": "t_contract(IERC20)1621",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:56",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC4626Upgradeable",
                "label": "_underlyingDecimals",
                "type": "t_uint8",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:57",
                "offset": 20,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/VaultFactory.sol:VaultFactory": {
        "src": "contracts/VaultFactory.sol:71",
        "version": {
          "withMetadata": "175c090b3311c6c1afc89958ce9353206974e48d94f74f9025d2d91d4656c176",
          "withoutMetadata": "a385888a2fee848e7c19b95b5ef641a693df633050299859667b0f769941db7a",
          "linkedWithoutMetadata": "a385888a2fee848e7c19b95b5ef641a693df633050299859667b0f769941db7a"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IHasAssetInfo.sol:IHasAssetInfo",
          "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo",
          "contracts/interfaces/IVaultFactory.sol:IVaultFactory"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "createVault(string,string,address,address,uint256,uint256,uint256)",
          "setAssetWhitelist(address,uint16,bool)",
          "batchSetAssetWhitelist(address[],uint16[],bool[])",
          "getTokenType(address)",
          "getWhitelistedAssets()",
          "setGovernanceAddress(address)",
          "setTreasuryAddress(address)",
          "setAdminAddress(address)",
          "updateVaultFees(address,uint256,uint256,uint256,uint256)",
          "getAssetHandler()",
          "setAssetHandler(address)",
          "setMaximumSupportedAssetCount(uint256)",
          "getMaximumSupportedAssetCount()",
          "isValidAsset(address)",
          "getAssetPrice(address)",
          "getAssetType(address)",
          "updateVaultImplementation(address)",
          "upgradeVault(address,address)",
          "batchUpgradeVaults(address[],address)",
          "setFactorySettings(uint256,uint256,uint256)",
          "pause()",
          "unpause()",
          "addUnderlyingAsset(address,uint16)",
          "addWhitelistedAsset(address,uint16)",
          "removeUnderlyingAsset(address)",
          "removeWhitelistedAsset(address)",
          "getUnderlyingAssets()",
          "getUnderlyingAssetCount()",
          "getWhitelistedAssetCount()",
          "isUnderlyingAssetAllowed(address)",
          "isAssetWhitelisted(address)",
          "setGovernanceAddress(bytes32,address)",
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)",
          "hasGuard(address)",
          "getAssetsWithTypes()",
          "getDeployedVaults()",
          "getVaultCount()",
          "getVaultsByManager(address)",
          "getVaultInfo(address)",
          "getDetailedVaultInfo(address)",
          "getFactoryStats()",
          "isValidVault(address)",
          "getVaultManager(address)",
          "addUnderlyingAssetWhitelist(address)",
          "removeUnderlyingAssetWhitelist(address)",
          "setVaultStorageVersion(uint256)",
          "version()",
          "emergencyRecoverAsset(address,uint256)",
          "owner()",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "proxyAdmin",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:85"
            },
            {
              "label": "vaultImplementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:86"
            },
            {
              "label": "implementationVersion",
              "offset": 20,
              "slot": "1",
              "type": "t_uint32",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:87"
            },
            {
              "label": "deployedVaults",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:90"
            },
            {
              "label": "isVault",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:91"
            },
            {
              "label": "vaultManager",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_address)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:92"
            },
            {
              "label": "vaultIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:93"
            },
            {
              "label": "underlyingAssetAllowed",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:96"
            },
            {
              "label": "underlyingAssets",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:97"
            },
            {
              "label": "underlyingAssetIndex",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:98"
            },
            {
              "label": "assetWhitelisted",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:101"
            },
            {
              "label": "tokenType",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint16)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:102"
            },
            {
              "label": "whitelistedAssets",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:103"
            },
            {
              "label": "assetIndex",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:104"
            },
            {
              "label": "governance",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:106"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:107"
            },
            {
              "label": "admin",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:108"
            },
            {
              "label": "_assetHandler",
              "offset": 0,
              "slot": "16",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:110"
            },
            {
              "label": "_maximumSupportedAssetCount",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:111"
            },
            {
              "label": "vaultVersion",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:113"
            },
            {
              "label": "vaultStorageVersion",
              "offset": 0,
              "slot": "19",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:114"
            },
            {
              "label": "maxCapacityLimit",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:117"
            },
            {
              "label": "minCapacityLimit",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:118"
            },
            {
              "label": "creationFee",
              "offset": 0,
              "slot": "22",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:119"
            },
            {
              "label": "governanceAddresses",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:122"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint16)": {
              "label": "mapping(address => uint16)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IAggregatorV3Interface.sol:IAggregatorV3Interface": {
        "src": "contracts/interfaces/IAggregatorV3Interface.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IAssetHandler.sol:IAssetHandler": {
        "src": "contracts/interfaces/IAssetHandler.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addAsset(address,uint16,address)",
          "addAssets(struct IAssetHandler.Asset[])",
          "removeAsset(address)",
          "priceAggregators(address)",
          "assetTypes(address)",
          "getUSDPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IGovernance.sol:IGovernance": {
        "src": "contracts/interfaces/IGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "contractGuards(address)",
          "assetGuards(uint16)",
          "nameToDestination(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasAssetInfo.sol:IHasAssetInfo": {
        "src": "contracts/interfaces/IHasAssetInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidAsset(address)",
          "getAssetPrice(address)",
          "getAssetType(address)",
          "getMaximumSupportedAssetCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo": {
        "src": "contracts/interfaces/IHasGuardInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasOwnable.sol:IHasOwnable": {
        "src": "contracts/interfaces/IHasOwnable.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasPausable.sol:IHasPausable": {
        "src": "contracts/interfaces/IHasPausable.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPaused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset": {
        "src": "contracts/interfaces/IHasSupportedAsset.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:8",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "emergencyLiquidateAll()",
          "addSupportedAsset(address)",
          "removeSupportedAsset(address)",
          "updateFees(uint256,uint256,uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateManager(address)",
          "updateProtocolTreasury(address)",
          "pause()",
          "unpause()",
          "emergencyRecovery(address,uint256)",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "factory()",
          "manager()",
          "underlyingAsset()",
          "protocolTreasury()",
          "currentEpoch()",
          "vaultState()",
          "epochStartTime()",
          "fundraisingDuration()",
          "minFundraisingAmount()",
          "managementFee()",
          "performanceFee()",
          "withdrawalFee()",
          "protocolFee()",
          "lastHarvestTime()",
          "maxCapacity()",
          "minDepositAmount()",
          "authorizedStrategies(address)",
          "isAssetSupported(address)",
          "epochStartAssets(uint256)",
          "epochEndAssets(uint256)",
          "version()",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVaultFactory.sol:IVaultFactory": {
        "src": "contracts/interfaces/IVaultFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenType(address)",
          "getAssetType(address)",
          "getDeployedVaults()",
          "getVaultCount()",
          "getVaultsByManager(address)",
          "getVaultInfo(address)",
          "getDetailedVaultInfo(address)",
          "getFactoryStats()",
          "isValidVault(address)",
          "getVaultManager(address)",
          "isAssetWhitelisted(address)",
          "version()",
          "emergencyRecoverAsset(address,uint256)",
          "setTreasuryAddress(address)",
          "setAdminAddress(address)",
          "proxyAdmin()",
          "vaultImplementation()",
          "implementationVersion()",
          "deployedVaults(uint256)",
          "isVault(address)",
          "vaultManager(address)",
          "vaultIndex(address)",
          "underlyingAssetAllowed(address)",
          "tokenType(address)",
          "whitelistedAssets(uint256)",
          "assetIndex(address)",
          "maxCapacityLimit()",
          "minCapacityLimit()",
          "creationFee()",
          "treasury()",
          "admin()",
          "owner()",
          "paused()",
          "governance()",
          "getAssetHandler()",
          "vaultStorageVersion()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard": {
        "src": "contracts/interfaces/guards/IAssetGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard": {
        "src": "contracts/interfaces/guards/IPlatformGuard.sol:6",
        "inherit": [
          "contracts/interfaces/guards/IGuard.sol:IGuard"
        ],
        "libraries": [],
        "methods": [
          "platformName()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/ITxTrackingGuard.sol:ITxTrackingGuard": {
        "src": "contracts/interfaces/guards/ITxTrackingGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isTxTrackingGuard()",
          "afterTxGuard(address,address,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/FeeLogic.sol:FeeLogic": {
        "src": "contracts/utils/FeeLogic.sol:22",
        "version": {
          "withMetadata": "099553344e469315d807d12f84a104b6a8fae61c535496516a980ac9fbf049e1",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/VaultLogic.sol:VaultLogic": {
        "src": "contracts/utils/VaultLogic.sol:15",
        "version": {
          "withMetadata": "367d6ff446042bbb1bf7462d40af10f19f67bbac1883dcd4453f2a4a16f4a8e3",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IAggregatorV3Interface.sol:IAggregatorV3Interface": {
        "src": "contracts/interfaces/IAggregatorV3Interface.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IAssetHandler.sol:IAssetHandler": {
        "src": "contracts/interfaces/IAssetHandler.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addAsset(address,uint16,address)",
          "addAssets(struct IAssetHandler.Asset[])",
          "removeAsset(address)",
          "priceAggregators(address)",
          "assetTypes(address)",
          "getUSDPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/AssetHandler.sol:AssetHandler": {
        "src": "contracts/utils/AssetHandler.sol:29",
        "version": {
          "withMetadata": "865e60f69030c25296921794f54ed01d6c53eef83ee1d0f465af8b7bf976774d",
          "withoutMetadata": "c1929768a7c33b820c61dc03b680d38a8c333d7498744913a85a8b9886ad0c3e",
          "linkedWithoutMetadata": "c1929768a7c33b820c61dc03b680d38a8c333d7498744913a85a8b9886ad0c3e"
        },
        "inherit": [
          "contracts/interfaces/IAssetHandler.sol:IAssetHandler",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(struct IAssetHandler.Asset[])",
          "getUSDPrice(address)",
          "setChainlinkTimeout(uint256)",
          "addAsset(address,uint16,address)",
          "addAssets(struct IAssetHandler.Asset[])",
          "removeAsset(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "chainlinkTimeout",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "AssetHandler",
              "src": "contracts/utils/AssetHandler.sol:31"
            },
            {
              "label": "assetTypes",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint16)",
              "contract": "AssetHandler",
              "src": "contracts/utils/AssetHandler.sol:34"
            },
            {
              "label": "priceAggregators",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_address)",
              "contract": "AssetHandler",
              "src": "contracts/utils/AssetHandler.sol:35"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)50_storage",
              "contract": "AssetHandler",
              "src": "contracts/utils/AssetHandler.sol:128"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint16)": {
              "label": "mapping(address => uint16)",
              "numberOfBytes": "32"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:ERC4626Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:51",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "decimals()",
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "maxMint(address)",
          "maxWithdraw(address)",
          "maxRedeem(address)",
          "previewDeposit(uint256)",
          "previewMint(uint256)",
          "previewWithdraw(uint256)",
          "previewRedeem(uint256)",
          "deposit(uint256,address)",
          "mint(uint256,address)",
          "withdraw(uint256,address,address)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1242": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(ERC4626Storage)387_storage": {
              "label": "struct ERC4626Upgradeable.ERC4626Storage",
              "members": [
                {
                  "label": "_asset",
                  "type": "t_contract(IERC20)1242",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_underlyingDecimals",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC4626": [
              {
                "contract": "ERC4626Upgradeable",
                "label": "_asset",
                "type": "t_contract(IERC20)1242",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:56",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC4626Upgradeable",
                "label": "_underlyingDecimals",
                "type": "t_uint8",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:57",
                "offset": 20,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)755_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC1363.sol:IERC1363": {
        "src": "@openzeppelin/contracts/interfaces/IERC1363.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFromAndCall(address,address,uint256)",
          "transferFromAndCall(address,address,uint256,bytes)",
          "approveAndCall(address,uint256)",
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1118_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "9b22860624094cdf665bfb3f41f35e035bb94f79b4004eadcc9d2af256bc2130",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "af0292779d3f7f64aaa6bca67855a06fb162f4cfe6a78f164d9c5077cf4e19f0",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "e8333f49c136d3ed0de47e3047d69c1e05232a00123e4f584fa07771f50c1e49",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/Panic.sol:Panic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "1c9249bbe9670e66491de42af74d452fcaa33ac4cb93b79d0e36e88bbda5da19",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib": {
        "src": "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:11",
        "version": {
          "withMetadata": "4103856b51179fd1f69f32fe7fbb2cd59553c0a0ab6633a9f8bbb4cf45c59a66",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@uniswap/v3-periphery/contracts/libraries/Path.sol:Path": {
        "src": "@uniswap/v3-periphery/contracts/libraries/Path.sol:7",
        "version": {
          "withMetadata": "61510a5ee98845ae687b4b4e3284b560ef419220b72897d07f06f6f6f3f25d10",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/Governance.sol:Governance": {
        "src": "contracts/Governance.sol:19",
        "version": {
          "withMetadata": "473994dd00815a98c9c38d438ad301be22b36aac137d2cf0f2e08f0fa9c149a6",
          "withoutMetadata": "f8ffa66d1cb5caece87f82ef08206fd4606fa45cf74dbfeb3c6c822317b9df12",
          "linkedWithoutMetadata": "f8ffa66d1cb5caece87f82ef08206fd4606fa45cf74dbfeb3c6c822317b9df12"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IGovernance.sol:IGovernance"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "setContractGuard(address,address)",
          "setAssetGuard(uint16,address)",
          "setAddresses(struct Governance.ContractName[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "contractGuards",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Governance",
              "src": "contracts/Governance.sol:30"
            },
            {
              "label": "assetGuards",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint16,t_address)",
              "contract": "Governance",
              "src": "contracts/Governance.sol:31"
            },
            {
              "label": "nameToDestination",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "Governance",
              "src": "contracts/Governance.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint16,t_address)": {
              "label": "mapping(uint16 => address)",
              "numberOfBytes": "32"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/Vault.sol:Vault": {
        "src": "contracts/Vault.sol:24",
        "version": {
          "withMetadata": "c63d90dc43ebfd12209711c8578c536784d066d124b5a7e9f1a68c49033aca31",
          "withoutMetadata": "09d444f5128c7585202c3469954bcce50f3deeebab048f608594e9b444c34820",
          "linkedWithoutMetadata": "09d444f5128c7585202c3469954bcce50f3deeebab048f608594e9b444c34820"
        },
        "inherit": [
          "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:ERC4626Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "contracts/utils/VaultLogic.sol:VaultLogic",
          "contracts/utils/FeeLogic.sol:FeeLogic",
          "@openzeppelin/contracts/utils/math/Math.sol:Math"
        ],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "emergencyLiquidateAll()",
          "assetBalance(address)",
          "totalAssets()",
          "getVaultAssetBreakdown()",
          "maxDeposit(address)",
          "maxWithdraw(address)",
          "previewDeposit(uint256)",
          "previewWithdraw(uint256)",
          "deposit(uint256,address)",
          "withdraw(uint256,address,address)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "_updateAssetPricesExternal()",
          "addSupportedAsset(address)",
          "removeSupportedAsset(address)",
          "addSupportedPlatform(string)",
          "removeSupportedPlatform(string)",
          "updateFees(uint256,uint256,uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "updateOracleProtection(uint256,uint256)",
          "setEmergencyOracleMode(bool)",
          "setEmergencyPrice(address,uint256)",
          "pause()",
          "unpause()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "convertAssetValueToUnderlying(address,uint256)",
          "getAutoRealizationStatus()",
          "previewWithdrawalImpact(uint256)",
          "shouldManagerRealize()",
          "version()",
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/Vault.sol:267",
            "expectedLinearization": [
              "ERC20Upgradeable",
              "ERC4626Upgradeable",
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable"
            ],
            "foundOrder": [
              "ERC4626Upgradeable",
              "ERC20Upgradeable",
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable"
            ]
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "underlyingAsset",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:162"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:163"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:164"
            },
            {
              "label": "protocolTreasury",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:165"
            },
            {
              "label": "currentEpoch",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:168"
            },
            {
              "label": "vaultState",
              "offset": 0,
              "slot": "5",
              "type": "t_enum(VaultState)7404",
              "contract": "Vault",
              "src": "contracts/Vault.sol:169"
            },
            {
              "label": "epochStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:170"
            },
            {
              "label": "fundraisingDuration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:171"
            },
            {
              "label": "minFundraisingAmount",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:172"
            },
            {
              "label": "managementFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:175"
            },
            {
              "label": "performanceFee",
              "offset": 2,
              "slot": "9",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:176"
            },
            {
              "label": "withdrawalFee",
              "offset": 4,
              "slot": "9",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:177"
            },
            {
              "label": "protocolFee",
              "offset": 6,
              "slot": "9",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:178"
            },
            {
              "label": "_totalAssets",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:184"
            },
            {
              "label": "lastRealizationTime",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:185"
            },
            {
              "label": "maxCapacity",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:186"
            },
            {
              "label": "minDepositAmount",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:187"
            },
            {
              "label": "realizationCooldown",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:190"
            },
            {
              "label": "maxPriceDeviationBps",
              "offset": 0,
              "slot": "15",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:191"
            },
            {
              "label": "emergencyOracleMode",
              "offset": 2,
              "slot": "15",
              "type": "t_bool",
              "contract": "Vault",
              "src": "contracts/Vault.sol:192"
            },
            {
              "label": "lastAssetPrices",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:194"
            },
            {
              "label": "currentRealization",
              "offset": 0,
              "slot": "17",
              "type": "t_struct(RealizationState)7577_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:204"
            },
            {
              "label": "supportedAssets",
              "offset": 0,
              "slot": "22",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:207"
            },
            {
              "label": "assetPosition",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:208"
            },
            {
              "label": "isAssetSupported",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:209"
            },
            {
              "label": "supportedPlatforms",
              "offset": 0,
              "slot": "25",
              "type": "t_array(t_string_storage)dyn_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:212"
            },
            {
              "label": "isPlatformSupported",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_string_memory_ptr,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:213"
            },
            {
              "label": "authorizedStrategies",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:216"
            },
            {
              "label": "epochStartAssets",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:219"
            },
            {
              "label": "epochEndAssets",
              "offset": 0,
              "slot": "29",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:220"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1242": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(ERC4626Storage)387_storage": {
              "label": "struct ERC4626Upgradeable.ERC4626Storage",
              "members": [
                {
                  "label": "_asset",
                  "type": "t_contract(IERC20)1242",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_underlyingDecimals",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)755_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]",
              "numberOfBytes": "32"
            },
            "t_enum(VaultState)7404": {
              "label": "enum Vault.VaultState",
              "members": [
                "FUNDRAISING",
                "LIVE"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_bool)": {
              "label": "mapping(string => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RealizationState)7577_storage": {
              "label": "struct Vault.RealizationState",
              "members": [
                {
                  "label": "isRealized",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "realizedAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "preRealizationValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "totalFeesExtracted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC4626": [
              {
                "contract": "ERC4626Upgradeable",
                "label": "_asset",
                "type": "t_contract(IERC20)1242",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:56",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC4626Upgradeable",
                "label": "_underlyingDecimals",
                "type": "t_uint8",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:57",
                "offset": 20,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/asset/ERC20Guard.sol:ERC20Guard": {
        "src": "contracts/guards/asset/ERC20Guard.sol:30",
        "version": {
          "withMetadata": "cce05f10cbbbe3cf0b6ac76e6fc041ac6d40785ed9c06b0e8f08591a7eaa3031",
          "withoutMetadata": "a588778bfabbb3f2391b278e7b2906b55d866be8d13226f8c68fe745e36ccba4",
          "linkedWithoutMetadata": "a588778bfabbb3f2391b278e7b2906b55d866be8d13226f8c68fe745e36ccba4"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes",
          "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)",
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "WETH",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ERC20Guard",
              "src": "contracts/guards/asset/ERC20Guard.sol:32"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1118_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/asset/ETHGuard.sol:ETHGuard": {
        "src": "contracts/guards/asset/ETHGuard.sol:33",
        "version": {
          "withMetadata": "29a6a8e2b6a284006ffd9b0f69b3c68498341eb7945e2c5d6b2bec30f731de81",
          "withoutMetadata": "ebdfb1242994415e61db8801f64b067cd4ab88706f5fab6314e1be1193814181",
          "linkedWithoutMetadata": "ebdfb1242994415e61db8801f64b067cd4ab88706f5fab6314e1be1193814181"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)",
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "WETH",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ETHGuard",
              "src": "contracts/guards/asset/ETHGuard.sol:34"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1118_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/asset/StETHGuard.sol:IStETH": {
        "src": "contracts/guards/asset/StETHGuard.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPooledEthByShares(uint256)",
          "getSharesByPooledEth(uint256)",
          "getTotalShares()",
          "getTotalPooledEther()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/asset/StETHGuard.sol:StETHGuard": {
        "src": "contracts/guards/asset/StETHGuard.sol:19",
        "version": {
          "withMetadata": "95f1ef871f7ebfdff8a2f8cd3bbae1c3cb6ff7df62468e67de73ee29b8ceae41",
          "withoutMetadata": "1a6ad6cc2459cb62ad0d2e76aa7465c334ea5220752721336faf5b88d1673fca",
          "linkedWithoutMetadata": "1a6ad6cc2459cb62ad0d2e76aa7465c334ea5220752721336faf5b88d1673fca"
        },
        "inherit": [
          "contracts/guards/asset/ERC20Guard.sol:ERC20Guard",
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes",
          "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "getBalance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "WETH",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ERC20Guard",
              "src": "contracts/guards/asset/ERC20Guard.sol:32"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1118_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/asset/VertexAssetGuard.sol:VertexAssetGuard": {
        "src": "contracts/guards/asset/VertexAssetGuard.sol:17",
        "version": {
          "withMetadata": "3e873277b77211d7aec3654ca35fb7d52aa06f66e5eadc69f411bc45572a7b42",
          "withoutMetadata": "59a66149a2a1574065791e0120d705df5a7ecd8fb09b18a6180661bc956102a4",
          "linkedWithoutMetadata": "59a66149a2a1574065791e0120d705df5a7ecd8fb09b18a6180661bc956102a4"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)",
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)",
          "getSubaccountId(address,bytes12)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1118_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/platform/KyberswapGuard.sol:KyberswapGuard": {
        "src": "contracts/guards/platform/KyberswapGuard.sol:25",
        "version": {
          "withMetadata": "73d574bd4c42df2bf7ff4467969c227c998276aee2d8dc6d757c6c3ec3a65eac",
          "withoutMetadata": "df159cddd897efd7592f770b0ebbc4bf3e0083a71fb7941a67d130a3f9f14018",
          "linkedWithoutMetadata": "df159cddd897efd7592f770b0ebbc4bf3e0083a71fb7941a67d130a3f9f14018"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes",
          "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [
          "@uniswap/v3-periphery/contracts/libraries/Path.sol:Path"
        ],
        "methods": [
          "initialize()",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "platformName",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "KyberswapGuard",
              "src": "contracts/guards/platform/KyberswapGuard.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1118_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/platform/VertexPlatformGuard.sol:VertexPlatformGuard": {
        "src": "contracts/guards/platform/VertexPlatformGuard.sol:30",
        "version": {
          "withMetadata": "e0de3cb5dcbea4e79997dd962b522d1444de2467ce84f3fb0c936d2ced230ab7",
          "withoutMetadata": "c64097ddc78853883257eb65392ed100ba2aaae93ac98f3f454d02195d58fc58",
          "linkedWithoutMetadata": "c64097ddc78853883257eb65392ed100ba2aaae93ac98f3f454d02195d58fc58"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes",
          "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "platformName",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "VertexPlatformGuard",
              "src": "contracts/guards/platform/VertexPlatformGuard.sol:32"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1118_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IAggregatorV3Interface.sol:IAggregatorV3Interface": {
        "src": "contracts/interfaces/IAggregatorV3Interface.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IAssetHandler.sol:IAssetHandler": {
        "src": "contracts/interfaces/IAssetHandler.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addAsset(address,uint16,address)",
          "addAssets(struct IAssetHandler.Asset[])",
          "removeAsset(address)",
          "priceAggregators(address)",
          "assetTypes(address)",
          "getUSDPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IGovernance.sol:IGovernance": {
        "src": "contracts/interfaces/IGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "contractGuards(address)",
          "assetGuards(uint16)",
          "nameToDestination(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasAssetInfo.sol:IHasAssetInfo": {
        "src": "contracts/interfaces/IHasAssetInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidAsset(address)",
          "getAssetPrice(address)",
          "getAssetType(address)",
          "getMaximumSupportedAssetCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo": {
        "src": "contracts/interfaces/IHasGuardInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset": {
        "src": "contracts/interfaces/IHasSupportedAsset.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes": {
        "src": "contracts/interfaces/ITransactionTypes.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:8",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "emergencyLiquidateAll()",
          "addSupportedAsset(address)",
          "removeSupportedAsset(address)",
          "updateFees(uint256,uint256,uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateManager(address)",
          "updateProtocolTreasury(address)",
          "pause()",
          "unpause()",
          "emergencyRecovery(address,uint256)",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "factory()",
          "manager()",
          "underlyingAsset()",
          "protocolTreasury()",
          "currentEpoch()",
          "vaultState()",
          "epochStartTime()",
          "fundraisingDuration()",
          "minFundraisingAmount()",
          "managementFee()",
          "performanceFee()",
          "withdrawalFee()",
          "protocolFee()",
          "lastHarvestTime()",
          "maxCapacity()",
          "minDepositAmount()",
          "authorizedStrategies(address)",
          "isAssetSupported(address)",
          "epochStartAssets(uint256)",
          "epochEndAssets(uint256)",
          "version()",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVaultFactory.sol:IVaultFactory": {
        "src": "contracts/interfaces/IVaultFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenType(address)",
          "getAssetType(address)",
          "getDeployedVaults()",
          "getVaultCount()",
          "getVaultsByManager(address)",
          "getVaultInfo(address)",
          "getDetailedVaultInfo(address)",
          "getFactoryStats()",
          "isValidVault(address)",
          "getVaultManager(address)",
          "isAssetWhitelisted(address)",
          "version()",
          "emergencyRecoverAsset(address,uint256)",
          "setTreasuryAddress(address)",
          "setAdminAddress(address)",
          "proxyAdmin()",
          "vaultImplementation()",
          "implementationVersion()",
          "deployedVaults(uint256)",
          "isVault(address)",
          "vaultManager(address)",
          "vaultIndex(address)",
          "underlyingAssetAllowed(address)",
          "tokenType(address)",
          "whitelistedAssets(uint256)",
          "assetIndex(address)",
          "maxCapacityLimit()",
          "minCapacityLimit()",
          "creationFee()",
          "treasury()",
          "admin()",
          "owner()",
          "paused()",
          "governance()",
          "getAssetHandler()",
          "vaultStorageVersion()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IWETH.sol:IWETH": {
        "src": "contracts/interfaces/IWETH.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/kyberswap/IMetaAggregationRouterV2.sol:IMetaAggregationRouterV2": {
        "src": "contracts/interfaces/external/kyberswap/IMetaAggregationRouterV2.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swap((address,address,bytes,(address,address,address[],uint256[],address[],uint256[],address,uint256,uint256,uint256,bytes),bytes))",
          "swapSimpleMode(address,(address,address,address[],uint256[],address[],uint256[],address,uint256,uint256,uint256,bytes),bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/vertexprotocol/Clearinghouse.sol:Clearinghouse": {
        "src": "contracts/interfaces/external/vertexprotocol/Clearinghouse.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getHealth(bytes32,uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/vertexprotocol/IEndpoint.sol:IEndpoint": {
        "src": "contracts/interfaces/external/vertexprotocol/IEndpoint.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "depositCollateral(bytes12,uint32,uint128)",
          "depositCollateralWithReferral(bytes12,uint32,uint128,string)",
          "submitSlowModeTransaction(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard": {
        "src": "contracts/interfaces/guards/IAssetGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard": {
        "src": "contracts/interfaces/guards/IPlatformGuard.sol:6",
        "inherit": [
          "contracts/interfaces/guards/IGuard.sol:IGuard"
        ],
        "libraries": [],
        "methods": [
          "platformName()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/ITxTrackingGuard.sol:ITxTrackingGuard": {
        "src": "contracts/interfaces/guards/ITxTrackingGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isTxTrackingGuard()",
          "afterTxGuard(address,address,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/AssetHandler.sol:AssetHandler": {
        "src": "contracts/utils/AssetHandler.sol:28",
        "version": {
          "withMetadata": "6f97bfd9dff1b93ccfc157c6db04a781c5fd9c841ba621b1e71b3194add090c5",
          "withoutMetadata": "14b097733684f752128d1bdad485ee22b226f59650ca4346b1725eec086f23af",
          "linkedWithoutMetadata": "14b097733684f752128d1bdad485ee22b226f59650ca4346b1725eec086f23af"
        },
        "inherit": [
          "contracts/interfaces/IAssetHandler.sol:IAssetHandler",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(struct IAssetHandler.Asset[])",
          "getUSDPrice(address)",
          "setChainlinkTimeout(uint256)",
          "addAsset(address,uint16,address)",
          "addAssets(struct IAssetHandler.Asset[])",
          "removeAsset(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "chainlinkTimeout",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "AssetHandler",
              "src": "contracts/utils/AssetHandler.sol:30"
            },
            {
              "label": "assetTypes",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint16)",
              "contract": "AssetHandler",
              "src": "contracts/utils/AssetHandler.sol:33"
            },
            {
              "label": "priceAggregators",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_address)",
              "contract": "AssetHandler",
              "src": "contracts/utils/AssetHandler.sol:34"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)50_storage",
              "contract": "AssetHandler",
              "src": "contracts/utils/AssetHandler.sol:126"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint16)": {
              "label": "mapping(address => uint16)",
              "numberOfBytes": "32"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/AssetLogic.sol:AssetLogic": {
        "src": "contracts/utils/AssetLogic.sol:26",
        "version": {
          "withMetadata": "17d7b1f446499f25251c20ed16210329d89723b6e81722f6db5f110837315032",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/FeeLogic.sol:FeeLogic": {
        "src": "contracts/utils/FeeLogic.sol:22",
        "version": {
          "withMetadata": "099553344e469315d807d12f84a104b6a8fae61c535496516a980ac9fbf049e1",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/TxDataUtils.sol:TxDataUtils": {
        "src": "contracts/utils/TxDataUtils.sol:20",
        "version": {
          "withMetadata": "c8f9f72c830464a9edba72fa623cd7e55f96623ff0a3c220bd3917f4c61d4ea8",
          "withoutMetadata": "cf124b15cfe956c1e3abcd70eb38d7fac5840ef4ba967115d7426d911d09e9ed",
          "linkedWithoutMetadata": "cf124b15cfe956c1e3abcd70eb38d7fac5840ef4ba967115d7426d911d09e9ed"
        },
        "inherit": [],
        "libraries": [
          "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib"
        ],
        "methods": [
          "getMethod(bytes)",
          "getParams(bytes)",
          "getInput(bytes,uint8)",
          "getBytes(bytes,uint8,uint256)",
          "getArrayLast(bytes,uint8)",
          "getArrayLength(bytes,uint8)",
          "getArrayIndex(bytes,uint8,uint8)",
          "read4left(bytes,uint256)",
          "read32(bytes,uint256,uint256)",
          "convert32toAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/VaultLogic.sol:VaultLogic": {
        "src": "contracts/utils/VaultLogic.sol:15",
        "version": {
          "withMetadata": "367d6ff446042bbb1bf7462d40af10f19f67bbac1883dcd4453f2a4a16f4a8e3",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)188_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils"
        ],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(EIP712Storage)277_storage": {
              "label": "struct EIP712Upgradeable.EIP712Storage",
              "members": [
                {
                  "label": "_hashedName",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_hashedVersion",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_version",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44",
                "offset": 0,
                "slot": "3"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267": {
        "src": "@openzeppelin/contracts/interfaces/IERC5267.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "5bc0c12b2faca3b0025dac44fd5e074b6ffb9abc7c2ae956906250f68fb58ae2",
          "withoutMetadata": "f78f3b3ec0cfd3d0376afa7ebbe17cb10b6c7508163caee561240d33775a0c1d",
          "linkedWithoutMetadata": "f78f3b3ec0cfd3d0376afa7ebbe17cb10b6c7508163caee561240d33775a0c1d"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:26"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:15",
        "version": {
          "withMetadata": "de122949e3e0d960404da8ce72165b05c3bb6cda19b9165634d5cde2c8ede5d6",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "4758503cc14cb30a9296cd96b01a05864676128d039f59facfeef721d0e56fed",
          "withoutMetadata": "90ed13c85a95a01f41a9ad5dc3aaa5fe0872b8f878b53baffb9cf5f0f31350ac",
          "linkedWithoutMetadata": "90ed13c85a95a01f41a9ad5dc3aaa5fe0872b8f878b53baffb9cf5f0f31350ac"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProxyAdmin",
            "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:17",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:62",
        "version": {
          "withMetadata": "98f229b2c7b57c24004ea1ac0b13f47d278d91b3aee77558ff4dddafffa5ffe0",
          "withoutMetadata": "98f229b2c7b57c24004ea1ac0b13f47d278d91b3aee77558ff4dddafffa5ffe0",
          "linkedWithoutMetadata": "98f229b2c7b57c24004ea1ac0b13f47d278d91b3aee77558ff4dddafffa5ffe0"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:79"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_admin",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:67"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:11",
        "version": {
          "withMetadata": "6e77a0e76a5dc64a1545ae816562b7f78beb64cefbc46e88d87c883fb64227b5",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin/contracts/utils/Errors.sol:14",
        "version": {
          "withMetadata": "1ecc3c56f6e1c8cdc94d52bd41087bdbbcd8fe692567632f3ce3b99c8ed5d77f",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "af0292779d3f7f64aaa6bca67855a06fb162f4cfe6a78f164d9c5077cf4e19f0",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "2ad559740016ef6ae4ed930ac6e26e4b7e948a58957560f1bc1cd31efa92b42d",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:13",
        "version": {
          "withMetadata": "c5414ea72e4e888250ecce156ff5488b043a184c792f679151f3242e7a2144d5",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils": {
        "src": "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:15",
        "version": {
          "withMetadata": "69ac7caa8a45815506a87e87173fc358fafced6649dbf72a97a8ac466ee8b801",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "e8333f49c136d3ed0de47e3047d69c1e05232a00123e4f584fa07771f50c1e49",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/Panic.sol:Panic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "1c9249bbe9670e66491de42af74d452fcaa33ac4cb93b79d0e36e88bbda5da19",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:11",
        "version": {
          "withMetadata": "75e94ee1591c232994acc5c5c2459819568c4b8d70a293138209128cea3ba523",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/VaultFactory.sol:VaultFactory": {
        "src": "contracts/VaultFactory.sol:71",
        "version": {
          "withMetadata": "3e93cd5f23fbb600dcde70d7d72de4a4e167376bd22f219c0b1dd2d225e048f0",
          "withoutMetadata": "a385888a2fee848e7c19b95b5ef641a693df633050299859667b0f769941db7a",
          "linkedWithoutMetadata": "a385888a2fee848e7c19b95b5ef641a693df633050299859667b0f769941db7a"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IHasAssetInfo.sol:IHasAssetInfo",
          "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo",
          "contracts/interfaces/IVaultFactory.sol:IVaultFactory"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "createVault(string,string,address,address,uint256,uint256,uint256)",
          "setAssetWhitelist(address,uint16,bool)",
          "batchSetAssetWhitelist(address[],uint16[],bool[])",
          "getTokenType(address)",
          "getWhitelistedAssets()",
          "setGovernanceAddress(address)",
          "setTreasuryAddress(address)",
          "setAdminAddress(address)",
          "updateVaultFees(address,uint256,uint256,uint256,uint256)",
          "getAssetHandler()",
          "setAssetHandler(address)",
          "setMaximumSupportedAssetCount(uint256)",
          "getMaximumSupportedAssetCount()",
          "isValidAsset(address)",
          "getAssetPrice(address)",
          "getAssetType(address)",
          "updateVaultImplementation(address)",
          "upgradeVault(address,address)",
          "batchUpgradeVaults(address[],address)",
          "setFactorySettings(uint256,uint256,uint256)",
          "pause()",
          "unpause()",
          "addUnderlyingAsset(address,uint16)",
          "addWhitelistedAsset(address,uint16)",
          "removeUnderlyingAsset(address)",
          "removeWhitelistedAsset(address)",
          "getUnderlyingAssets()",
          "getUnderlyingAssetCount()",
          "getWhitelistedAssetCount()",
          "isUnderlyingAssetAllowed(address)",
          "isAssetWhitelisted(address)",
          "setGovernanceAddress(bytes32,address)",
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)",
          "hasGuard(address)",
          "getAssetsWithTypes()",
          "getDeployedVaults()",
          "getVaultCount()",
          "getVaultsByManager(address)",
          "getVaultInfo(address)",
          "getDetailedVaultInfo(address)",
          "getFactoryStats()",
          "isValidVault(address)",
          "getVaultManager(address)",
          "addUnderlyingAssetWhitelist(address)",
          "removeUnderlyingAssetWhitelist(address)",
          "setVaultStorageVersion(uint256)",
          "version()",
          "emergencyRecoverAsset(address,uint256)",
          "owner()",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "proxyAdmin",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:85"
            },
            {
              "label": "vaultImplementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:86"
            },
            {
              "label": "implementationVersion",
              "offset": 20,
              "slot": "1",
              "type": "t_uint32",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:87"
            },
            {
              "label": "deployedVaults",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:90"
            },
            {
              "label": "isVault",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:91"
            },
            {
              "label": "vaultManager",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_address)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:92"
            },
            {
              "label": "vaultIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:93"
            },
            {
              "label": "underlyingAssetAllowed",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:96"
            },
            {
              "label": "underlyingAssets",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:97"
            },
            {
              "label": "underlyingAssetIndex",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:98"
            },
            {
              "label": "assetWhitelisted",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:101"
            },
            {
              "label": "tokenType",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint16)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:102"
            },
            {
              "label": "whitelistedAssets",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:103"
            },
            {
              "label": "assetIndex",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:104"
            },
            {
              "label": "governance",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:106"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:107"
            },
            {
              "label": "admin",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:108"
            },
            {
              "label": "_assetHandler",
              "offset": 0,
              "slot": "16",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:110"
            },
            {
              "label": "_maximumSupportedAssetCount",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:111"
            },
            {
              "label": "vaultVersion",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:113"
            },
            {
              "label": "vaultStorageVersion",
              "offset": 0,
              "slot": "19",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:114"
            },
            {
              "label": "maxCapacityLimit",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:117"
            },
            {
              "label": "minCapacityLimit",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:118"
            },
            {
              "label": "creationFee",
              "offset": 0,
              "slot": "22",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:119"
            },
            {
              "label": "governanceAddresses",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:122"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)188_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint16)": {
              "label": "mapping(address => uint16)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IAggregatorV3Interface.sol:IAggregatorV3Interface": {
        "src": "contracts/interfaces/IAggregatorV3Interface.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IAssetHandler.sol:IAssetHandler": {
        "src": "contracts/interfaces/IAssetHandler.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addAsset(address,uint16,address)",
          "addAssets(struct IAssetHandler.Asset[])",
          "removeAsset(address)",
          "priceAggregators(address)",
          "assetTypes(address)",
          "getUSDPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IGovernance.sol:IGovernance": {
        "src": "contracts/interfaces/IGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "contractGuards(address)",
          "assetGuards(uint16)",
          "nameToDestination(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasAssetInfo.sol:IHasAssetInfo": {
        "src": "contracts/interfaces/IHasAssetInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidAsset(address)",
          "getAssetPrice(address)",
          "getAssetType(address)",
          "getMaximumSupportedAssetCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo": {
        "src": "contracts/interfaces/IHasGuardInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasOwnable.sol:IHasOwnable": {
        "src": "contracts/interfaces/IHasOwnable.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasPausable.sol:IHasPausable": {
        "src": "contracts/interfaces/IHasPausable.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPaused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:8",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "emergencyLiquidateAll()",
          "addSupportedAsset(address)",
          "removeSupportedAsset(address)",
          "updateFees(uint256,uint256,uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateManager(address)",
          "updateProtocolTreasury(address)",
          "pause()",
          "unpause()",
          "emergencyRecovery(address,uint256)",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "factory()",
          "manager()",
          "underlyingAsset()",
          "protocolTreasury()",
          "currentEpoch()",
          "vaultState()",
          "epochStartTime()",
          "fundraisingDuration()",
          "minFundraisingAmount()",
          "managementFee()",
          "performanceFee()",
          "withdrawalFee()",
          "protocolFee()",
          "lastHarvestTime()",
          "maxCapacity()",
          "minDepositAmount()",
          "authorizedStrategies(address)",
          "isAssetSupported(address)",
          "epochStartAssets(uint256)",
          "epochEndAssets(uint256)",
          "version()",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVaultFactory.sol:IVaultFactory": {
        "src": "contracts/interfaces/IVaultFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenType(address)",
          "getAssetType(address)",
          "getDeployedVaults()",
          "getVaultCount()",
          "getVaultsByManager(address)",
          "getVaultInfo(address)",
          "getDetailedVaultInfo(address)",
          "getFactoryStats()",
          "isValidVault(address)",
          "getVaultManager(address)",
          "isAssetWhitelisted(address)",
          "version()",
          "emergencyRecoverAsset(address,uint256)",
          "setTreasuryAddress(address)",
          "setAdminAddress(address)",
          "proxyAdmin()",
          "vaultImplementation()",
          "implementationVersion()",
          "deployedVaults(uint256)",
          "isVault(address)",
          "vaultManager(address)",
          "vaultIndex(address)",
          "underlyingAssetAllowed(address)",
          "tokenType(address)",
          "whitelistedAssets(uint256)",
          "assetIndex(address)",
          "maxCapacityLimit()",
          "minCapacityLimit()",
          "creationFee()",
          "treasury()",
          "admin()",
          "owner()",
          "paused()",
          "governance()",
          "getAssetHandler()",
          "vaultStorageVersion()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard": {
        "src": "contracts/interfaces/guards/IAssetGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard": {
        "src": "contracts/interfaces/guards/IPlatformGuard.sol:6",
        "inherit": [
          "contracts/interfaces/guards/IGuard.sol:IGuard"
        ],
        "libraries": [],
        "methods": [
          "platformName()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:ERC4626Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:51",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "decimals()",
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "maxMint(address)",
          "maxWithdraw(address)",
          "maxRedeem(address)",
          "previewDeposit(uint256)",
          "previewMint(uint256)",
          "previewWithdraw(uint256)",
          "previewRedeem(uint256)",
          "deposit(uint256,address)",
          "mint(uint256,address)",
          "withdraw(uint256,address,address)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1173": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(ERC4626Storage)387_storage": {
              "label": "struct ERC4626Upgradeable.ERC4626Storage",
              "members": [
                {
                  "label": "_asset",
                  "type": "t_contract(IERC20)1173",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_underlyingDecimals",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC4626": [
              {
                "contract": "ERC4626Upgradeable",
                "label": "_asset",
                "type": "t_contract(IERC20)1173",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:56",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC4626Upgradeable",
                "label": "_underlyingDecimals",
                "type": "t_uint8",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:57",
                "offset": 20,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)755_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC1363.sol:IERC1363": {
        "src": "@openzeppelin/contracts/interfaces/IERC1363.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFromAndCall(address,address,uint256)",
          "transferFromAndCall(address,address,uint256,bytes)",
          "approveAndCall(address,uint256)",
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "9b22860624094cdf665bfb3f41f35e035bb94f79b4004eadcc9d2af256bc2130",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "af0292779d3f7f64aaa6bca67855a06fb162f4cfe6a78f164d9c5077cf4e19f0",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "e8333f49c136d3ed0de47e3047d69c1e05232a00123e4f584fa07771f50c1e49",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/Panic.sol:Panic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "1c9249bbe9670e66491de42af74d452fcaa33ac4cb93b79d0e36e88bbda5da19",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/Vault.sol:Vault": {
        "src": "contracts/Vault.sol:24",
        "version": {
          "withMetadata": "d35b05c2ee1f2c77b4c7a5c9291eb042c7ab605efb7e89250898c88674415c54",
          "withoutMetadata": "3e10520c052734a3d047d8d1eeea5065e20ffcbef875bb25ccf2a9d571e33bf6",
          "linkedWithoutMetadata": "3e10520c052734a3d047d8d1eeea5065e20ffcbef875bb25ccf2a9d571e33bf6"
        },
        "inherit": [
          "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:ERC4626Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "contracts/utils/VaultLogic.sol:VaultLogic",
          "contracts/utils/FeeLogic.sol:FeeLogic",
          "@openzeppelin/contracts/utils/math/Math.sol:Math"
        ],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "emergencyLiquidateAll()",
          "assetBalance(address)",
          "totalAssets()",
          "getVaultAssetBreakdown()",
          "maxDeposit(address)",
          "maxWithdraw(address)",
          "previewDeposit(uint256)",
          "previewWithdraw(uint256)",
          "deposit(uint256,address)",
          "withdraw(uint256,address,address)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "_updateAssetPricesExternal()",
          "addSupportedAsset(address)",
          "removeSupportedAsset(address)",
          "addSupportedPlatform(string)",
          "removeSupportedPlatform(string)",
          "updateFees(uint256,uint256,uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "updateOracleProtection(uint256,uint256)",
          "setEmergencyOracleMode(bool)",
          "setEmergencyPrice(address,uint256)",
          "pause()",
          "unpause()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "convertAssetValueToUnderlying(address,uint256)",
          "getAutoRealizationStatus()",
          "previewWithdrawalImpact(uint256)",
          "shouldManagerRealize()",
          "version()",
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/Vault.sol:267",
            "expectedLinearization": [
              "ERC20Upgradeable",
              "ERC4626Upgradeable",
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable"
            ],
            "foundOrder": [
              "ERC4626Upgradeable",
              "ERC20Upgradeable",
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable"
            ]
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "underlyingAsset",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:162"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:163"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:164"
            },
            {
              "label": "protocolTreasury",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:165"
            },
            {
              "label": "currentEpoch",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:168"
            },
            {
              "label": "vaultState",
              "offset": 0,
              "slot": "5",
              "type": "t_enum(VaultState)6688",
              "contract": "Vault",
              "src": "contracts/Vault.sol:169"
            },
            {
              "label": "epochStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:170"
            },
            {
              "label": "fundraisingDuration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:171"
            },
            {
              "label": "minFundraisingAmount",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:172"
            },
            {
              "label": "managementFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:175"
            },
            {
              "label": "performanceFee",
              "offset": 2,
              "slot": "9",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:176"
            },
            {
              "label": "withdrawalFee",
              "offset": 4,
              "slot": "9",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:177"
            },
            {
              "label": "protocolFee",
              "offset": 6,
              "slot": "9",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:178"
            },
            {
              "label": "_totalAssets",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:184"
            },
            {
              "label": "lastRealizationTime",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:185"
            },
            {
              "label": "maxCapacity",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:186"
            },
            {
              "label": "minDepositAmount",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:187"
            },
            {
              "label": "realizationCooldown",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:190"
            },
            {
              "label": "maxPriceDeviationBps",
              "offset": 0,
              "slot": "15",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:191"
            },
            {
              "label": "emergencyOracleMode",
              "offset": 2,
              "slot": "15",
              "type": "t_bool",
              "contract": "Vault",
              "src": "contracts/Vault.sol:192"
            },
            {
              "label": "lastAssetPrices",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:194"
            },
            {
              "label": "currentRealization",
              "offset": 0,
              "slot": "17",
              "type": "t_struct(RealizationState)6861_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:204"
            },
            {
              "label": "supportedAssets",
              "offset": 0,
              "slot": "22",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:207"
            },
            {
              "label": "assetPosition",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:208"
            },
            {
              "label": "isAssetSupported",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:209"
            },
            {
              "label": "supportedPlatforms",
              "offset": 0,
              "slot": "25",
              "type": "t_array(t_string_storage)dyn_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:212"
            },
            {
              "label": "isPlatformSupported",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_string_memory_ptr,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:213"
            },
            {
              "label": "authorizedStrategies",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:216"
            },
            {
              "label": "epochStartAssets",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:219"
            },
            {
              "label": "epochEndAssets",
              "offset": 0,
              "slot": "29",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:220"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1173": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(ERC4626Storage)387_storage": {
              "label": "struct ERC4626Upgradeable.ERC4626Storage",
              "members": [
                {
                  "label": "_asset",
                  "type": "t_contract(IERC20)1173",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_underlyingDecimals",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)755_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]",
              "numberOfBytes": "32"
            },
            "t_enum(VaultState)6688": {
              "label": "enum Vault.VaultState",
              "members": [
                "FUNDRAISING",
                "LIVE"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_bool)": {
              "label": "mapping(string => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RealizationState)6861_storage": {
              "label": "struct Vault.RealizationState",
              "members": [
                {
                  "label": "isRealized",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "realizedAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "preRealizationValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "totalFeesExtracted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC4626": [
              {
                "contract": "ERC4626Upgradeable",
                "label": "_asset",
                "type": "t_contract(IERC20)1173",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:56",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC4626Upgradeable",
                "label": "_underlyingDecimals",
                "type": "t_uint8",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:57",
                "offset": 20,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IAssetHandler.sol:IAssetHandler": {
        "src": "contracts/interfaces/IAssetHandler.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addAsset(address,uint16,address)",
          "addAssets(struct IAssetHandler.Asset[])",
          "removeAsset(address)",
          "priceAggregators(address)",
          "assetTypes(address)",
          "getUSDPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo": {
        "src": "contracts/interfaces/IHasGuardInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset": {
        "src": "contracts/interfaces/IHasSupportedAsset.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVaultFactory.sol:IVaultFactory": {
        "src": "contracts/interfaces/IVaultFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenType(address)",
          "getAssetType(address)",
          "getDeployedVaults()",
          "getVaultCount()",
          "getVaultsByManager(address)",
          "getVaultInfo(address)",
          "getDetailedVaultInfo(address)",
          "getFactoryStats()",
          "isValidVault(address)",
          "getVaultManager(address)",
          "isAssetWhitelisted(address)",
          "version()",
          "emergencyRecoverAsset(address,uint256)",
          "setTreasuryAddress(address)",
          "setAdminAddress(address)",
          "proxyAdmin()",
          "vaultImplementation()",
          "implementationVersion()",
          "deployedVaults(uint256)",
          "isVault(address)",
          "vaultManager(address)",
          "vaultIndex(address)",
          "underlyingAssetAllowed(address)",
          "tokenType(address)",
          "whitelistedAssets(uint256)",
          "assetIndex(address)",
          "maxCapacityLimit()",
          "minCapacityLimit()",
          "creationFee()",
          "treasury()",
          "admin()",
          "owner()",
          "paused()",
          "governance()",
          "getAssetHandler()",
          "vaultStorageVersion()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard": {
        "src": "contracts/interfaces/guards/IAssetGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/ITxTrackingGuard.sol:ITxTrackingGuard": {
        "src": "contracts/interfaces/guards/ITxTrackingGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isTxTrackingGuard()",
          "afterTxGuard(address,address,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/FeeLogic.sol:FeeLogic": {
        "src": "contracts/utils/FeeLogic.sol:9",
        "version": {
          "withMetadata": "5c39c509b5ae01c60281c03482dcb5a7cc1ca5921973dc5aa0c296ea4c4d3bd7",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/VaultLogic.sol:VaultLogic": {
        "src": "contracts/utils/VaultLogic.sol:15",
        "version": {
          "withMetadata": "367d6ff446042bbb1bf7462d40af10f19f67bbac1883dcd4453f2a4a16f4a8e3",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)188_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils"
        ],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(EIP712Storage)277_storage": {
              "label": "struct EIP712Upgradeable.EIP712Storage",
              "members": [
                {
                  "label": "_hashedName",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_hashedVersion",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_version",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44",
                "offset": 0,
                "slot": "3"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267": {
        "src": "@openzeppelin/contracts/interfaces/IERC5267.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "5bc0c12b2faca3b0025dac44fd5e074b6ffb9abc7c2ae956906250f68fb58ae2",
          "withoutMetadata": "f78f3b3ec0cfd3d0376afa7ebbe17cb10b6c7508163caee561240d33775a0c1d",
          "linkedWithoutMetadata": "f78f3b3ec0cfd3d0376afa7ebbe17cb10b6c7508163caee561240d33775a0c1d"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:26"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:15",
        "version": {
          "withMetadata": "de122949e3e0d960404da8ce72165b05c3bb6cda19b9165634d5cde2c8ede5d6",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "4758503cc14cb30a9296cd96b01a05864676128d039f59facfeef721d0e56fed",
          "withoutMetadata": "90ed13c85a95a01f41a9ad5dc3aaa5fe0872b8f878b53baffb9cf5f0f31350ac",
          "linkedWithoutMetadata": "90ed13c85a95a01f41a9ad5dc3aaa5fe0872b8f878b53baffb9cf5f0f31350ac"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProxyAdmin",
            "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:17",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:62",
        "version": {
          "withMetadata": "98f229b2c7b57c24004ea1ac0b13f47d278d91b3aee77558ff4dddafffa5ffe0",
          "withoutMetadata": "98f229b2c7b57c24004ea1ac0b13f47d278d91b3aee77558ff4dddafffa5ffe0",
          "linkedWithoutMetadata": "98f229b2c7b57c24004ea1ac0b13f47d278d91b3aee77558ff4dddafffa5ffe0"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:79"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_admin",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:67"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:11",
        "version": {
          "withMetadata": "6e77a0e76a5dc64a1545ae816562b7f78beb64cefbc46e88d87c883fb64227b5",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin/contracts/utils/Errors.sol:14",
        "version": {
          "withMetadata": "1ecc3c56f6e1c8cdc94d52bd41087bdbbcd8fe692567632f3ce3b99c8ed5d77f",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "af0292779d3f7f64aaa6bca67855a06fb162f4cfe6a78f164d9c5077cf4e19f0",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "2ad559740016ef6ae4ed930ac6e26e4b7e948a58957560f1bc1cd31efa92b42d",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:13",
        "version": {
          "withMetadata": "c5414ea72e4e888250ecce156ff5488b043a184c792f679151f3242e7a2144d5",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils": {
        "src": "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:15",
        "version": {
          "withMetadata": "69ac7caa8a45815506a87e87173fc358fafced6649dbf72a97a8ac466ee8b801",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "e8333f49c136d3ed0de47e3047d69c1e05232a00123e4f584fa07771f50c1e49",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/Panic.sol:Panic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "1c9249bbe9670e66491de42af74d452fcaa33ac4cb93b79d0e36e88bbda5da19",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:11",
        "version": {
          "withMetadata": "75e94ee1591c232994acc5c5c2459819568c4b8d70a293138209128cea3ba523",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/VaultFactory.sol:VaultFactory": {
        "src": "contracts/VaultFactory.sol:27",
        "version": {
          "withMetadata": "3d4db2c50940d89ed86f61fd64b945a7bc5bca2ffc66f96b9db978c186f13dd6",
          "withoutMetadata": "50820296d217af653324c2ce30f889de22d9001b74d4e5dda197a55d6e104192",
          "linkedWithoutMetadata": "50820296d217af653324c2ce30f889de22d9001b74d4e5dda197a55d6e104192"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IHasAssetInfo.sol:IHasAssetInfo",
          "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo",
          "contracts/interfaces/IVaultFactory.sol:IVaultFactory"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "createVault(string,string,address,address,uint256,uint256,uint256)",
          "setAssetWhitelist(address,uint16,bool)",
          "batchSetAssetWhitelist(address[],uint16[],bool[])",
          "getTokenType(address)",
          "getWhitelistedAssets()",
          "setGovernanceAddress(address)",
          "setTreasuryAddress(address)",
          "setAdminAddress(address)",
          "updateVaultFees(address,uint256,uint256,uint256,uint256)",
          "getAssetHandler()",
          "setAssetHandler(address)",
          "setMaximumSupportedAssetCount(uint256)",
          "getMaximumSupportedAssetCount()",
          "isValidAsset(address)",
          "getAssetPrice(address)",
          "getAssetType(address)",
          "updateVaultImplementation(address)",
          "upgradeVault(address,address)",
          "batchUpgradeVaults(address[],address)",
          "setFactorySettings(uint256,uint256,uint256)",
          "pause()",
          "unpause()",
          "addUnderlyingAsset(address,uint16)",
          "addWhitelistedAsset(address,uint16)",
          "removeUnderlyingAsset(address)",
          "removeWhitelistedAsset(address)",
          "getUnderlyingAssets()",
          "getUnderlyingAssetCount()",
          "getWhitelistedAssetCount()",
          "isUnderlyingAssetAllowed(address)",
          "isAssetWhitelisted(address)",
          "setGovernanceAddress(bytes32,address)",
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)",
          "hasGuard(address)",
          "getAssetsWithTypes()",
          "getDeployedVaults()",
          "getVaultCount()",
          "getVaultsByManager(address)",
          "getVaultInfo(address)",
          "getDetailedVaultInfo(address)",
          "getFactoryStats()",
          "isValidVault(address)",
          "getVaultManager(address)",
          "addUnderlyingAssetWhitelist(address)",
          "removeUnderlyingAssetWhitelist(address)",
          "setVaultStorageVersion(uint256)",
          "version()",
          "emergencyRecoverAsset(address,uint256)",
          "owner()",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "proxyAdmin",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:41"
            },
            {
              "label": "vaultImplementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:42"
            },
            {
              "label": "implementationVersion",
              "offset": 20,
              "slot": "1",
              "type": "t_uint32",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:43"
            },
            {
              "label": "deployedVaults",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:46"
            },
            {
              "label": "isVault",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:47"
            },
            {
              "label": "vaultManager",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_address)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:48"
            },
            {
              "label": "vaultIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:49"
            },
            {
              "label": "underlyingAssetAllowed",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:52"
            },
            {
              "label": "underlyingAssets",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:53"
            },
            {
              "label": "underlyingAssetIndex",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:54"
            },
            {
              "label": "assetWhitelisted",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:57"
            },
            {
              "label": "tokenType",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint16)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:58"
            },
            {
              "label": "whitelistedAssets",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:59"
            },
            {
              "label": "assetIndex",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:60"
            },
            {
              "label": "governance",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:62"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:63"
            },
            {
              "label": "admin",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:64"
            },
            {
              "label": "_assetHandler",
              "offset": 0,
              "slot": "16",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:66"
            },
            {
              "label": "_maximumSupportedAssetCount",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:67"
            },
            {
              "label": "vaultVersion",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:69"
            },
            {
              "label": "vaultStorageVersion",
              "offset": 0,
              "slot": "19",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:70"
            },
            {
              "label": "maxCapacityLimit",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:73"
            },
            {
              "label": "minCapacityLimit",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:74"
            },
            {
              "label": "creationFee",
              "offset": 0,
              "slot": "22",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:75"
            },
            {
              "label": "governanceAddresses",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:78"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)188_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint16)": {
              "label": "mapping(address => uint16)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IAggregatorV3Interface.sol:IAggregatorV3Interface": {
        "src": "contracts/interfaces/IAggregatorV3Interface.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IAssetHandler.sol:IAssetHandler": {
        "src": "contracts/interfaces/IAssetHandler.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addAsset(address,uint16,address)",
          "addAssets(struct IAssetHandler.Asset[])",
          "removeAsset(address)",
          "priceAggregators(address)",
          "assetTypes(address)",
          "getUSDPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IGovernance.sol:IGovernance": {
        "src": "contracts/interfaces/IGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "contractGuards(address)",
          "assetGuards(uint16)",
          "nameToDestination(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasAssetInfo.sol:IHasAssetInfo": {
        "src": "contracts/interfaces/IHasAssetInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidAsset(address)",
          "getAssetPrice(address)",
          "getAssetType(address)",
          "getMaximumSupportedAssetCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo": {
        "src": "contracts/interfaces/IHasGuardInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasOwnable.sol:IHasOwnable": {
        "src": "contracts/interfaces/IHasOwnable.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasPausable.sol:IHasPausable": {
        "src": "contracts/interfaces/IHasPausable.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPaused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:8",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "emergencyLiquidateAll()",
          "addSupportedAsset(address)",
          "removeSupportedAsset(address)",
          "updateFees(uint256,uint256,uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateManager(address)",
          "updateProtocolTreasury(address)",
          "pause()",
          "unpause()",
          "emergencyRecovery(address,uint256)",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "factory()",
          "manager()",
          "underlyingAsset()",
          "protocolTreasury()",
          "currentEpoch()",
          "vaultState()",
          "epochStartTime()",
          "fundraisingDuration()",
          "minFundraisingAmount()",
          "managementFee()",
          "performanceFee()",
          "withdrawalFee()",
          "protocolFee()",
          "lastHarvestTime()",
          "maxCapacity()",
          "minDepositAmount()",
          "authorizedStrategies(address)",
          "isAssetSupported(address)",
          "epochStartAssets(uint256)",
          "epochEndAssets(uint256)",
          "version()",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVaultFactory.sol:IVaultFactory": {
        "src": "contracts/interfaces/IVaultFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenType(address)",
          "getAssetType(address)",
          "getDeployedVaults()",
          "getVaultCount()",
          "getVaultsByManager(address)",
          "getVaultInfo(address)",
          "getDetailedVaultInfo(address)",
          "getFactoryStats()",
          "isValidVault(address)",
          "getVaultManager(address)",
          "isAssetWhitelisted(address)",
          "version()",
          "emergencyRecoverAsset(address,uint256)",
          "setTreasuryAddress(address)",
          "setAdminAddress(address)",
          "proxyAdmin()",
          "vaultImplementation()",
          "implementationVersion()",
          "deployedVaults(uint256)",
          "isVault(address)",
          "vaultManager(address)",
          "vaultIndex(address)",
          "underlyingAssetAllowed(address)",
          "tokenType(address)",
          "whitelistedAssets(uint256)",
          "assetIndex(address)",
          "maxCapacityLimit()",
          "minCapacityLimit()",
          "creationFee()",
          "treasury()",
          "admin()",
          "owner()",
          "paused()",
          "governance()",
          "getAssetHandler()",
          "vaultStorageVersion()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard": {
        "src": "contracts/interfaces/guards/IAssetGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard": {
        "src": "contracts/interfaces/guards/IPlatformGuard.sol:6",
        "inherit": [
          "contracts/interfaces/guards/IGuard.sol:IGuard"
        ],
        "libraries": [],
        "methods": [
          "platformName()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)188_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils"
        ],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(EIP712Storage)277_storage": {
              "label": "struct EIP712Upgradeable.EIP712Storage",
              "members": [
                {
                  "label": "_hashedName",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_hashedVersion",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_version",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44",
                "offset": 0,
                "slot": "3"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267": {
        "src": "@openzeppelin/contracts/interfaces/IERC5267.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "5bc0c12b2faca3b0025dac44fd5e074b6ffb9abc7c2ae956906250f68fb58ae2",
          "withoutMetadata": "f78f3b3ec0cfd3d0376afa7ebbe17cb10b6c7508163caee561240d33775a0c1d",
          "linkedWithoutMetadata": "f78f3b3ec0cfd3d0376afa7ebbe17cb10b6c7508163caee561240d33775a0c1d"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:26"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:15",
        "version": {
          "withMetadata": "de122949e3e0d960404da8ce72165b05c3bb6cda19b9165634d5cde2c8ede5d6",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "4758503cc14cb30a9296cd96b01a05864676128d039f59facfeef721d0e56fed",
          "withoutMetadata": "90ed13c85a95a01f41a9ad5dc3aaa5fe0872b8f878b53baffb9cf5f0f31350ac",
          "linkedWithoutMetadata": "90ed13c85a95a01f41a9ad5dc3aaa5fe0872b8f878b53baffb9cf5f0f31350ac"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProxyAdmin",
            "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:17",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:62",
        "version": {
          "withMetadata": "98f229b2c7b57c24004ea1ac0b13f47d278d91b3aee77558ff4dddafffa5ffe0",
          "withoutMetadata": "98f229b2c7b57c24004ea1ac0b13f47d278d91b3aee77558ff4dddafffa5ffe0",
          "linkedWithoutMetadata": "98f229b2c7b57c24004ea1ac0b13f47d278d91b3aee77558ff4dddafffa5ffe0"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:79"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_admin",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:67"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:11",
        "version": {
          "withMetadata": "6e77a0e76a5dc64a1545ae816562b7f78beb64cefbc46e88d87c883fb64227b5",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin/contracts/utils/Errors.sol:14",
        "version": {
          "withMetadata": "1ecc3c56f6e1c8cdc94d52bd41087bdbbcd8fe692567632f3ce3b99c8ed5d77f",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "af0292779d3f7f64aaa6bca67855a06fb162f4cfe6a78f164d9c5077cf4e19f0",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "2ad559740016ef6ae4ed930ac6e26e4b7e948a58957560f1bc1cd31efa92b42d",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:13",
        "version": {
          "withMetadata": "c5414ea72e4e888250ecce156ff5488b043a184c792f679151f3242e7a2144d5",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils": {
        "src": "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:15",
        "version": {
          "withMetadata": "69ac7caa8a45815506a87e87173fc358fafced6649dbf72a97a8ac466ee8b801",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "e8333f49c136d3ed0de47e3047d69c1e05232a00123e4f584fa07771f50c1e49",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/Panic.sol:Panic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "1c9249bbe9670e66491de42af74d452fcaa33ac4cb93b79d0e36e88bbda5da19",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:11",
        "version": {
          "withMetadata": "75e94ee1591c232994acc5c5c2459819568c4b8d70a293138209128cea3ba523",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/VaultFactory.sol:VaultFactory": {
        "src": "contracts/VaultFactory.sol:27",
        "version": {
          "withMetadata": "e91b756283e7ce39bfaa1abbc31fef1b839483caf8663a4c8787a34785dd4e2a",
          "withoutMetadata": "a9f4360547eaf8d9fcfab29a709ced7da734e1f9231726e9c7ffd80319991380",
          "linkedWithoutMetadata": "a9f4360547eaf8d9fcfab29a709ced7da734e1f9231726e9c7ffd80319991380"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IHasAssetInfo.sol:IHasAssetInfo",
          "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo",
          "contracts/interfaces/IVaultFactory.sol:IVaultFactory"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "createVault(string,string,address,address,uint256,uint256,uint256)",
          "setAssetWhitelist(address,uint16,bool)",
          "batchSetAssetWhitelist(address[],uint16[],bool[])",
          "getTokenType(address)",
          "getWhitelistedAssets()",
          "setGovernanceAddress(address)",
          "setTreasuryAddress(address)",
          "setAdminAddress(address)",
          "updateVaultFees(address,uint256,uint256,uint256,uint256)",
          "getAssetHandler()",
          "setAssetHandler(address)",
          "setMaximumSupportedAssetCount(uint256)",
          "getMaximumSupportedAssetCount()",
          "isValidAsset(address)",
          "getAssetPrice(address)",
          "getAssetType(address)",
          "updateVaultImplementation(address)",
          "upgradeVault(address,address)",
          "batchUpgradeVaults(address[],address)",
          "setFactorySettings(uint256,uint256,uint256)",
          "pause()",
          "unpause()",
          "addUnderlyingAsset(address,uint16)",
          "addWhitelistedAsset(address,uint16)",
          "removeUnderlyingAsset(address)",
          "removeWhitelistedAsset(address)",
          "getUnderlyingAssets()",
          "getUnderlyingAssetCount()",
          "getWhitelistedAssetCount()",
          "isUnderlyingAssetAllowed(address)",
          "isAssetWhitelisted(address)",
          "setGovernanceAddress(bytes32,address)",
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)",
          "hasGuard(address)",
          "getAssetsWithTypes()",
          "getDeployedVaults()",
          "getVaultCount()",
          "getVaultsByManager(address)",
          "getVaultInfo(address)",
          "getDetailedVaultInfo(address)",
          "getFactoryStats()",
          "isValidVault(address)",
          "getVaultManager(address)",
          "addUnderlyingAssetWhitelist(address)",
          "removeUnderlyingAssetWhitelist(address)",
          "setVaultStorageVersion(uint256)",
          "version()",
          "emergencyRecoverAsset(address,uint256)",
          "owner()",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "proxyAdmin",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:41"
            },
            {
              "label": "vaultImplementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:42"
            },
            {
              "label": "implementationVersion",
              "offset": 20,
              "slot": "1",
              "type": "t_uint32",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:43"
            },
            {
              "label": "deployedVaults",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:46"
            },
            {
              "label": "isVault",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:47"
            },
            {
              "label": "vaultManager",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_address)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:48"
            },
            {
              "label": "vaultIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:49"
            },
            {
              "label": "underlyingAssetAllowed",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:52"
            },
            {
              "label": "underlyingAssets",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:53"
            },
            {
              "label": "underlyingAssetIndex",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:54"
            },
            {
              "label": "assetWhitelisted",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:57"
            },
            {
              "label": "tokenType",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint16)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:58"
            },
            {
              "label": "whitelistedAssets",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:59"
            },
            {
              "label": "assetIndex",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:60"
            },
            {
              "label": "governance",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:62"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:63"
            },
            {
              "label": "admin",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:64"
            },
            {
              "label": "_assetHandler",
              "offset": 0,
              "slot": "16",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:66"
            },
            {
              "label": "_maximumSupportedAssetCount",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:67"
            },
            {
              "label": "vaultVersion",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:69"
            },
            {
              "label": "vaultStorageVersion",
              "offset": 0,
              "slot": "19",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:70"
            },
            {
              "label": "maxCapacityLimit",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:73"
            },
            {
              "label": "minCapacityLimit",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:74"
            },
            {
              "label": "creationFee",
              "offset": 0,
              "slot": "22",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:75"
            },
            {
              "label": "governanceAddresses",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:78"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)188_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint16)": {
              "label": "mapping(address => uint16)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IAggregatorV3Interface.sol:IAggregatorV3Interface": {
        "src": "contracts/interfaces/IAggregatorV3Interface.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IAssetHandler.sol:IAssetHandler": {
        "src": "contracts/interfaces/IAssetHandler.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addAsset(address,uint16,address)",
          "addAssets(struct IAssetHandler.Asset[])",
          "removeAsset(address)",
          "priceAggregators(address)",
          "assetTypes(address)",
          "getUSDPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IGovernance.sol:IGovernance": {
        "src": "contracts/interfaces/IGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "contractGuards(address)",
          "assetGuards(uint16)",
          "nameToDestination(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasAssetInfo.sol:IHasAssetInfo": {
        "src": "contracts/interfaces/IHasAssetInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidAsset(address)",
          "getAssetPrice(address)",
          "getAssetType(address)",
          "getMaximumSupportedAssetCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo": {
        "src": "contracts/interfaces/IHasGuardInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasOwnable.sol:IHasOwnable": {
        "src": "contracts/interfaces/IHasOwnable.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasPausable.sol:IHasPausable": {
        "src": "contracts/interfaces/IHasPausable.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPaused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:8",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "emergencyLiquidateAll()",
          "addSupportedAsset(address)",
          "removeSupportedAsset(address)",
          "updateFees(uint256,uint256,uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateManager(address)",
          "updateProtocolTreasury(address)",
          "pause()",
          "unpause()",
          "emergencyRecovery(address,uint256)",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "factory()",
          "manager()",
          "underlyingAsset()",
          "protocolTreasury()",
          "currentEpoch()",
          "vaultState()",
          "epochStartTime()",
          "fundraisingDuration()",
          "minFundraisingAmount()",
          "managementFee()",
          "performanceFee()",
          "withdrawalFee()",
          "protocolFee()",
          "lastHarvestTime()",
          "maxCapacity()",
          "minDepositAmount()",
          "authorizedStrategies(address)",
          "isAssetSupported(address)",
          "epochStartAssets(uint256)",
          "epochEndAssets(uint256)",
          "version()",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVaultFactory.sol:IVaultFactory": {
        "src": "contracts/interfaces/IVaultFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenType(address)",
          "getAssetType(address)",
          "getDeployedVaults()",
          "getVaultCount()",
          "getVaultsByManager(address)",
          "getVaultInfo(address)",
          "getDetailedVaultInfo(address)",
          "getFactoryStats()",
          "isValidVault(address)",
          "getVaultManager(address)",
          "isAssetWhitelisted(address)",
          "version()",
          "emergencyRecoverAsset(address,uint256)",
          "setTreasuryAddress(address)",
          "setAdminAddress(address)",
          "proxyAdmin()",
          "vaultImplementation()",
          "implementationVersion()",
          "deployedVaults(uint256)",
          "isVault(address)",
          "vaultManager(address)",
          "vaultIndex(address)",
          "underlyingAssetAllowed(address)",
          "tokenType(address)",
          "whitelistedAssets(uint256)",
          "assetIndex(address)",
          "maxCapacityLimit()",
          "minCapacityLimit()",
          "creationFee()",
          "treasury()",
          "admin()",
          "owner()",
          "paused()",
          "governance()",
          "getAssetHandler()",
          "vaultStorageVersion()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard": {
        "src": "contracts/interfaces/guards/IAssetGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard": {
        "src": "contracts/interfaces/guards/IPlatformGuard.sol:6",
        "inherit": [
          "contracts/interfaces/guards/IGuard.sol:IGuard"
        ],
        "libraries": [],
        "methods": [
          "platformName()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:ERC4626Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:51",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "decimals()",
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "maxMint(address)",
          "maxWithdraw(address)",
          "maxRedeem(address)",
          "previewDeposit(uint256)",
          "previewMint(uint256)",
          "previewWithdraw(uint256)",
          "previewRedeem(uint256)",
          "deposit(uint256,address)",
          "mint(uint256,address)",
          "withdraw(uint256,address,address)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1621": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(ERC4626Storage)387_storage": {
              "label": "struct ERC4626Upgradeable.ERC4626Storage",
              "members": [
                {
                  "label": "_asset",
                  "type": "t_contract(IERC20)1621",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_underlyingDecimals",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC4626": [
              {
                "contract": "ERC4626Upgradeable",
                "label": "_asset",
                "type": "t_contract(IERC20)1621",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:56",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC4626Upgradeable",
                "label": "_underlyingDecimals",
                "type": "t_uint8",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:57",
                "offset": 20,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)755_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils"
        ],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(EIP712Storage)824_storage": {
              "label": "struct EIP712Upgradeable.EIP712Storage",
              "members": [
                {
                  "label": "_hashedName",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_hashedVersion",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_version",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44",
                "offset": 0,
                "slot": "3"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC1363.sol:IERC1363": {
        "src": "@openzeppelin/contracts/interfaces/IERC1363.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFromAndCall(address,address,uint256)",
          "transferFromAndCall(address,address,uint256,bytes)",
          "approveAndCall(address,uint256)",
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267": {
        "src": "@openzeppelin/contracts/interfaces/IERC5267.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "5bc0c12b2faca3b0025dac44fd5e074b6ffb9abc7c2ae956906250f68fb58ae2",
          "withoutMetadata": "f78f3b3ec0cfd3d0376afa7ebbe17cb10b6c7508163caee561240d33775a0c1d",
          "linkedWithoutMetadata": "f78f3b3ec0cfd3d0376afa7ebbe17cb10b6c7508163caee561240d33775a0c1d"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:26"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:15",
        "version": {
          "withMetadata": "de122949e3e0d960404da8ce72165b05c3bb6cda19b9165634d5cde2c8ede5d6",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "4758503cc14cb30a9296cd96b01a05864676128d039f59facfeef721d0e56fed",
          "withoutMetadata": "90ed13c85a95a01f41a9ad5dc3aaa5fe0872b8f878b53baffb9cf5f0f31350ac",
          "linkedWithoutMetadata": "90ed13c85a95a01f41a9ad5dc3aaa5fe0872b8f878b53baffb9cf5f0f31350ac"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProxyAdmin",
            "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:17",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:62",
        "version": {
          "withMetadata": "98f229b2c7b57c24004ea1ac0b13f47d278d91b3aee77558ff4dddafffa5ffe0",
          "withoutMetadata": "98f229b2c7b57c24004ea1ac0b13f47d278d91b3aee77558ff4dddafffa5ffe0",
          "linkedWithoutMetadata": "98f229b2c7b57c24004ea1ac0b13f47d278d91b3aee77558ff4dddafffa5ffe0"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:79"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_admin",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:67"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "9b22860624094cdf665bfb3f41f35e035bb94f79b4004eadcc9d2af256bc2130",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:11",
        "version": {
          "withMetadata": "6e77a0e76a5dc64a1545ae816562b7f78beb64cefbc46e88d87c883fb64227b5",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin/contracts/utils/Errors.sol:14",
        "version": {
          "withMetadata": "1ecc3c56f6e1c8cdc94d52bd41087bdbbcd8fe692567632f3ce3b99c8ed5d77f",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "af0292779d3f7f64aaa6bca67855a06fb162f4cfe6a78f164d9c5077cf4e19f0",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "2ad559740016ef6ae4ed930ac6e26e4b7e948a58957560f1bc1cd31efa92b42d",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:13",
        "version": {
          "withMetadata": "c5414ea72e4e888250ecce156ff5488b043a184c792f679151f3242e7a2144d5",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils": {
        "src": "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:15",
        "version": {
          "withMetadata": "69ac7caa8a45815506a87e87173fc358fafced6649dbf72a97a8ac466ee8b801",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "e8333f49c136d3ed0de47e3047d69c1e05232a00123e4f584fa07771f50c1e49",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/Panic.sol:Panic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "1c9249bbe9670e66491de42af74d452fcaa33ac4cb93b79d0e36e88bbda5da19",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:11",
        "version": {
          "withMetadata": "75e94ee1591c232994acc5c5c2459819568c4b8d70a293138209128cea3ba523",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/Vault.sol:Vault": {
        "src": "contracts/Vault.sol:24",
        "version": {
          "withMetadata": "413367e342b3847bb603b49098271c16c5b20bf67d42c5451704f871585d8d58",
          "withoutMetadata": "3a6109b2eb0f4c3ff3489ebb27684dbcc14fb522df6cfbf27f53a8f9413982d8",
          "linkedWithoutMetadata": "3a6109b2eb0f4c3ff3489ebb27684dbcc14fb522df6cfbf27f53a8f9413982d8"
        },
        "inherit": [
          "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:ERC4626Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "contracts/utils/VaultLogic.sol:VaultLogic",
          "contracts/utils/FeeLogic.sol:FeeLogic",
          "@openzeppelin/contracts/utils/math/Math.sol:Math"
        ],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "emergencyLiquidateAll()",
          "assetBalance(address)",
          "totalAssets()",
          "getVaultAssetBreakdown()",
          "maxDeposit(address)",
          "maxWithdraw(address)",
          "previewDeposit(uint256)",
          "previewWithdraw(uint256)",
          "deposit(uint256,address)",
          "withdraw(uint256,address,address)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "_updateAssetPricesExternal()",
          "addSupportedAsset(address)",
          "removeSupportedAsset(address)",
          "addSupportedPlatform(string)",
          "removeSupportedPlatform(string)",
          "updateFees(uint256,uint256,uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "updateOracleProtection(uint256,uint256)",
          "setEmergencyOracleMode(bool)",
          "setEmergencyPrice(address,uint256)",
          "pause()",
          "unpause()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "convertAssetValueToUnderlying(address,uint256)",
          "getAutoRealizationStatus()",
          "previewWithdrawalImpact(uint256)",
          "shouldManagerRealize()",
          "version()",
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/Vault.sol:267",
            "expectedLinearization": [
              "ERC20Upgradeable",
              "ERC4626Upgradeable",
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable"
            ],
            "foundOrder": [
              "ERC4626Upgradeable",
              "ERC20Upgradeable",
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable"
            ]
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "underlyingAsset",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:162"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:163"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:164"
            },
            {
              "label": "protocolTreasury",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:165"
            },
            {
              "label": "currentEpoch",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:168"
            },
            {
              "label": "vaultState",
              "offset": 0,
              "slot": "5",
              "type": "t_enum(VaultState)9856",
              "contract": "Vault",
              "src": "contracts/Vault.sol:169"
            },
            {
              "label": "epochStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:170"
            },
            {
              "label": "fundraisingDuration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:171"
            },
            {
              "label": "minFundraisingAmount",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:172"
            },
            {
              "label": "managementFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:175"
            },
            {
              "label": "performanceFee",
              "offset": 2,
              "slot": "9",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:176"
            },
            {
              "label": "withdrawalFee",
              "offset": 4,
              "slot": "9",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:177"
            },
            {
              "label": "protocolFee",
              "offset": 6,
              "slot": "9",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:178"
            },
            {
              "label": "_totalAssets",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:184"
            },
            {
              "label": "lastRealizationTime",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:185"
            },
            {
              "label": "maxCapacity",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:186"
            },
            {
              "label": "minDepositAmount",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:187"
            },
            {
              "label": "realizationCooldown",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:190"
            },
            {
              "label": "maxPriceDeviationBps",
              "offset": 0,
              "slot": "15",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:191"
            },
            {
              "label": "emergencyOracleMode",
              "offset": 2,
              "slot": "15",
              "type": "t_bool",
              "contract": "Vault",
              "src": "contracts/Vault.sol:192"
            },
            {
              "label": "lastAssetPrices",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:194"
            },
            {
              "label": "currentRealization",
              "offset": 0,
              "slot": "17",
              "type": "t_struct(RealizationState)10029_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:204"
            },
            {
              "label": "supportedAssets",
              "offset": 0,
              "slot": "22",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:207"
            },
            {
              "label": "assetPosition",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:208"
            },
            {
              "label": "isAssetSupported",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:209"
            },
            {
              "label": "supportedPlatforms",
              "offset": 0,
              "slot": "25",
              "type": "t_array(t_string_storage)dyn_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:212"
            },
            {
              "label": "isPlatformSupported",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_string_memory_ptr,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:213"
            },
            {
              "label": "authorizedStrategies",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:216"
            },
            {
              "label": "epochStartAssets",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:219"
            },
            {
              "label": "epochEndAssets",
              "offset": 0,
              "slot": "29",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:220"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1621": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(ERC4626Storage)387_storage": {
              "label": "struct ERC4626Upgradeable.ERC4626Storage",
              "members": [
                {
                  "label": "_asset",
                  "type": "t_contract(IERC20)1621",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_underlyingDecimals",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)755_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]",
              "numberOfBytes": "32"
            },
            "t_enum(VaultState)9856": {
              "label": "enum Vault.VaultState",
              "members": [
                "FUNDRAISING",
                "LIVE"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_bool)": {
              "label": "mapping(string => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RealizationState)10029_storage": {
              "label": "struct Vault.RealizationState",
              "members": [
                {
                  "label": "isRealized",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "realizedAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "preRealizationValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "totalFeesExtracted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC4626": [
              {
                "contract": "ERC4626Upgradeable",
                "label": "_asset",
                "type": "t_contract(IERC20)1621",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:56",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC4626Upgradeable",
                "label": "_underlyingDecimals",
                "type": "t_uint8",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:57",
                "offset": 20,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/VaultFactory.sol:VaultFactory": {
        "src": "contracts/VaultFactory.sol:27",
        "version": {
          "withMetadata": "f53a09ba30bc57f784129af63ad4f7dedd934ed49514ab943c1935d90ff914f2",
          "withoutMetadata": "37c9b7f3ca3abe3691a9a0bc79a0392ef31bad86f6eea9b43243a9b3478dba42",
          "linkedWithoutMetadata": "37c9b7f3ca3abe3691a9a0bc79a0392ef31bad86f6eea9b43243a9b3478dba42"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IHasAssetInfo.sol:IHasAssetInfo",
          "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo",
          "contracts/interfaces/IVaultFactory.sol:IVaultFactory"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "createVault(string,string,address,address,uint256,uint256,uint256)",
          "setAssetWhitelist(address,uint16,bool)",
          "batchSetAssetWhitelist(address[],uint16[],bool[])",
          "getTokenType(address)",
          "getWhitelistedAssets()",
          "setGovernanceAddress(address)",
          "setTreasuryAddress(address)",
          "setAdminAddress(address)",
          "updateVaultFees(address,uint256,uint256,uint256,uint256)",
          "getAssetHandler()",
          "setAssetHandler(address)",
          "setMaximumSupportedAssetCount(uint256)",
          "getMaximumSupportedAssetCount()",
          "isValidAsset(address)",
          "getAssetPrice(address)",
          "getAssetType(address)",
          "updateVaultImplementation(address)",
          "upgradeVault(address,address)",
          "batchUpgradeVaults(address[],address)",
          "setFactorySettings(uint256,uint256,uint256)",
          "pause()",
          "unpause()",
          "addUnderlyingAsset(address,uint16)",
          "addWhitelistedAsset(address,uint16)",
          "removeUnderlyingAsset(address)",
          "removeWhitelistedAsset(address)",
          "getUnderlyingAssets()",
          "getUnderlyingAssetCount()",
          "getWhitelistedAssetCount()",
          "isUnderlyingAssetAllowed(address)",
          "isAssetWhitelisted(address)",
          "setGovernanceAddress(bytes32,address)",
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)",
          "hasGuard(address)",
          "getAssetsWithTypes()",
          "getDeployedVaults()",
          "getVaultCount()",
          "getVaultsByManager(address)",
          "getVaultInfo(address)",
          "getDetailedVaultInfo(address)",
          "getFactoryStats()",
          "isValidVault(address)",
          "getVaultManager(address)",
          "addUnderlyingAssetWhitelist(address)",
          "removeUnderlyingAssetWhitelist(address)",
          "setVaultStorageVersion(uint256)",
          "version()",
          "emergencyRecoverAsset(address,uint256)",
          "owner()",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "proxyAdmin",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:41"
            },
            {
              "label": "vaultImplementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:42"
            },
            {
              "label": "implementationVersion",
              "offset": 20,
              "slot": "1",
              "type": "t_uint32",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:43"
            },
            {
              "label": "deployedVaults",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:46"
            },
            {
              "label": "isVault",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:47"
            },
            {
              "label": "vaultManager",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_address)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:48"
            },
            {
              "label": "vaultIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:49"
            },
            {
              "label": "underlyingAssetAllowed",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:52"
            },
            {
              "label": "underlyingAssets",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:53"
            },
            {
              "label": "underlyingAssetIndex",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:54"
            },
            {
              "label": "assetWhitelisted",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:57"
            },
            {
              "label": "tokenType",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint16)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:58"
            },
            {
              "label": "whitelistedAssets",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:59"
            },
            {
              "label": "assetIndex",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:60"
            },
            {
              "label": "governance",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:62"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:63"
            },
            {
              "label": "admin",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:64"
            },
            {
              "label": "_assetHandler",
              "offset": 0,
              "slot": "16",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:66"
            },
            {
              "label": "_maximumSupportedAssetCount",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:67"
            },
            {
              "label": "vaultVersion",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:69"
            },
            {
              "label": "vaultStorageVersion",
              "offset": 0,
              "slot": "19",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:70"
            },
            {
              "label": "maxCapacityLimit",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:73"
            },
            {
              "label": "minCapacityLimit",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:74"
            },
            {
              "label": "creationFee",
              "offset": 0,
              "slot": "22",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:75"
            },
            {
              "label": "governanceAddresses",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:78"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint16)": {
              "label": "mapping(address => uint16)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IAggregatorV3Interface.sol:IAggregatorV3Interface": {
        "src": "contracts/interfaces/IAggregatorV3Interface.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IAssetHandler.sol:IAssetHandler": {
        "src": "contracts/interfaces/IAssetHandler.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addAsset(address,uint16,address)",
          "addAssets(struct IAssetHandler.Asset[])",
          "removeAsset(address)",
          "priceAggregators(address)",
          "assetTypes(address)",
          "getUSDPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IGovernance.sol:IGovernance": {
        "src": "contracts/interfaces/IGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "contractGuards(address)",
          "assetGuards(uint16)",
          "nameToDestination(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasAssetInfo.sol:IHasAssetInfo": {
        "src": "contracts/interfaces/IHasAssetInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidAsset(address)",
          "getAssetPrice(address)",
          "getAssetType(address)",
          "getMaximumSupportedAssetCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo": {
        "src": "contracts/interfaces/IHasGuardInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasOwnable.sol:IHasOwnable": {
        "src": "contracts/interfaces/IHasOwnable.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasPausable.sol:IHasPausable": {
        "src": "contracts/interfaces/IHasPausable.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPaused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset": {
        "src": "contracts/interfaces/IHasSupportedAsset.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:8",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "emergencyLiquidateAll()",
          "addSupportedAsset(address)",
          "removeSupportedAsset(address)",
          "updateFees(uint256,uint256,uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateManager(address)",
          "updateProtocolTreasury(address)",
          "pause()",
          "unpause()",
          "emergencyRecovery(address,uint256)",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "factory()",
          "manager()",
          "underlyingAsset()",
          "protocolTreasury()",
          "currentEpoch()",
          "vaultState()",
          "epochStartTime()",
          "fundraisingDuration()",
          "minFundraisingAmount()",
          "managementFee()",
          "performanceFee()",
          "withdrawalFee()",
          "protocolFee()",
          "lastHarvestTime()",
          "maxCapacity()",
          "minDepositAmount()",
          "authorizedStrategies(address)",
          "isAssetSupported(address)",
          "epochStartAssets(uint256)",
          "epochEndAssets(uint256)",
          "version()",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVaultFactory.sol:IVaultFactory": {
        "src": "contracts/interfaces/IVaultFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenType(address)",
          "getAssetType(address)",
          "getDeployedVaults()",
          "getVaultCount()",
          "getVaultsByManager(address)",
          "getVaultInfo(address)",
          "getDetailedVaultInfo(address)",
          "getFactoryStats()",
          "isValidVault(address)",
          "getVaultManager(address)",
          "isAssetWhitelisted(address)",
          "version()",
          "emergencyRecoverAsset(address,uint256)",
          "setTreasuryAddress(address)",
          "setAdminAddress(address)",
          "proxyAdmin()",
          "vaultImplementation()",
          "implementationVersion()",
          "deployedVaults(uint256)",
          "isVault(address)",
          "vaultManager(address)",
          "vaultIndex(address)",
          "underlyingAssetAllowed(address)",
          "tokenType(address)",
          "whitelistedAssets(uint256)",
          "assetIndex(address)",
          "maxCapacityLimit()",
          "minCapacityLimit()",
          "creationFee()",
          "treasury()",
          "admin()",
          "owner()",
          "paused()",
          "governance()",
          "getAssetHandler()",
          "vaultStorageVersion()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard": {
        "src": "contracts/interfaces/guards/IAssetGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard": {
        "src": "contracts/interfaces/guards/IPlatformGuard.sol:6",
        "inherit": [
          "contracts/interfaces/guards/IGuard.sol:IGuard"
        ],
        "libraries": [],
        "methods": [
          "platformName()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/ITxTrackingGuard.sol:ITxTrackingGuard": {
        "src": "contracts/interfaces/guards/ITxTrackingGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isTxTrackingGuard()",
          "afterTxGuard(address,address,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/FeeLogic.sol:FeeLogic": {
        "src": "contracts/utils/FeeLogic.sol:9",
        "version": {
          "withMetadata": "5c39c509b5ae01c60281c03482dcb5a7cc1ca5921973dc5aa0c296ea4c4d3bd7",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/VaultLogic.sol:VaultLogic": {
        "src": "contracts/utils/VaultLogic.sol:15",
        "version": {
          "withMetadata": "367d6ff446042bbb1bf7462d40af10f19f67bbac1883dcd4453f2a4a16f4a8e3",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:ERC4626Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:51",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "decimals()",
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "maxMint(address)",
          "maxWithdraw(address)",
          "maxRedeem(address)",
          "previewDeposit(uint256)",
          "previewMint(uint256)",
          "previewWithdraw(uint256)",
          "previewRedeem(uint256)",
          "deposit(uint256,address)",
          "mint(uint256,address)",
          "withdraw(uint256,address,address)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1173": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(ERC4626Storage)387_storage": {
              "label": "struct ERC4626Upgradeable.ERC4626Storage",
              "members": [
                {
                  "label": "_asset",
                  "type": "t_contract(IERC20)1173",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_underlyingDecimals",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC4626": [
              {
                "contract": "ERC4626Upgradeable",
                "label": "_asset",
                "type": "t_contract(IERC20)1173",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:56",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC4626Upgradeable",
                "label": "_underlyingDecimals",
                "type": "t_uint8",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:57",
                "offset": 20,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)755_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC1363.sol:IERC1363": {
        "src": "@openzeppelin/contracts/interfaces/IERC1363.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFromAndCall(address,address,uint256)",
          "transferFromAndCall(address,address,uint256,bytes)",
          "approveAndCall(address,uint256)",
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "9b22860624094cdf665bfb3f41f35e035bb94f79b4004eadcc9d2af256bc2130",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "af0292779d3f7f64aaa6bca67855a06fb162f4cfe6a78f164d9c5077cf4e19f0",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "e8333f49c136d3ed0de47e3047d69c1e05232a00123e4f584fa07771f50c1e49",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/Panic.sol:Panic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "1c9249bbe9670e66491de42af74d452fcaa33ac4cb93b79d0e36e88bbda5da19",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/Vault.sol:Vault": {
        "src": "contracts/Vault.sol:24",
        "version": {
          "withMetadata": "7b67112dfb5b2233c205692ae71d7fbf7d9ab14aedafa83d72e352e88af83e66",
          "withoutMetadata": "6c9207b18d83ed4977d1dd114b04d0e7f8d94b59d5443d5a65be11046d473e13",
          "linkedWithoutMetadata": "6c9207b18d83ed4977d1dd114b04d0e7f8d94b59d5443d5a65be11046d473e13"
        },
        "inherit": [
          "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:ERC4626Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "contracts/utils/VaultLogic.sol:VaultLogic",
          "contracts/utils/FeeLogic.sol:FeeLogic",
          "@openzeppelin/contracts/utils/math/Math.sol:Math"
        ],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "emergencyLiquidateAll()",
          "assetBalance(address)",
          "totalAssets()",
          "getVaultAssetBreakdown()",
          "maxDeposit(address)",
          "maxWithdraw(address)",
          "previewDeposit(uint256)",
          "previewWithdraw(uint256)",
          "deposit(uint256,address)",
          "withdraw(uint256,address,address)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "_updateAssetPricesExternal()",
          "addSupportedAsset(address)",
          "removeSupportedAsset(address)",
          "addSupportedPlatform(string)",
          "removeSupportedPlatform(string)",
          "updateFees(uint256,uint256,uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "updateOracleProtection(uint256,uint256)",
          "setEmergencyOracleMode(bool)",
          "setEmergencyPrice(address,uint256)",
          "pause()",
          "unpause()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "convertAssetValueToUnderlying(address,uint256)",
          "getAutoRealizationStatus()",
          "previewWithdrawalImpact(uint256)",
          "shouldManagerRealize()",
          "version()",
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/Vault.sol:267",
            "expectedLinearization": [
              "ERC20Upgradeable",
              "ERC4626Upgradeable",
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable"
            ],
            "foundOrder": [
              "ERC4626Upgradeable",
              "ERC20Upgradeable",
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable"
            ]
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "underlyingAsset",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:162"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:163"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:164"
            },
            {
              "label": "protocolTreasury",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:165"
            },
            {
              "label": "currentEpoch",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:168"
            },
            {
              "label": "vaultState",
              "offset": 0,
              "slot": "5",
              "type": "t_enum(VaultState)6688",
              "contract": "Vault",
              "src": "contracts/Vault.sol:169"
            },
            {
              "label": "epochStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:170"
            },
            {
              "label": "fundraisingDuration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:171"
            },
            {
              "label": "minFundraisingAmount",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:172"
            },
            {
              "label": "managementFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:175"
            },
            {
              "label": "performanceFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:176"
            },
            {
              "label": "withdrawalFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:177"
            },
            {
              "label": "protocolFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:178"
            },
            {
              "label": "_totalAssets",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:184"
            },
            {
              "label": "lastRealizationTime",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:185"
            },
            {
              "label": "maxCapacity",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:186"
            },
            {
              "label": "minDepositAmount",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:187"
            },
            {
              "label": "realizationCooldown",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:190"
            },
            {
              "label": "maxPriceDeviationBps",
              "offset": 0,
              "slot": "18",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:191"
            },
            {
              "label": "lastAssetPrices",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:193"
            },
            {
              "label": "emergencyOracleMode",
              "offset": 0,
              "slot": "20",
              "type": "t_bool",
              "contract": "Vault",
              "src": "contracts/Vault.sol:194"
            },
            {
              "label": "currentRealization",
              "offset": 0,
              "slot": "21",
              "type": "t_struct(RealizationState)6861_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:204"
            },
            {
              "label": "supportedAssets",
              "offset": 0,
              "slot": "26",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:207"
            },
            {
              "label": "assetPosition",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:208"
            },
            {
              "label": "isAssetSupported",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:209"
            },
            {
              "label": "supportedPlatforms",
              "offset": 0,
              "slot": "29",
              "type": "t_array(t_string_storage)dyn_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:212"
            },
            {
              "label": "isPlatformSupported",
              "offset": 0,
              "slot": "30",
              "type": "t_mapping(t_string_memory_ptr,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:213"
            },
            {
              "label": "authorizedStrategies",
              "offset": 0,
              "slot": "31",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:216"
            },
            {
              "label": "epochStartAssets",
              "offset": 0,
              "slot": "32",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:219"
            },
            {
              "label": "epochEndAssets",
              "offset": 0,
              "slot": "33",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:220"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1173": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(ERC4626Storage)387_storage": {
              "label": "struct ERC4626Upgradeable.ERC4626Storage",
              "members": [
                {
                  "label": "_asset",
                  "type": "t_contract(IERC20)1173",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_underlyingDecimals",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)755_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]",
              "numberOfBytes": "32"
            },
            "t_enum(VaultState)6688": {
              "label": "enum Vault.VaultState",
              "members": [
                "FUNDRAISING",
                "LIVE"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_bool)": {
              "label": "mapping(string => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RealizationState)6861_storage": {
              "label": "struct Vault.RealizationState",
              "members": [
                {
                  "label": "isRealized",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "realizedAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "preRealizationValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "totalFeesExtracted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC4626": [
              {
                "contract": "ERC4626Upgradeable",
                "label": "_asset",
                "type": "t_contract(IERC20)1173",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:56",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC4626Upgradeable",
                "label": "_underlyingDecimals",
                "type": "t_uint8",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:57",
                "offset": 20,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IAssetHandler.sol:IAssetHandler": {
        "src": "contracts/interfaces/IAssetHandler.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addAsset(address,uint16,address)",
          "addAssets(struct IAssetHandler.Asset[])",
          "removeAsset(address)",
          "priceAggregators(address)",
          "assetTypes(address)",
          "getUSDPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo": {
        "src": "contracts/interfaces/IHasGuardInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset": {
        "src": "contracts/interfaces/IHasSupportedAsset.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVaultFactory.sol:IVaultFactory": {
        "src": "contracts/interfaces/IVaultFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenType(address)",
          "getAssetType(address)",
          "getDeployedVaults()",
          "getVaultCount()",
          "getVaultsByManager(address)",
          "getVaultInfo(address)",
          "getDetailedVaultInfo(address)",
          "getFactoryStats()",
          "isValidVault(address)",
          "getVaultManager(address)",
          "isAssetWhitelisted(address)",
          "version()",
          "emergencyRecoverAsset(address,uint256)",
          "setTreasuryAddress(address)",
          "setAdminAddress(address)",
          "proxyAdmin()",
          "vaultImplementation()",
          "implementationVersion()",
          "deployedVaults(uint256)",
          "isVault(address)",
          "vaultManager(address)",
          "vaultIndex(address)",
          "underlyingAssetAllowed(address)",
          "tokenType(address)",
          "whitelistedAssets(uint256)",
          "assetIndex(address)",
          "maxCapacityLimit()",
          "minCapacityLimit()",
          "creationFee()",
          "treasury()",
          "admin()",
          "owner()",
          "paused()",
          "governance()",
          "getAssetHandler()",
          "vaultStorageVersion()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard": {
        "src": "contracts/interfaces/guards/IAssetGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/ITxTrackingGuard.sol:ITxTrackingGuard": {
        "src": "contracts/interfaces/guards/ITxTrackingGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isTxTrackingGuard()",
          "afterTxGuard(address,address,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/FeeLogic.sol:FeeLogic": {
        "src": "contracts/utils/FeeLogic.sol:9",
        "version": {
          "withMetadata": "5c39c509b5ae01c60281c03482dcb5a7cc1ca5921973dc5aa0c296ea4c4d3bd7",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/VaultLogic.sol:VaultLogic": {
        "src": "contracts/utils/VaultLogic.sol:15",
        "version": {
          "withMetadata": "367d6ff446042bbb1bf7462d40af10f19f67bbac1883dcd4453f2a4a16f4a8e3",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:ERC4626Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:51",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "decimals()",
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "maxMint(address)",
          "maxWithdraw(address)",
          "maxRedeem(address)",
          "previewDeposit(uint256)",
          "previewMint(uint256)",
          "previewWithdraw(uint256)",
          "previewRedeem(uint256)",
          "deposit(uint256,address)",
          "mint(uint256,address)",
          "withdraw(uint256,address,address)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1173": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(ERC4626Storage)387_storage": {
              "label": "struct ERC4626Upgradeable.ERC4626Storage",
              "members": [
                {
                  "label": "_asset",
                  "type": "t_contract(IERC20)1173",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_underlyingDecimals",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC4626": [
              {
                "contract": "ERC4626Upgradeable",
                "label": "_asset",
                "type": "t_contract(IERC20)1173",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:56",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC4626Upgradeable",
                "label": "_underlyingDecimals",
                "type": "t_uint8",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:57",
                "offset": 20,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)755_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC1363.sol:IERC1363": {
        "src": "@openzeppelin/contracts/interfaces/IERC1363.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFromAndCall(address,address,uint256)",
          "transferFromAndCall(address,address,uint256,bytes)",
          "approveAndCall(address,uint256)",
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "9b22860624094cdf665bfb3f41f35e035bb94f79b4004eadcc9d2af256bc2130",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "af0292779d3f7f64aaa6bca67855a06fb162f4cfe6a78f164d9c5077cf4e19f0",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "e8333f49c136d3ed0de47e3047d69c1e05232a00123e4f584fa07771f50c1e49",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/Panic.sol:Panic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "1c9249bbe9670e66491de42af74d452fcaa33ac4cb93b79d0e36e88bbda5da19",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/Vault.sol:Vault": {
        "src": "contracts/Vault.sol:24",
        "version": {
          "withMetadata": "3e22ecff0dfce755bbc7bac3a5c55b27686c492b4d0e82089f160bd4b524c538",
          "withoutMetadata": "167ccbbf661af02786fcb2d47faf320a9c85b552418247c8287d714f55b85275",
          "linkedWithoutMetadata": "167ccbbf661af02786fcb2d47faf320a9c85b552418247c8287d714f55b85275"
        },
        "inherit": [
          "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:ERC4626Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "contracts/utils/VaultLogic.sol:VaultLogic",
          "contracts/utils/FeeLogic.sol:FeeLogic",
          "@openzeppelin/contracts/utils/math/Math.sol:Math"
        ],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "emergencyLiquidateAll()",
          "assetBalance(address)",
          "totalAssets()",
          "getVaultAssetBreakdown()",
          "maxDeposit(address)",
          "maxWithdraw(address)",
          "previewDeposit(uint256)",
          "previewWithdraw(uint256)",
          "deposit(uint256,address)",
          "withdraw(uint256,address,address)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "_updateAssetPricesExternal()",
          "addSupportedAsset(address)",
          "removeSupportedAsset(address)",
          "addSupportedPlatform(string)",
          "removeSupportedPlatform(string)",
          "updateFees(uint256,uint256,uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "updateOracleProtection(uint256,uint256)",
          "setEmergencyOracleMode(bool)",
          "setEmergencyPrice(address,uint256)",
          "pause()",
          "unpause()",
          "emergencyRecovery(address,uint256)",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "convertAssetValueToUnderlying(address,uint256)",
          "getAutoRealizationStatus()",
          "previewWithdrawalImpact(uint256)",
          "shouldManagerRealize()",
          "version()",
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/Vault.sol:267",
            "expectedLinearization": [
              "ERC20Upgradeable",
              "ERC4626Upgradeable",
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable"
            ],
            "foundOrder": [
              "ERC4626Upgradeable",
              "ERC20Upgradeable",
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable"
            ]
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "underlyingAsset",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:162"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:163"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:164"
            },
            {
              "label": "protocolTreasury",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:165"
            },
            {
              "label": "currentEpoch",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:168"
            },
            {
              "label": "vaultState",
              "offset": 0,
              "slot": "5",
              "type": "t_enum(VaultState)6688",
              "contract": "Vault",
              "src": "contracts/Vault.sol:169"
            },
            {
              "label": "epochStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:170"
            },
            {
              "label": "fundraisingDuration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:171"
            },
            {
              "label": "minFundraisingAmount",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:172"
            },
            {
              "label": "managementFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:175"
            },
            {
              "label": "performanceFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:176"
            },
            {
              "label": "withdrawalFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:177"
            },
            {
              "label": "protocolFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:178"
            },
            {
              "label": "_totalAssets",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:184"
            },
            {
              "label": "lastRealizationTime",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:185"
            },
            {
              "label": "maxCapacity",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:186"
            },
            {
              "label": "minDepositAmount",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:187"
            },
            {
              "label": "realizationCooldown",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:190"
            },
            {
              "label": "maxPriceDeviationBps",
              "offset": 0,
              "slot": "18",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:191"
            },
            {
              "label": "lastAssetPrices",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:193"
            },
            {
              "label": "emergencyOracleMode",
              "offset": 0,
              "slot": "20",
              "type": "t_bool",
              "contract": "Vault",
              "src": "contracts/Vault.sol:194"
            },
            {
              "label": "currentRealization",
              "offset": 0,
              "slot": "21",
              "type": "t_struct(RealizationState)6861_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:204"
            },
            {
              "label": "supportedAssets",
              "offset": 0,
              "slot": "26",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:207"
            },
            {
              "label": "assetPosition",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:208"
            },
            {
              "label": "isAssetSupported",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:209"
            },
            {
              "label": "supportedPlatforms",
              "offset": 0,
              "slot": "29",
              "type": "t_array(t_string_storage)dyn_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:212"
            },
            {
              "label": "isPlatformSupported",
              "offset": 0,
              "slot": "30",
              "type": "t_mapping(t_string_memory_ptr,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:213"
            },
            {
              "label": "authorizedStrategies",
              "offset": 0,
              "slot": "31",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:216"
            },
            {
              "label": "epochStartAssets",
              "offset": 0,
              "slot": "32",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:219"
            },
            {
              "label": "epochEndAssets",
              "offset": 0,
              "slot": "33",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:220"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1173": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(ERC4626Storage)387_storage": {
              "label": "struct ERC4626Upgradeable.ERC4626Storage",
              "members": [
                {
                  "label": "_asset",
                  "type": "t_contract(IERC20)1173",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_underlyingDecimals",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)755_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]",
              "numberOfBytes": "32"
            },
            "t_enum(VaultState)6688": {
              "label": "enum Vault.VaultState",
              "members": [
                "FUNDRAISING",
                "LIVE"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_bool)": {
              "label": "mapping(string => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RealizationState)6861_storage": {
              "label": "struct Vault.RealizationState",
              "members": [
                {
                  "label": "isRealized",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "realizedAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "preRealizationValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "totalFeesExtracted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC4626": [
              {
                "contract": "ERC4626Upgradeable",
                "label": "_asset",
                "type": "t_contract(IERC20)1173",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:56",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC4626Upgradeable",
                "label": "_underlyingDecimals",
                "type": "t_uint8",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:57",
                "offset": 20,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IAssetHandler.sol:IAssetHandler": {
        "src": "contracts/interfaces/IAssetHandler.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addAsset(address,uint16,address)",
          "addAssets(struct IAssetHandler.Asset[])",
          "removeAsset(address)",
          "priceAggregators(address)",
          "assetTypes(address)",
          "getUSDPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo": {
        "src": "contracts/interfaces/IHasGuardInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset": {
        "src": "contracts/interfaces/IHasSupportedAsset.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVaultFactory.sol:IVaultFactory": {
        "src": "contracts/interfaces/IVaultFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenType(address)",
          "getAssetType(address)",
          "getDeployedVaults()",
          "getVaultCount()",
          "getVaultsByManager(address)",
          "getVaultInfo(address)",
          "getDetailedVaultInfo(address)",
          "getFactoryStats()",
          "isValidVault(address)",
          "getVaultManager(address)",
          "isAssetWhitelisted(address)",
          "version()",
          "emergencyRecoverAsset(address,uint256)",
          "setTreasuryAddress(address)",
          "setAdminAddress(address)",
          "proxyAdmin()",
          "vaultImplementation()",
          "implementationVersion()",
          "deployedVaults(uint256)",
          "isVault(address)",
          "vaultManager(address)",
          "vaultIndex(address)",
          "underlyingAssetAllowed(address)",
          "tokenType(address)",
          "whitelistedAssets(uint256)",
          "assetIndex(address)",
          "maxCapacityLimit()",
          "minCapacityLimit()",
          "creationFee()",
          "treasury()",
          "admin()",
          "owner()",
          "paused()",
          "governance()",
          "getAssetHandler()",
          "vaultStorageVersion()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard": {
        "src": "contracts/interfaces/guards/IAssetGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/ITxTrackingGuard.sol:ITxTrackingGuard": {
        "src": "contracts/interfaces/guards/ITxTrackingGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isTxTrackingGuard()",
          "afterTxGuard(address,address,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/FeeLogic.sol:FeeLogic": {
        "src": "contracts/utils/FeeLogic.sol:9",
        "version": {
          "withMetadata": "5c39c509b5ae01c60281c03482dcb5a7cc1ca5921973dc5aa0c296ea4c4d3bd7",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/VaultLogic.sol:VaultLogic": {
        "src": "contracts/utils/VaultLogic.sol:15",
        "version": {
          "withMetadata": "367d6ff446042bbb1bf7462d40af10f19f67bbac1883dcd4453f2a4a16f4a8e3",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:ERC4626Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:51",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "decimals()",
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "maxMint(address)",
          "maxWithdraw(address)",
          "maxRedeem(address)",
          "previewDeposit(uint256)",
          "previewMint(uint256)",
          "previewWithdraw(uint256)",
          "previewRedeem(uint256)",
          "deposit(uint256,address)",
          "mint(uint256,address)",
          "withdraw(uint256,address,address)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1173": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(ERC4626Storage)387_storage": {
              "label": "struct ERC4626Upgradeable.ERC4626Storage",
              "members": [
                {
                  "label": "_asset",
                  "type": "t_contract(IERC20)1173",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_underlyingDecimals",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC4626": [
              {
                "contract": "ERC4626Upgradeable",
                "label": "_asset",
                "type": "t_contract(IERC20)1173",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:56",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC4626Upgradeable",
                "label": "_underlyingDecimals",
                "type": "t_uint8",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:57",
                "offset": 20,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)755_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC1363.sol:IERC1363": {
        "src": "@openzeppelin/contracts/interfaces/IERC1363.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFromAndCall(address,address,uint256)",
          "transferFromAndCall(address,address,uint256,bytes)",
          "approveAndCall(address,uint256)",
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "9b22860624094cdf665bfb3f41f35e035bb94f79b4004eadcc9d2af256bc2130",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "af0292779d3f7f64aaa6bca67855a06fb162f4cfe6a78f164d9c5077cf4e19f0",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "e8333f49c136d3ed0de47e3047d69c1e05232a00123e4f584fa07771f50c1e49",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/Panic.sol:Panic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "1c9249bbe9670e66491de42af74d452fcaa33ac4cb93b79d0e36e88bbda5da19",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/Vault.sol:Vault": {
        "src": "contracts/Vault.sol:24",
        "version": {
          "withMetadata": "71053ed0fd630cb54ab8fe19f0d9bceb665250dc8ae0854af14357ed0eda8243",
          "withoutMetadata": "41e4e2f5238b8f14851bb9937b88b37230b8fdc387ef692e49dd58c7e23948ce",
          "linkedWithoutMetadata": "41e4e2f5238b8f14851bb9937b88b37230b8fdc387ef692e49dd58c7e23948ce"
        },
        "inherit": [
          "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:ERC4626Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "contracts/utils/VaultLogic.sol:VaultLogic",
          "contracts/utils/FeeLogic.sol:FeeLogic",
          "@openzeppelin/contracts/utils/math/Math.sol:Math"
        ],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "emergencyLiquidateAll()",
          "assetBalance(address)",
          "totalAssets()",
          "getVaultAssetBreakdown()",
          "maxDeposit(address)",
          "maxWithdraw(address)",
          "previewDeposit(uint256)",
          "previewWithdraw(uint256)",
          "deposit(uint256,address)",
          "withdraw(uint256,address,address)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "_updateAssetPricesExternal()",
          "addSupportedAsset(address)",
          "removeSupportedAsset(address)",
          "addSupportedPlatform(string)",
          "removeSupportedPlatform(string)",
          "updateFees(uint256,uint256,uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateManager(address)",
          "updateProtocolTreasury(address)",
          "updateOracleProtection(uint256,uint256)",
          "setEmergencyOracleMode(bool)",
          "setEmergencyPrice(address,uint256)",
          "pause()",
          "unpause()",
          "emergencyRecovery(address,uint256)",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "convertAssetValueToUnderlying(address,uint256)",
          "getAutoRealizationStatus()",
          "previewWithdrawalImpact(uint256)",
          "shouldManagerRealize()",
          "version()",
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/Vault.sol:267",
            "expectedLinearization": [
              "ERC20Upgradeable",
              "ERC4626Upgradeable",
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable"
            ],
            "foundOrder": [
              "ERC4626Upgradeable",
              "ERC20Upgradeable",
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable"
            ]
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "underlyingAsset",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:162"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:163"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:164"
            },
            {
              "label": "protocolTreasury",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:165"
            },
            {
              "label": "currentEpoch",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:168"
            },
            {
              "label": "vaultState",
              "offset": 0,
              "slot": "5",
              "type": "t_enum(VaultState)6688",
              "contract": "Vault",
              "src": "contracts/Vault.sol:169"
            },
            {
              "label": "epochStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:170"
            },
            {
              "label": "fundraisingDuration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:171"
            },
            {
              "label": "minFundraisingAmount",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:172"
            },
            {
              "label": "managementFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:175"
            },
            {
              "label": "performanceFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:176"
            },
            {
              "label": "withdrawalFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:177"
            },
            {
              "label": "protocolFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:178"
            },
            {
              "label": "_totalAssets",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:184"
            },
            {
              "label": "lastRealizationTime",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:185"
            },
            {
              "label": "maxCapacity",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:186"
            },
            {
              "label": "minDepositAmount",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:187"
            },
            {
              "label": "realizationCooldown",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:190"
            },
            {
              "label": "maxPriceDeviationBps",
              "offset": 0,
              "slot": "18",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:191"
            },
            {
              "label": "lastAssetPrices",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:193"
            },
            {
              "label": "emergencyOracleMode",
              "offset": 0,
              "slot": "20",
              "type": "t_bool",
              "contract": "Vault",
              "src": "contracts/Vault.sol:194"
            },
            {
              "label": "currentRealization",
              "offset": 0,
              "slot": "21",
              "type": "t_struct(RealizationState)6861_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:204"
            },
            {
              "label": "supportedAssets",
              "offset": 0,
              "slot": "26",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:207"
            },
            {
              "label": "assetPosition",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:208"
            },
            {
              "label": "isAssetSupported",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:209"
            },
            {
              "label": "supportedPlatforms",
              "offset": 0,
              "slot": "29",
              "type": "t_array(t_string_storage)dyn_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:212"
            },
            {
              "label": "isPlatformSupported",
              "offset": 0,
              "slot": "30",
              "type": "t_mapping(t_string_memory_ptr,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:213"
            },
            {
              "label": "authorizedStrategies",
              "offset": 0,
              "slot": "31",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:216"
            },
            {
              "label": "epochStartAssets",
              "offset": 0,
              "slot": "32",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:219"
            },
            {
              "label": "epochEndAssets",
              "offset": 0,
              "slot": "33",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:220"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1173": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(ERC4626Storage)387_storage": {
              "label": "struct ERC4626Upgradeable.ERC4626Storage",
              "members": [
                {
                  "label": "_asset",
                  "type": "t_contract(IERC20)1173",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_underlyingDecimals",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)755_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]",
              "numberOfBytes": "32"
            },
            "t_enum(VaultState)6688": {
              "label": "enum Vault.VaultState",
              "members": [
                "FUNDRAISING",
                "LIVE"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_bool)": {
              "label": "mapping(string => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RealizationState)6861_storage": {
              "label": "struct Vault.RealizationState",
              "members": [
                {
                  "label": "isRealized",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "realizedAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "preRealizationValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "totalFeesExtracted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC4626": [
              {
                "contract": "ERC4626Upgradeable",
                "label": "_asset",
                "type": "t_contract(IERC20)1173",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:56",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC4626Upgradeable",
                "label": "_underlyingDecimals",
                "type": "t_uint8",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:57",
                "offset": 20,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IAssetHandler.sol:IAssetHandler": {
        "src": "contracts/interfaces/IAssetHandler.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addAsset(address,uint16,address)",
          "addAssets(struct IAssetHandler.Asset[])",
          "removeAsset(address)",
          "priceAggregators(address)",
          "assetTypes(address)",
          "getUSDPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo": {
        "src": "contracts/interfaces/IHasGuardInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset": {
        "src": "contracts/interfaces/IHasSupportedAsset.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVaultFactory.sol:IVaultFactory": {
        "src": "contracts/interfaces/IVaultFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenType(address)",
          "getAssetType(address)",
          "getDeployedVaults()",
          "getVaultCount()",
          "getVaultsByManager(address)",
          "getVaultInfo(address)",
          "getDetailedVaultInfo(address)",
          "getFactoryStats()",
          "isValidVault(address)",
          "getVaultManager(address)",
          "isAssetWhitelisted(address)",
          "version()",
          "emergencyRecoverAsset(address,uint256)",
          "setTreasuryAddress(address)",
          "setAdminAddress(address)",
          "proxyAdmin()",
          "vaultImplementation()",
          "implementationVersion()",
          "deployedVaults(uint256)",
          "isVault(address)",
          "vaultManager(address)",
          "vaultIndex(address)",
          "underlyingAssetAllowed(address)",
          "tokenType(address)",
          "whitelistedAssets(uint256)",
          "assetIndex(address)",
          "maxCapacityLimit()",
          "minCapacityLimit()",
          "creationFee()",
          "treasury()",
          "admin()",
          "owner()",
          "paused()",
          "governance()",
          "getAssetHandler()",
          "vaultStorageVersion()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard": {
        "src": "contracts/interfaces/guards/IAssetGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/ITxTrackingGuard.sol:ITxTrackingGuard": {
        "src": "contracts/interfaces/guards/ITxTrackingGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isTxTrackingGuard()",
          "afterTxGuard(address,address,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/FeeLogic.sol:FeeLogic": {
        "src": "contracts/utils/FeeLogic.sol:9",
        "version": {
          "withMetadata": "5c39c509b5ae01c60281c03482dcb5a7cc1ca5921973dc5aa0c296ea4c4d3bd7",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/VaultLogic.sol:VaultLogic": {
        "src": "contracts/utils/VaultLogic.sol:15",
        "version": {
          "withMetadata": "367d6ff446042bbb1bf7462d40af10f19f67bbac1883dcd4453f2a4a16f4a8e3",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:ERC4626Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:51",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "decimals()",
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "maxMint(address)",
          "maxWithdraw(address)",
          "maxRedeem(address)",
          "previewDeposit(uint256)",
          "previewMint(uint256)",
          "previewWithdraw(uint256)",
          "previewRedeem(uint256)",
          "deposit(uint256,address)",
          "mint(uint256,address)",
          "withdraw(uint256,address,address)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1173": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(ERC4626Storage)387_storage": {
              "label": "struct ERC4626Upgradeable.ERC4626Storage",
              "members": [
                {
                  "label": "_asset",
                  "type": "t_contract(IERC20)1173",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_underlyingDecimals",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC4626": [
              {
                "contract": "ERC4626Upgradeable",
                "label": "_asset",
                "type": "t_contract(IERC20)1173",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:56",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC4626Upgradeable",
                "label": "_underlyingDecimals",
                "type": "t_uint8",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:57",
                "offset": 20,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)755_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC1363.sol:IERC1363": {
        "src": "@openzeppelin/contracts/interfaces/IERC1363.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFromAndCall(address,address,uint256)",
          "transferFromAndCall(address,address,uint256,bytes)",
          "approveAndCall(address,uint256)",
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "9b22860624094cdf665bfb3f41f35e035bb94f79b4004eadcc9d2af256bc2130",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "af0292779d3f7f64aaa6bca67855a06fb162f4cfe6a78f164d9c5077cf4e19f0",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "e8333f49c136d3ed0de47e3047d69c1e05232a00123e4f584fa07771f50c1e49",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/Panic.sol:Panic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "1c9249bbe9670e66491de42af74d452fcaa33ac4cb93b79d0e36e88bbda5da19",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/Vault.sol:Vault": {
        "src": "contracts/Vault.sol:24",
        "version": {
          "withMetadata": "58c2f92f1a124003d049a671386ec0809e79acc0cfad89be02efa09f22e05e8c",
          "withoutMetadata": "bfdc5dfa9070e6d9a104e474b30e0670e5650b795daca179fcf0fbade02faf45",
          "linkedWithoutMetadata": "bfdc5dfa9070e6d9a104e474b30e0670e5650b795daca179fcf0fbade02faf45"
        },
        "inherit": [
          "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:ERC4626Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "contracts/utils/VaultLogic.sol:VaultLogic",
          "contracts/utils/FeeLogic.sol:FeeLogic",
          "@openzeppelin/contracts/utils/math/Math.sol:Math"
        ],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "emergencyLiquidateAll()",
          "assetBalance(address)",
          "totalAssets()",
          "getVaultAssetBreakdown()",
          "maxDeposit(address)",
          "maxWithdraw(address)",
          "previewDeposit(uint256)",
          "previewWithdraw(uint256)",
          "deposit(uint256,address)",
          "withdraw(uint256,address,address)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "_updateAssetPricesExternal()",
          "addSupportedAsset(address)",
          "removeSupportedAsset(address)",
          "addSupportedPlatform(string)",
          "removeSupportedPlatform(string)",
          "updateFees(uint256,uint256,uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateManager(address)",
          "updateProtocolTreasury(address)",
          "updateOracleProtection(uint256,uint256)",
          "setEmergencyOracleMode(bool)",
          "setEmergencyPrice(address,uint256)",
          "pause()",
          "unpause()",
          "emergencyRecovery(address,uint256)",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "convertAssetValueToUnderlying(address,uint256)",
          "getAutoRealizationStatus()",
          "previewWithdrawalImpact(uint256)",
          "shouldManagerRealize()",
          "version()",
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/Vault.sol:267",
            "expectedLinearization": [
              "ERC20Upgradeable",
              "ERC4626Upgradeable",
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable"
            ],
            "foundOrder": [
              "ERC4626Upgradeable",
              "ERC20Upgradeable",
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable"
            ]
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "underlyingAsset",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:162"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:163"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:164"
            },
            {
              "label": "protocolTreasury",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:165"
            },
            {
              "label": "currentEpoch",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:168"
            },
            {
              "label": "vaultState",
              "offset": 0,
              "slot": "5",
              "type": "t_enum(VaultState)6688",
              "contract": "Vault",
              "src": "contracts/Vault.sol:169"
            },
            {
              "label": "epochStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:170"
            },
            {
              "label": "fundraisingDuration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:171"
            },
            {
              "label": "minFundraisingAmount",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:172"
            },
            {
              "label": "managementFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:175"
            },
            {
              "label": "performanceFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:176"
            },
            {
              "label": "withdrawalFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:177"
            },
            {
              "label": "protocolFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:178"
            },
            {
              "label": "_totalAssets",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:184"
            },
            {
              "label": "lastRealizationTime",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:185"
            },
            {
              "label": "maxCapacity",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:186"
            },
            {
              "label": "minDepositAmount",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:187"
            },
            {
              "label": "realizationCooldown",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:190"
            },
            {
              "label": "maxPriceDeviationBps",
              "offset": 0,
              "slot": "18",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:191"
            },
            {
              "label": "lastAssetPrices",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:193"
            },
            {
              "label": "emergencyOracleMode",
              "offset": 0,
              "slot": "20",
              "type": "t_bool",
              "contract": "Vault",
              "src": "contracts/Vault.sol:194"
            },
            {
              "label": "currentRealization",
              "offset": 0,
              "slot": "21",
              "type": "t_struct(RealizationState)6861_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:204"
            },
            {
              "label": "supportedAssets",
              "offset": 0,
              "slot": "26",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:207"
            },
            {
              "label": "assetPosition",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:208"
            },
            {
              "label": "isAssetSupported",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:209"
            },
            {
              "label": "supportedPlatforms",
              "offset": 0,
              "slot": "29",
              "type": "t_array(t_string_storage)dyn_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:212"
            },
            {
              "label": "isPlatformSupported",
              "offset": 0,
              "slot": "30",
              "type": "t_mapping(t_string_memory_ptr,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:213"
            },
            {
              "label": "authorizedStrategies",
              "offset": 0,
              "slot": "31",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:216"
            },
            {
              "label": "epochStartAssets",
              "offset": 0,
              "slot": "32",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:219"
            },
            {
              "label": "epochEndAssets",
              "offset": 0,
              "slot": "33",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:220"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1173": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(ERC4626Storage)387_storage": {
              "label": "struct ERC4626Upgradeable.ERC4626Storage",
              "members": [
                {
                  "label": "_asset",
                  "type": "t_contract(IERC20)1173",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_underlyingDecimals",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)755_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]",
              "numberOfBytes": "32"
            },
            "t_enum(VaultState)6688": {
              "label": "enum Vault.VaultState",
              "members": [
                "FUNDRAISING",
                "LIVE"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_bool)": {
              "label": "mapping(string => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RealizationState)6861_storage": {
              "label": "struct Vault.RealizationState",
              "members": [
                {
                  "label": "isRealized",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "realizedAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "preRealizationValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "totalFeesExtracted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC4626": [
              {
                "contract": "ERC4626Upgradeable",
                "label": "_asset",
                "type": "t_contract(IERC20)1173",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:56",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC4626Upgradeable",
                "label": "_underlyingDecimals",
                "type": "t_uint8",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:57",
                "offset": 20,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IAssetHandler.sol:IAssetHandler": {
        "src": "contracts/interfaces/IAssetHandler.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addAsset(address,uint16,address)",
          "addAssets(struct IAssetHandler.Asset[])",
          "removeAsset(address)",
          "priceAggregators(address)",
          "assetTypes(address)",
          "getUSDPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo": {
        "src": "contracts/interfaces/IHasGuardInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset": {
        "src": "contracts/interfaces/IHasSupportedAsset.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVaultFactory.sol:IVaultFactory": {
        "src": "contracts/interfaces/IVaultFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenType(address)",
          "getAssetType(address)",
          "getDeployedVaults()",
          "getVaultCount()",
          "getVaultsByManager(address)",
          "getVaultInfo(address)",
          "getDetailedVaultInfo(address)",
          "getFactoryStats()",
          "isValidVault(address)",
          "getVaultManager(address)",
          "isAssetWhitelisted(address)",
          "version()",
          "emergencyRecoverAsset(address,uint256)",
          "setTreasuryAddress(address)",
          "setAdminAddress(address)",
          "proxyAdmin()",
          "vaultImplementation()",
          "implementationVersion()",
          "deployedVaults(uint256)",
          "isVault(address)",
          "vaultManager(address)",
          "vaultIndex(address)",
          "underlyingAssetAllowed(address)",
          "tokenType(address)",
          "whitelistedAssets(uint256)",
          "assetIndex(address)",
          "maxCapacityLimit()",
          "minCapacityLimit()",
          "creationFee()",
          "treasury()",
          "admin()",
          "owner()",
          "paused()",
          "governance()",
          "getAssetHandler()",
          "vaultStorageVersion()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard": {
        "src": "contracts/interfaces/guards/IAssetGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/ITxTrackingGuard.sol:ITxTrackingGuard": {
        "src": "contracts/interfaces/guards/ITxTrackingGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isTxTrackingGuard()",
          "afterTxGuard(address,address,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/FeeLogic.sol:FeeLogic": {
        "src": "contracts/utils/FeeLogic.sol:9",
        "version": {
          "withMetadata": "5c39c509b5ae01c60281c03482dcb5a7cc1ca5921973dc5aa0c296ea4c4d3bd7",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/VaultLogic.sol:VaultLogic": {
        "src": "contracts/utils/VaultLogic.sol:15",
        "version": {
          "withMetadata": "367d6ff446042bbb1bf7462d40af10f19f67bbac1883dcd4453f2a4a16f4a8e3",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:ERC4626Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:51",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "decimals()",
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "maxMint(address)",
          "maxWithdraw(address)",
          "maxRedeem(address)",
          "previewDeposit(uint256)",
          "previewMint(uint256)",
          "previewWithdraw(uint256)",
          "previewRedeem(uint256)",
          "deposit(uint256,address)",
          "mint(uint256,address)",
          "withdraw(uint256,address,address)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1173": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(ERC4626Storage)387_storage": {
              "label": "struct ERC4626Upgradeable.ERC4626Storage",
              "members": [
                {
                  "label": "_asset",
                  "type": "t_contract(IERC20)1173",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_underlyingDecimals",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC4626": [
              {
                "contract": "ERC4626Upgradeable",
                "label": "_asset",
                "type": "t_contract(IERC20)1173",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:56",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC4626Upgradeable",
                "label": "_underlyingDecimals",
                "type": "t_uint8",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:57",
                "offset": 20,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)755_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC1363.sol:IERC1363": {
        "src": "@openzeppelin/contracts/interfaces/IERC1363.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFromAndCall(address,address,uint256)",
          "transferFromAndCall(address,address,uint256,bytes)",
          "approveAndCall(address,uint256)",
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "9b22860624094cdf665bfb3f41f35e035bb94f79b4004eadcc9d2af256bc2130",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "af0292779d3f7f64aaa6bca67855a06fb162f4cfe6a78f164d9c5077cf4e19f0",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "e8333f49c136d3ed0de47e3047d69c1e05232a00123e4f584fa07771f50c1e49",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/Panic.sol:Panic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "1c9249bbe9670e66491de42af74d452fcaa33ac4cb93b79d0e36e88bbda5da19",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/Vault.sol:Vault": {
        "src": "contracts/Vault.sol:24",
        "version": {
          "withMetadata": "a38a9dad11915ea98b032f148a307b5f06e618a41f767ec81ddefc52d08b295d",
          "withoutMetadata": "08bab569873c245aad526ecac23c7d0773ba7ab63cf402a9b68b71302983b17d",
          "linkedWithoutMetadata": "08bab569873c245aad526ecac23c7d0773ba7ab63cf402a9b68b71302983b17d"
        },
        "inherit": [
          "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:ERC4626Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "contracts/utils/VaultLogic.sol:VaultLogic",
          "contracts/utils/FeeLogic.sol:FeeLogic",
          "@openzeppelin/contracts/utils/math/Math.sol:Math"
        ],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "emergencyLiquidateAll()",
          "assetBalance(address)",
          "totalAssets()",
          "getVaultAssetBreakdown()",
          "maxDeposit(address)",
          "maxWithdraw(address)",
          "previewDeposit(uint256)",
          "previewWithdraw(uint256)",
          "deposit(uint256,address)",
          "withdraw(uint256,address,address)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "_updateAssetPricesExternal()",
          "addSupportedAsset(address)",
          "removeSupportedAsset(address)",
          "addSupportedPlatform(string)",
          "removeSupportedPlatform(string)",
          "updateFees(uint256,uint256,uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateManager(address)",
          "updateProtocolTreasury(address)",
          "updateOracleProtection(uint256,uint256)",
          "setEmergencyOracleMode(bool)",
          "setEmergencyPrice(address,uint256)",
          "pause()",
          "unpause()",
          "emergencyRecovery(address,uint256)",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "convertAssetValueToUnderlying(address,uint256)",
          "getAutoRealizationStatus()",
          "previewWithdrawalImpact(uint256)",
          "shouldManagerRealize()",
          "version()",
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/Vault.sol:265",
            "expectedLinearization": [
              "ERC20Upgradeable",
              "ERC4626Upgradeable",
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable"
            ],
            "foundOrder": [
              "ERC4626Upgradeable",
              "ERC20Upgradeable",
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable"
            ]
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "underlyingAsset",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:160"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:161"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:162"
            },
            {
              "label": "protocolTreasury",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:163"
            },
            {
              "label": "currentEpoch",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:166"
            },
            {
              "label": "vaultState",
              "offset": 0,
              "slot": "5",
              "type": "t_enum(VaultState)6684",
              "contract": "Vault",
              "src": "contracts/Vault.sol:167"
            },
            {
              "label": "epochStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:168"
            },
            {
              "label": "fundraisingDuration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:169"
            },
            {
              "label": "minFundraisingAmount",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:170"
            },
            {
              "label": "managementFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:173"
            },
            {
              "label": "performanceFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:174"
            },
            {
              "label": "withdrawalFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:175"
            },
            {
              "label": "protocolFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:176"
            },
            {
              "label": "_totalAssets",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:182"
            },
            {
              "label": "lastRealizationTime",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:183"
            },
            {
              "label": "maxCapacity",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:184"
            },
            {
              "label": "minDepositAmount",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:185"
            },
            {
              "label": "realizationCooldown",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:188"
            },
            {
              "label": "maxPriceDeviationBps",
              "offset": 0,
              "slot": "18",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:189"
            },
            {
              "label": "lastAssetPrices",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:191"
            },
            {
              "label": "emergencyOracleMode",
              "offset": 0,
              "slot": "20",
              "type": "t_bool",
              "contract": "Vault",
              "src": "contracts/Vault.sol:192"
            },
            {
              "label": "currentRealization",
              "offset": 0,
              "slot": "21",
              "type": "t_struct(RealizationState)6857_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:202"
            },
            {
              "label": "supportedAssets",
              "offset": 0,
              "slot": "26",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:205"
            },
            {
              "label": "assetPosition",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:206"
            },
            {
              "label": "isAssetSupported",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:207"
            },
            {
              "label": "supportedPlatforms",
              "offset": 0,
              "slot": "29",
              "type": "t_array(t_string_storage)dyn_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:210"
            },
            {
              "label": "isPlatformSupported",
              "offset": 0,
              "slot": "30",
              "type": "t_mapping(t_string_memory_ptr,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:211"
            },
            {
              "label": "authorizedStrategies",
              "offset": 0,
              "slot": "31",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:214"
            },
            {
              "label": "epochStartAssets",
              "offset": 0,
              "slot": "32",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:217"
            },
            {
              "label": "epochEndAssets",
              "offset": 0,
              "slot": "33",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:218"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1173": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(ERC4626Storage)387_storage": {
              "label": "struct ERC4626Upgradeable.ERC4626Storage",
              "members": [
                {
                  "label": "_asset",
                  "type": "t_contract(IERC20)1173",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_underlyingDecimals",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)755_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]",
              "numberOfBytes": "32"
            },
            "t_enum(VaultState)6684": {
              "label": "enum Vault.VaultState",
              "members": [
                "FUNDRAISING",
                "LIVE"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_bool)": {
              "label": "mapping(string => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RealizationState)6857_storage": {
              "label": "struct Vault.RealizationState",
              "members": [
                {
                  "label": "isRealized",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "realizedAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "preRealizationValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "totalFeesExtracted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC4626": [
              {
                "contract": "ERC4626Upgradeable",
                "label": "_asset",
                "type": "t_contract(IERC20)1173",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:56",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC4626Upgradeable",
                "label": "_underlyingDecimals",
                "type": "t_uint8",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:57",
                "offset": 20,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IAssetHandler.sol:IAssetHandler": {
        "src": "contracts/interfaces/IAssetHandler.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addAsset(address,uint16,address)",
          "addAssets(struct IAssetHandler.Asset[])",
          "removeAsset(address)",
          "priceAggregators(address)",
          "assetTypes(address)",
          "getUSDPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo": {
        "src": "contracts/interfaces/IHasGuardInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset": {
        "src": "contracts/interfaces/IHasSupportedAsset.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVaultFactory.sol:IVaultFactory": {
        "src": "contracts/interfaces/IVaultFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenType(address)",
          "getAssetType(address)",
          "getDeployedVaults()",
          "getVaultCount()",
          "getVaultsByManager(address)",
          "getVaultInfo(address)",
          "getDetailedVaultInfo(address)",
          "getFactoryStats()",
          "isValidVault(address)",
          "getVaultManager(address)",
          "isAssetWhitelisted(address)",
          "version()",
          "emergencyRecoverAsset(address,uint256)",
          "setTreasuryAddress(address)",
          "setAdminAddress(address)",
          "proxyAdmin()",
          "vaultImplementation()",
          "implementationVersion()",
          "deployedVaults(uint256)",
          "isVault(address)",
          "vaultManager(address)",
          "vaultIndex(address)",
          "underlyingAssetAllowed(address)",
          "tokenType(address)",
          "whitelistedAssets(uint256)",
          "assetIndex(address)",
          "maxCapacityLimit()",
          "minCapacityLimit()",
          "creationFee()",
          "treasury()",
          "admin()",
          "owner()",
          "paused()",
          "governance()",
          "getAssetHandler()",
          "vaultStorageVersion()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard": {
        "src": "contracts/interfaces/guards/IAssetGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/ITxTrackingGuard.sol:ITxTrackingGuard": {
        "src": "contracts/interfaces/guards/ITxTrackingGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isTxTrackingGuard()",
          "afterTxGuard(address,address,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/FeeLogic.sol:FeeLogic": {
        "src": "contracts/utils/FeeLogic.sol:9",
        "version": {
          "withMetadata": "5c39c509b5ae01c60281c03482dcb5a7cc1ca5921973dc5aa0c296ea4c4d3bd7",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/VaultLogic.sol:VaultLogic": {
        "src": "contracts/utils/VaultLogic.sol:15",
        "version": {
          "withMetadata": "367d6ff446042bbb1bf7462d40af10f19f67bbac1883dcd4453f2a4a16f4a8e3",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:ERC4626Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:51",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "decimals()",
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "maxMint(address)",
          "maxWithdraw(address)",
          "maxRedeem(address)",
          "previewDeposit(uint256)",
          "previewMint(uint256)",
          "previewWithdraw(uint256)",
          "previewRedeem(uint256)",
          "deposit(uint256,address)",
          "mint(uint256,address)",
          "withdraw(uint256,address,address)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1865": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(ERC4626Storage)387_storage": {
              "label": "struct ERC4626Upgradeable.ERC4626Storage",
              "members": [
                {
                  "label": "_asset",
                  "type": "t_contract(IERC20)1865",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_underlyingDecimals",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC4626": [
              {
                "contract": "ERC4626Upgradeable",
                "label": "_asset",
                "type": "t_contract(IERC20)1865",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:56",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC4626Upgradeable",
                "label": "_underlyingDecimals",
                "type": "t_uint8",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:57",
                "offset": 20,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)755_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils"
        ],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(EIP712Storage)824_storage": {
              "label": "struct EIP712Upgradeable.EIP712Storage",
              "members": [
                {
                  "label": "_hashedName",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_hashedVersion",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_version",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44",
                "offset": 0,
                "slot": "3"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC1363.sol:IERC1363": {
        "src": "@openzeppelin/contracts/interfaces/IERC1363.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFromAndCall(address,address,uint256)",
          "transferFromAndCall(address,address,uint256,bytes)",
          "approveAndCall(address,uint256)",
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267": {
        "src": "@openzeppelin/contracts/interfaces/IERC5267.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "5bc0c12b2faca3b0025dac44fd5e074b6ffb9abc7c2ae956906250f68fb58ae2",
          "withoutMetadata": "f78f3b3ec0cfd3d0376afa7ebbe17cb10b6c7508163caee561240d33775a0c1d",
          "linkedWithoutMetadata": "f78f3b3ec0cfd3d0376afa7ebbe17cb10b6c7508163caee561240d33775a0c1d"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:26"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:15",
        "version": {
          "withMetadata": "de122949e3e0d960404da8ce72165b05c3bb6cda19b9165634d5cde2c8ede5d6",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "4758503cc14cb30a9296cd96b01a05864676128d039f59facfeef721d0e56fed",
          "withoutMetadata": "90ed13c85a95a01f41a9ad5dc3aaa5fe0872b8f878b53baffb9cf5f0f31350ac",
          "linkedWithoutMetadata": "90ed13c85a95a01f41a9ad5dc3aaa5fe0872b8f878b53baffb9cf5f0f31350ac"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProxyAdmin",
            "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:17",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:62",
        "version": {
          "withMetadata": "98f229b2c7b57c24004ea1ac0b13f47d278d91b3aee77558ff4dddafffa5ffe0",
          "withoutMetadata": "98f229b2c7b57c24004ea1ac0b13f47d278d91b3aee77558ff4dddafffa5ffe0",
          "linkedWithoutMetadata": "98f229b2c7b57c24004ea1ac0b13f47d278d91b3aee77558ff4dddafffa5ffe0"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:79"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_admin",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:67"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1566_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:29",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "9b22860624094cdf665bfb3f41f35e035bb94f79b4004eadcc9d2af256bc2130",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:11",
        "version": {
          "withMetadata": "6e77a0e76a5dc64a1545ae816562b7f78beb64cefbc46e88d87c883fb64227b5",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin/contracts/utils/Errors.sol:14",
        "version": {
          "withMetadata": "1ecc3c56f6e1c8cdc94d52bd41087bdbbcd8fe692567632f3ce3b99c8ed5d77f",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "af0292779d3f7f64aaa6bca67855a06fb162f4cfe6a78f164d9c5077cf4e19f0",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "2ad559740016ef6ae4ed930ac6e26e4b7e948a58957560f1bc1cd31efa92b42d",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:13",
        "version": {
          "withMetadata": "c5414ea72e4e888250ecce156ff5488b043a184c792f679151f3242e7a2144d5",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils": {
        "src": "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:15",
        "version": {
          "withMetadata": "69ac7caa8a45815506a87e87173fc358fafced6649dbf72a97a8ac466ee8b801",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "e8333f49c136d3ed0de47e3047d69c1e05232a00123e4f584fa07771f50c1e49",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/Panic.sol:Panic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "1c9249bbe9670e66491de42af74d452fcaa33ac4cb93b79d0e36e88bbda5da19",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:11",
        "version": {
          "withMetadata": "75e94ee1591c232994acc5c5c2459819568c4b8d70a293138209128cea3ba523",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib": {
        "src": "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:11",
        "version": {
          "withMetadata": "4103856b51179fd1f69f32fe7fbb2cd59553c0a0ab6633a9f8bbb4cf45c59a66",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@uniswap/v3-periphery/contracts/libraries/Path.sol:Path": {
        "src": "@uniswap/v3-periphery/contracts/libraries/Path.sol:7",
        "version": {
          "withMetadata": "61510a5ee98845ae687b4b4e3284b560ef419220b72897d07f06f6f6f3f25d10",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/Governance.sol:Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "12c531724fd8abafcc1e0e2b7afb0b486e95fca21a7bf04ccd0b43831dcead2f",
          "withoutMetadata": "be9a6a0194eea3673803228d8eac4cfaa96e9776f8b43c0eb33ee7d5bfef055e",
          "linkedWithoutMetadata": "be9a6a0194eea3673803228d8eac4cfaa96e9776f8b43c0eb33ee7d5bfef055e"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IGovernance.sol:IGovernance"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "setContractGuard(address,address)",
          "setAssetGuard(uint16,address)",
          "setAddresses(struct Governance.ContractName[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "contractGuards",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Governance",
              "src": "contracts/Governance.sol:22"
            },
            {
              "label": "assetGuards",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint16,t_address)",
              "contract": "Governance",
              "src": "contracts/Governance.sol:23"
            },
            {
              "label": "nameToDestination",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "Governance",
              "src": "contracts/Governance.sol:31"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint16,t_address)": {
              "label": "mapping(uint16 => address)",
              "numberOfBytes": "32"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/Vault.sol:Vault": {
        "src": "contracts/Vault.sol:24",
        "version": {
          "withMetadata": "95260f327fc01bae6e0d07bccb0e3290dd0248baab41b2b3e57bc3036662c0ec",
          "withoutMetadata": "379fb716dfb7e56e95aa2e91a944cf4d68dc226ece16217bfec33439557e0082",
          "linkedWithoutMetadata": "379fb716dfb7e56e95aa2e91a944cf4d68dc226ece16217bfec33439557e0082"
        },
        "inherit": [
          "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:ERC4626Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "contracts/utils/VaultLogic.sol:VaultLogic",
          "contracts/utils/FeeLogic.sol:FeeLogic",
          "@openzeppelin/contracts/utils/math/Math.sol:Math"
        ],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "emergencyLiquidateAll()",
          "assetBalance(address)",
          "totalAssets()",
          "getVaultAssetBreakdown()",
          "maxDeposit(address)",
          "maxWithdraw(address)",
          "previewDeposit(uint256)",
          "previewWithdraw(uint256)",
          "deposit(uint256,address)",
          "withdraw(uint256,address,address)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "_updateAssetPricesExternal()",
          "addSupportedAsset(address)",
          "removeSupportedAsset(address)",
          "addSupportedPlatform(string)",
          "removeSupportedPlatform(string)",
          "updateFees(uint256,uint256,uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateManager(address)",
          "updateProtocolTreasury(address)",
          "updateOracleProtection(uint256,uint256)",
          "setEmergencyOracleMode(bool)",
          "setEmergencyPrice(address,uint256)",
          "pause()",
          "unpause()",
          "emergencyRecovery(address,uint256)",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "convertAssetValueToUnderlying(address,uint256)",
          "getAutoRealizationStatus()",
          "previewWithdrawalImpact(uint256)",
          "shouldManagerRealize()",
          "version()",
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/Vault.sol:227",
            "expectedLinearization": [
              "ERC20Upgradeable",
              "ERC4626Upgradeable",
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable"
            ],
            "foundOrder": [
              "ERC4626Upgradeable",
              "ERC20Upgradeable",
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable"
            ]
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "underlyingAsset",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:122"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:123"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:124"
            },
            {
              "label": "protocolTreasury",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:125"
            },
            {
              "label": "currentEpoch",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:128"
            },
            {
              "label": "vaultState",
              "offset": 0,
              "slot": "5",
              "type": "t_enum(VaultState)11013",
              "contract": "Vault",
              "src": "contracts/Vault.sol:129"
            },
            {
              "label": "epochStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:130"
            },
            {
              "label": "fundraisingDuration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:131"
            },
            {
              "label": "minFundraisingAmount",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:132"
            },
            {
              "label": "managementFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:135"
            },
            {
              "label": "performanceFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:136"
            },
            {
              "label": "withdrawalFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:137"
            },
            {
              "label": "protocolFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:138"
            },
            {
              "label": "_totalAssets",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:144"
            },
            {
              "label": "lastRealizationTime",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:145"
            },
            {
              "label": "maxCapacity",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:146"
            },
            {
              "label": "minDepositAmount",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:147"
            },
            {
              "label": "realizationCooldown",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:150"
            },
            {
              "label": "maxPriceDeviationBps",
              "offset": 0,
              "slot": "18",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:151"
            },
            {
              "label": "lastAssetPrices",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:153"
            },
            {
              "label": "emergencyOracleMode",
              "offset": 0,
              "slot": "20",
              "type": "t_bool",
              "contract": "Vault",
              "src": "contracts/Vault.sol:154"
            },
            {
              "label": "currentRealization",
              "offset": 0,
              "slot": "21",
              "type": "t_struct(RealizationState)11186_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:164"
            },
            {
              "label": "supportedAssets",
              "offset": 0,
              "slot": "26",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:167"
            },
            {
              "label": "assetPosition",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:168"
            },
            {
              "label": "isAssetSupported",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:169"
            },
            {
              "label": "supportedPlatforms",
              "offset": 0,
              "slot": "29",
              "type": "t_array(t_string_storage)dyn_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:172"
            },
            {
              "label": "isPlatformSupported",
              "offset": 0,
              "slot": "30",
              "type": "t_mapping(t_string_memory_ptr,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:173"
            },
            {
              "label": "authorizedStrategies",
              "offset": 0,
              "slot": "31",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:176"
            },
            {
              "label": "epochStartAssets",
              "offset": 0,
              "slot": "32",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:179"
            },
            {
              "label": "epochEndAssets",
              "offset": 0,
              "slot": "33",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:180"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1865": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(ERC4626Storage)387_storage": {
              "label": "struct ERC4626Upgradeable.ERC4626Storage",
              "members": [
                {
                  "label": "_asset",
                  "type": "t_contract(IERC20)1865",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_underlyingDecimals",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)755_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]",
              "numberOfBytes": "32"
            },
            "t_enum(VaultState)11013": {
              "label": "enum Vault.VaultState",
              "members": [
                "FUNDRAISING",
                "LIVE"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_bool)": {
              "label": "mapping(string => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RealizationState)11186_storage": {
              "label": "struct Vault.RealizationState",
              "members": [
                {
                  "label": "isRealized",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "realizedAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "preRealizationValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "totalFeesExtracted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC4626": [
              {
                "contract": "ERC4626Upgradeable",
                "label": "_asset",
                "type": "t_contract(IERC20)1865",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:56",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC4626Upgradeable",
                "label": "_underlyingDecimals",
                "type": "t_uint8",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:57",
                "offset": 20,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/VaultFactory.sol:VaultFactory": {
        "src": "contracts/VaultFactory.sol:27",
        "version": {
          "withMetadata": "3e6307f13442e0184786bab522a88326864bf3784549053c5475823a48c0868c",
          "withoutMetadata": "0d7ce9be1766e0872598e7223cdd0354c1a35f0284dd427fd1a79a501ef5104d",
          "linkedWithoutMetadata": "0d7ce9be1766e0872598e7223cdd0354c1a35f0284dd427fd1a79a501ef5104d"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IHasAssetInfo.sol:IHasAssetInfo",
          "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo",
          "contracts/interfaces/IVaultFactory.sol:IVaultFactory"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "createVault(string,string,address,address,uint256,uint256,uint256)",
          "setAssetWhitelist(address,uint16,bool)",
          "batchSetAssetWhitelist(address[],uint16[],bool[])",
          "getTokenType(address)",
          "getWhitelistedAssets()",
          "setGovernanceAddress(address)",
          "setTreasuryAddress(address)",
          "setAdminAddress(address)",
          "updateVaultFees(address,uint256,uint256,uint256,uint256)",
          "getAssetHandler()",
          "setAssetHandler(address)",
          "setMaximumSupportedAssetCount(uint256)",
          "getMaximumSupportedAssetCount()",
          "isValidAsset(address)",
          "getAssetPrice(address)",
          "getAssetType(address)",
          "updateVaultImplementation(address)",
          "upgradeVault(address,address)",
          "batchUpgradeVaults(address[],address)",
          "setFactorySettings(uint256,uint256,uint256)",
          "pause()",
          "unpause()",
          "addUnderlyingAsset(address,uint16)",
          "addWhitelistedAsset(address,uint16)",
          "removeUnderlyingAsset(address)",
          "removeWhitelistedAsset(address)",
          "getUnderlyingAssets()",
          "getUnderlyingAssetCount()",
          "getWhitelistedAssetCount()",
          "isUnderlyingAssetAllowed(address)",
          "isAssetWhitelisted(address)",
          "setGovernanceAddress(bytes32,address)",
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)",
          "hasGuard(address)",
          "getAssetsWithTypes()",
          "getDeployedVaults()",
          "getVaultCount()",
          "getVaultsByManager(address)",
          "getVaultInfo(address)",
          "getDetailedVaultInfo(address)",
          "getFactoryStats()",
          "isValidVault(address)",
          "getVaultManager(address)",
          "addUnderlyingAssetWhitelist(address)",
          "removeUnderlyingAssetWhitelist(address)",
          "setVaultStorageVersion(uint256)",
          "version()",
          "emergencyRecoverAsset(address,uint256)",
          "owner()",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "proxyAdmin",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:41"
            },
            {
              "label": "vaultImplementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:42"
            },
            {
              "label": "implementationVersion",
              "offset": 20,
              "slot": "1",
              "type": "t_uint32",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:43"
            },
            {
              "label": "deployedVaults",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:46"
            },
            {
              "label": "isVault",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:47"
            },
            {
              "label": "vaultManager",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_address)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:48"
            },
            {
              "label": "vaultIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:49"
            },
            {
              "label": "underlyingAssetAllowed",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:52"
            },
            {
              "label": "underlyingAssets",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:53"
            },
            {
              "label": "underlyingAssetIndex",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:54"
            },
            {
              "label": "assetWhitelisted",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:57"
            },
            {
              "label": "tokenType",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint16)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:58"
            },
            {
              "label": "whitelistedAssets",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:59"
            },
            {
              "label": "assetIndex",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:60"
            },
            {
              "label": "governance",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:62"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:63"
            },
            {
              "label": "admin",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:64"
            },
            {
              "label": "_assetHandler",
              "offset": 0,
              "slot": "16",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:66"
            },
            {
              "label": "_maximumSupportedAssetCount",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:67"
            },
            {
              "label": "vaultVersion",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:69"
            },
            {
              "label": "vaultStorageVersion",
              "offset": 0,
              "slot": "19",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:70"
            },
            {
              "label": "maxCapacityLimit",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:73"
            },
            {
              "label": "minCapacityLimit",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:74"
            },
            {
              "label": "creationFee",
              "offset": 0,
              "slot": "22",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:75"
            },
            {
              "label": "governanceAddresses",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:78"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint16)": {
              "label": "mapping(address => uint16)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/asset/ERC20Guard.sol:ERC20Guard": {
        "src": "contracts/guards/asset/ERC20Guard.sol:19",
        "version": {
          "withMetadata": "4e737fc31caccc2aa0910ece06186f1ffa93fe8cf95683583e7a54ad04563587",
          "withoutMetadata": "d4cee40d12d666435359be756d47709ee87b320e3c8db99b2125c24bdfeb2747",
          "linkedWithoutMetadata": "d4cee40d12d666435359be756d47709ee87b320e3c8db99b2125c24bdfeb2747"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes",
          "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)",
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "WETH",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ERC20Guard",
              "src": "contracts/guards/asset/ERC20Guard.sol:21"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1566_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/asset/ETHGuard.sol:ETHGuard": {
        "src": "contracts/guards/asset/ETHGuard.sol:17",
        "version": {
          "withMetadata": "0ce961a5872a14d9a2ae5d4e761c107eeb648b4a558b62af15a4004affd22409",
          "withoutMetadata": "7d131af4736ebf205bb14c36c8e73b764a229614f130119d755cc4f0463c5e2d",
          "linkedWithoutMetadata": "7d131af4736ebf205bb14c36c8e73b764a229614f130119d755cc4f0463c5e2d"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)",
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "WETH",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ETHGuard",
              "src": "contracts/guards/asset/ETHGuard.sol:18"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1566_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/asset/StETHGuard.sol:IStETH": {
        "src": "contracts/guards/asset/StETHGuard.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPooledEthByShares(uint256)",
          "getSharesByPooledEth(uint256)",
          "getTotalShares()",
          "getTotalPooledEther()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/asset/StETHGuard.sol:StETHGuard": {
        "src": "contracts/guards/asset/StETHGuard.sol:19",
        "version": {
          "withMetadata": "def6661447a0c1e69929714315343347256349c6ee68f2bb968def79ba30a17f",
          "withoutMetadata": "3d8ef5f09e6ac7635ecfd427084b30a9eca219ea818c2e422322a4bbf8df07f8",
          "linkedWithoutMetadata": "3d8ef5f09e6ac7635ecfd427084b30a9eca219ea818c2e422322a4bbf8df07f8"
        },
        "inherit": [
          "contracts/guards/asset/ERC20Guard.sol:ERC20Guard",
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes",
          "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "getBalance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "WETH",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ERC20Guard",
              "src": "contracts/guards/asset/ERC20Guard.sol:21"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1566_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/asset/VertexAssetGuard.sol:VertexAssetGuard": {
        "src": "contracts/guards/asset/VertexAssetGuard.sol:17",
        "version": {
          "withMetadata": "490c8549988023a3f19eecc77b83741b538871de13808029e801fa2dddd32aef",
          "withoutMetadata": "e22256c64d4497d1ef27d2b5adc75317fbd5c0d92442f08ae62565961e13487b",
          "linkedWithoutMetadata": "e22256c64d4497d1ef27d2b5adc75317fbd5c0d92442f08ae62565961e13487b"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)",
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)",
          "getSubaccountId(address,bytes12)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1566_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/platform/KyberswapGuard.sol:KyberswapGuard": {
        "src": "contracts/guards/platform/KyberswapGuard.sol:13",
        "version": {
          "withMetadata": "ab52d456155b4b543015c5335e743d548f59eb4bd3f0ca146fa9af5a688185d2",
          "withoutMetadata": "036ed3788f0f60124ca500b4d8f5849fe70a50e3341880fa5a171c48c39edf1f",
          "linkedWithoutMetadata": "036ed3788f0f60124ca500b4d8f5849fe70a50e3341880fa5a171c48c39edf1f"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes",
          "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [
          "@uniswap/v3-periphery/contracts/libraries/Path.sol:Path"
        ],
        "methods": [
          "initialize()",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "platformName",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "KyberswapGuard",
              "src": "contracts/guards/platform/KyberswapGuard.sol:16"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1566_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/platform/VertexPlatformGuard.sol:VertexPlatformGuard": {
        "src": "contracts/guards/platform/VertexPlatformGuard.sol:13",
        "version": {
          "withMetadata": "4001780047fbaca2ac79ed38b0d025ce5f4f2fe66de066d277ab5c50d8c600ef",
          "withoutMetadata": "5562e9face1ea6c19057f4fc3c43f4f489d78d22bfa910305aa444afecea5e77",
          "linkedWithoutMetadata": "5562e9face1ea6c19057f4fc3c43f4f489d78d22bfa910305aa444afecea5e77"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes",
          "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "platformName",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "VertexPlatformGuard",
              "src": "contracts/guards/platform/VertexPlatformGuard.sol:15"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1566_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IAggregatorV3Interface.sol:IAggregatorV3Interface": {
        "src": "contracts/interfaces/IAggregatorV3Interface.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IAssetHandler.sol:IAssetHandler": {
        "src": "contracts/interfaces/IAssetHandler.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addAsset(address,uint16,address)",
          "addAssets(struct IAssetHandler.Asset[])",
          "removeAsset(address)",
          "priceAggregators(address)",
          "assetTypes(address)",
          "getUSDPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IGovernance.sol:IGovernance": {
        "src": "contracts/interfaces/IGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "contractGuards(address)",
          "assetGuards(uint16)",
          "nameToDestination(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasAdministrable.sol:IHasAdministrable": {
        "src": "contracts/interfaces/IHasAdministrable.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "admin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasAssetInfo.sol:IHasAssetInfo": {
        "src": "contracts/interfaces/IHasAssetInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidAsset(address)",
          "getAssetPrice(address)",
          "getAssetType(address)",
          "getMaximumSupportedAssetCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasDaoInfo.sol:IHasDaoInfo": {
        "src": "contracts/interfaces/IHasDaoInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getDaoFee()",
          "daoAddress()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo": {
        "src": "contracts/interfaces/IHasGuardInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasOwnable.sol:IHasOwnable": {
        "src": "contracts/interfaces/IHasOwnable.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasPausable.sol:IHasPausable": {
        "src": "contracts/interfaces/IHasPausable.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPaused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset": {
        "src": "contracts/interfaces/IHasSupportedAsset.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes": {
        "src": "contracts/interfaces/ITransactionTypes.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:8",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "emergencyLiquidateAll()",
          "addSupportedAsset(address)",
          "removeSupportedAsset(address)",
          "updateFees(uint256,uint256,uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateManager(address)",
          "updateProtocolTreasury(address)",
          "pause()",
          "unpause()",
          "emergencyRecovery(address,uint256)",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "factory()",
          "manager()",
          "underlyingAsset()",
          "protocolTreasury()",
          "currentEpoch()",
          "vaultState()",
          "epochStartTime()",
          "fundraisingDuration()",
          "minFundraisingAmount()",
          "managementFee()",
          "performanceFee()",
          "withdrawalFee()",
          "protocolFee()",
          "lastHarvestTime()",
          "maxCapacity()",
          "minDepositAmount()",
          "authorizedStrategies(address)",
          "isAssetSupported(address)",
          "epochStartAssets(uint256)",
          "epochEndAssets(uint256)",
          "version()",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVaultFactory.sol:IVaultFactory": {
        "src": "contracts/interfaces/IVaultFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenType(address)",
          "getAssetType(address)",
          "getDeployedVaults()",
          "getVaultCount()",
          "getVaultsByManager(address)",
          "getVaultInfo(address)",
          "getDetailedVaultInfo(address)",
          "getFactoryStats()",
          "isValidVault(address)",
          "getVaultManager(address)",
          "isAssetWhitelisted(address)",
          "version()",
          "emergencyRecoverAsset(address,uint256)",
          "setTreasuryAddress(address)",
          "setAdminAddress(address)",
          "proxyAdmin()",
          "vaultImplementation()",
          "implementationVersion()",
          "deployedVaults(uint256)",
          "isVault(address)",
          "vaultManager(address)",
          "vaultIndex(address)",
          "underlyingAssetAllowed(address)",
          "tokenType(address)",
          "whitelistedAssets(uint256)",
          "assetIndex(address)",
          "maxCapacityLimit()",
          "minCapacityLimit()",
          "creationFee()",
          "treasury()",
          "admin()",
          "owner()",
          "paused()",
          "governance()",
          "getAssetHandler()",
          "vaultStorageVersion()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IWETH.sol:IWETH": {
        "src": "contracts/interfaces/IWETH.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/kyberswap/IMetaAggregationRouterV2.sol:IMetaAggregationRouterV2": {
        "src": "contracts/interfaces/external/kyberswap/IMetaAggregationRouterV2.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swap((address,address,bytes,(address,address,address[],uint256[],address[],uint256[],address,uint256,uint256,uint256,bytes),bytes))",
          "swapSimpleMode(address,(address,address,address[],uint256[],address[],uint256[],address,uint256,uint256,uint256,bytes),bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/vertexprotocol/Clearinghouse.sol:Clearinghouse": {
        "src": "contracts/interfaces/external/vertexprotocol/Clearinghouse.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getHealth(bytes32,uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/vertexprotocol/IEndpoint.sol:IEndpoint": {
        "src": "contracts/interfaces/external/vertexprotocol/IEndpoint.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "depositCollateral(bytes12,uint32,uint128)",
          "depositCollateralWithReferral(bytes12,uint32,uint128,string)",
          "submitSlowModeTransaction(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard": {
        "src": "contracts/interfaces/guards/IAssetGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard": {
        "src": "contracts/interfaces/guards/IPlatformGuard.sol:6",
        "inherit": [
          "contracts/interfaces/guards/IGuard.sol:IGuard"
        ],
        "libraries": [],
        "methods": [
          "platformName()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/ITxTrackingGuard.sol:ITxTrackingGuard": {
        "src": "contracts/interfaces/guards/ITxTrackingGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isTxTrackingGuard()",
          "afterTxGuard(address,address,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/test/MockERC20.sol:MockERC20": {
        "src": "contracts/test/MockERC20.sol:8",
        "version": {
          "withMetadata": "40e669f683bcecb6e0db1db1012ad32163a814e81bec960c104572615a81046b",
          "withoutMetadata": "42e0620cc8dbbd40b20bc70cbbdb8d890cd9bee02a99838a3a55488eaf717731",
          "linkedWithoutMetadata": "42e0620cc8dbbd40b20bc70cbbdb8d890cd9bee02a99838a3a55488eaf717731"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint8)",
          "decimals()",
          "mint(address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/test/MockERC20.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "MockERC20",
              "src": "contracts/test/MockERC20.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/AssetHandler.sol:AssetHandler": {
        "src": "contracts/utils/AssetHandler.sol:14",
        "version": {
          "withMetadata": "4d8950bdbd0117d4c4fe21980f238595eae1b658fe995a583fc04ee9e924bad1",
          "withoutMetadata": "0d6aa0e99e3fb26a62a8c57c399e298cc5a18d8f5369ee844e85466118967411",
          "linkedWithoutMetadata": "0d6aa0e99e3fb26a62a8c57c399e298cc5a18d8f5369ee844e85466118967411"
        },
        "inherit": [
          "contracts/interfaces/IAssetHandler.sol:IAssetHandler",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(struct IAssetHandler.Asset[])",
          "getUSDPrice(address)",
          "setChainlinkTimeout(uint256)",
          "addAsset(address,uint16,address)",
          "addAssets(struct IAssetHandler.Asset[])",
          "removeAsset(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "chainlinkTimeout",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "AssetHandler",
              "src": "contracts/utils/AssetHandler.sol:16"
            },
            {
              "label": "assetTypes",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint16)",
              "contract": "AssetHandler",
              "src": "contracts/utils/AssetHandler.sol:19"
            },
            {
              "label": "priceAggregators",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_address)",
              "contract": "AssetHandler",
              "src": "contracts/utils/AssetHandler.sol:20"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)50_storage",
              "contract": "AssetHandler",
              "src": "contracts/utils/AssetHandler.sol:112"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint16)": {
              "label": "mapping(address => uint16)",
              "numberOfBytes": "32"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/AssetLogic.sol:AssetLogic": {
        "src": "contracts/utils/AssetLogic.sol:8",
        "version": {
          "withMetadata": "4099fd9086b36d4110fdfc9ea43180e16e53bf0c40ac31d4a5aa0b922dcc3a29",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/FeeLogic.sol:FeeLogic": {
        "src": "contracts/utils/FeeLogic.sol:9",
        "version": {
          "withMetadata": "5c39c509b5ae01c60281c03482dcb5a7cc1ca5921973dc5aa0c296ea4c4d3bd7",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/TxDataUtils.sol:TxDataUtils": {
        "src": "contracts/utils/TxDataUtils.sol:9",
        "version": {
          "withMetadata": "219bb1156255f504a011a7c0145bb194e47e80f3f261b510bda7fd59ef260f90",
          "withoutMetadata": "37ae426b7baaada9106ceb288eff533c0a28732e2645a505489818ebff66e825",
          "linkedWithoutMetadata": "37ae426b7baaada9106ceb288eff533c0a28732e2645a505489818ebff66e825"
        },
        "inherit": [],
        "libraries": [
          "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib"
        ],
        "methods": [
          "getMethod(bytes)",
          "getParams(bytes)",
          "getInput(bytes,uint8)",
          "getBytes(bytes,uint8,uint256)",
          "getArrayLast(bytes,uint8)",
          "getArrayLength(bytes,uint8)",
          "getArrayIndex(bytes,uint8,uint8)",
          "read4left(bytes,uint256)",
          "read32(bytes,uint256,uint256)",
          "convert32toAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/VaultLogic.sol:VaultLogic": {
        "src": "contracts/utils/VaultLogic.sol:15",
        "version": {
          "withMetadata": "367d6ff446042bbb1bf7462d40af10f19f67bbac1883dcd4453f2a4a16f4a8e3",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    }
  ]
}