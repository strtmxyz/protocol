{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:ERC4626Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:51",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "decimals()",
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "maxMint(address)",
          "maxWithdraw(address)",
          "maxRedeem(address)",
          "previewDeposit(uint256)",
          "previewMint(uint256)",
          "previewWithdraw(uint256)",
          "previewRedeem(uint256)",
          "deposit(uint256,address)",
          "mint(uint256,address)",
          "withdraw(uint256,address,address)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1173": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(ERC4626Storage)387_storage": {
              "label": "struct ERC4626Upgradeable.ERC4626Storage",
              "members": [
                {
                  "label": "_asset",
                  "type": "t_contract(IERC20)1173",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_underlyingDecimals",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC4626": [
              {
                "contract": "ERC4626Upgradeable",
                "label": "_asset",
                "type": "t_contract(IERC20)1173",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:56",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC4626Upgradeable",
                "label": "_underlyingDecimals",
                "type": "t_uint8",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:57",
                "offset": 20,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)755_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC1363.sol:IERC1363": {
        "src": "@openzeppelin/contracts/interfaces/IERC1363.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFromAndCall(address,address,uint256)",
          "transferFromAndCall(address,address,uint256,bytes)",
          "approveAndCall(address,uint256)",
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/Panic.sol:Panic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/Vault.sol:Vault": {
        "src": "contracts/Vault.sol:30",
        "version": {
          "withMetadata": "a933a979fb7dbddba6dfd5ac878181157e401088bd0e9fb66049cc6da294e11d",
          "withoutMetadata": "6df065e9f7a399cf852ac49f5fb04138b67c44c1ecb1d5518ab2d76ba2765aff",
          "linkedWithoutMetadata": "6df065e9f7a399cf852ac49f5fb04138b67c44c1ecb1d5518ab2d76ba2765aff"
        },
        "inherit": [
          "contracts/utils/FeeLogic.sol:IVaultMinter",
          "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset",
          "contracts/interfaces/IVault.sol:IVault",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:ERC4626Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "contracts/utils/FeeLogic.sol:FeeLogic",
          "contracts/utils/VaultLogic.sol:VaultLogic",
          "contracts/utils/AssetLogic.sol:AssetLogic",
          "@openzeppelin/contracts/utils/math/Math.sol:Math"
        ],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "assetBalance(address)",
          "totalAssets()",
          "maxDeposit(address)",
          "maxWithdraw(address)",
          "previewDeposit(uint256)",
          "previewWithdraw(uint256)",
          "deposit(uint256,address)",
          "withdraw(uint256,address,address)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "mint(address,uint256)",
          "convertToShares(uint256)",
          "_updateAssetPricesExternal()",
          "addSupportedAsset(address)",
          "batchAddSupportedAssets(address[])",
          "removeSupportedAsset(address)",
          "addSupportedPlatform(string)",
          "removeSupportedPlatform(string)",
          "updateFees(uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "updateOracleProtection(uint256,uint256)",
          "setEmergencyOracleMode(bool)",
          "setEmergencyPrice(address,uint256)",
          "pause()",
          "unpause()",
          "()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "getVaultAssetBreakdown()",
          "convertAssetValueToUnderlying(address,uint256)",
          "getAutoRealizationStatus()",
          "previewWithdrawalImpact(uint256)",
          "shouldManagerRealize()",
          "version()",
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)",
          "previewWithdrawalAfterFees(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/Vault.sol:208",
            "expectedLinearization": [
              "ERC20Upgradeable",
              "ERC4626Upgradeable",
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable"
            ],
            "foundOrder": [
              "ERC4626Upgradeable",
              "ERC20Upgradeable",
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable"
            ]
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "underlyingAsset",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:97"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:98"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:99"
            },
            {
              "label": "protocolTreasury",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:100"
            },
            {
              "label": "currentEpoch",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:103"
            },
            {
              "label": "vaultState",
              "offset": 0,
              "slot": "5",
              "type": "t_enum(VaultState)10382",
              "contract": "Vault",
              "src": "contracts/Vault.sol:104"
            },
            {
              "label": "epochStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:105"
            },
            {
              "label": "fundraisingDuration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:106"
            },
            {
              "label": "minFundraisingAmount",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:107"
            },
            {
              "label": "managerFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:111"
            },
            {
              "label": "withdrawalFee",
              "offset": 2,
              "slot": "9",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:112"
            },
            {
              "label": "_totalAssets",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:125"
            },
            {
              "label": "lastRealizationTime",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:126"
            },
            {
              "label": "maxCapacity",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:127"
            },
            {
              "label": "minDepositAmount",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:128"
            },
            {
              "label": "realizationCooldown",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:131"
            },
            {
              "label": "maxPriceDeviationBps",
              "offset": 0,
              "slot": "15",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:132"
            },
            {
              "label": "emergencyOracleMode",
              "offset": 2,
              "slot": "15",
              "type": "t_bool",
              "contract": "Vault",
              "src": "contracts/Vault.sol:133"
            },
            {
              "label": "lastAssetPrices",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:135"
            },
            {
              "label": "currentRealization",
              "offset": 0,
              "slot": "17",
              "type": "t_struct(RealizationState)6855_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:145"
            },
            {
              "label": "supportedAssets",
              "offset": 0,
              "slot": "22",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:148"
            },
            {
              "label": "assetPosition",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:149"
            },
            {
              "label": "isAssetSupported",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:150"
            },
            {
              "label": "supportedPlatforms",
              "offset": 0,
              "slot": "25",
              "type": "t_array(t_string_storage)dyn_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:153"
            },
            {
              "label": "isPlatformSupported",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_string_memory_ptr,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:154"
            },
            {
              "label": "authorizedStrategies",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:157"
            },
            {
              "label": "epochStartAssets",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:160"
            },
            {
              "label": "epochEndAssets",
              "offset": 0,
              "slot": "29",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:161"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1173": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(ERC4626Storage)387_storage": {
              "label": "struct ERC4626Upgradeable.ERC4626Storage",
              "members": [
                {
                  "label": "_asset",
                  "type": "t_contract(IERC20)1173",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_underlyingDecimals",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)755_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]",
              "numberOfBytes": "32"
            },
            "t_enum(VaultState)10382": {
              "label": "enum IVault.VaultState",
              "members": [
                "FUNDRAISING",
                "LIVE"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_bool)": {
              "label": "mapping(string => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RealizationState)6855_storage": {
              "label": "struct Vault.RealizationState",
              "members": [
                {
                  "label": "isRealized",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "realizedAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "preRealizationValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "totalFeesExtracted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC4626": [
              {
                "contract": "ERC4626Upgradeable",
                "label": "_asset",
                "type": "t_contract(IERC20)1173",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:56",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC4626Upgradeable",
                "label": "_underlyingDecimals",
                "type": "t_uint8",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:57",
                "offset": 20,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IAssetHandler.sol:IAssetHandler": {
        "src": "contracts/interfaces/IAssetHandler.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addAsset(address,uint16,address)",
          "addAssets(struct IAssetHandler.Asset[])",
          "removeAsset(address)",
          "priceAggregators(address)",
          "assetTypes(address)",
          "getUSDPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo": {
        "src": "contracts/interfaces/IHasGuardInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset": {
        "src": "contracts/interfaces/IHasSupportedAsset.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:8",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "addSupportedAsset(address)",
          "batchAddSupportedAssets(address[])",
          "removeSupportedAsset(address)",
          "updateFees(uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "pause()",
          "unpause()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "getVaultAssetBreakdown()",
          "factory()",
          "manager()",
          "underlyingAsset()",
          "protocolTreasury()",
          "currentEpoch()",
          "vaultState()",
          "epochStartTime()",
          "fundraisingDuration()",
          "minFundraisingAmount()",
          "managerFee()",
          "withdrawalFee()",
          "maxCapacity()",
          "minDepositAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVaultFactory.sol:IVaultFactory": {
        "src": "contracts/interfaces/IVaultFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenType(address)",
          "getAssetType(address)",
          "getDeployedVaults()",
          "getVaultCount()",
          "getVaultsByManager(address)",
          "getVaultInfo(address)",
          "getDetailedVaultInfo(address)",
          "getFactoryStats()",
          "isValidVault(address)",
          "getVaultManager(address)",
          "isAssetWhitelisted(address)",
          "version()",
          "emergencyRecoverAsset(address,uint256)",
          "setTreasuryAddress(address)",
          "setAdminAddress(address)",
          "proxyAdmin()",
          "vaultImplementation()",
          "implementationVersion()",
          "deployedVaults(uint256)",
          "isVault(address)",
          "vaultManager(address)",
          "vaultIndex(address)",
          "underlyingAssetAllowed(address)",
          "tokenType(address)",
          "whitelistedAssets(uint256)",
          "assetIndex(address)",
          "maxCapacityLimit()",
          "minCapacityLimit()",
          "creationFee()",
          "treasury()",
          "admin()",
          "owner()",
          "paused()",
          "governance()",
          "getAssetHandler()",
          "vaultStorageVersion()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard": {
        "src": "contracts/interfaces/guards/IAssetGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/ITxTrackingGuard.sol:ITxTrackingGuard": {
        "src": "contracts/interfaces/guards/ITxTrackingGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isTxTrackingGuard()",
          "afterTxGuard(address,address,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/AssetLogic.sol:AssetLogic": {
        "src": "contracts/utils/AssetLogic.sol:30",
        "version": {
          "withMetadata": "d50d1ab49190d6f833b1124842ebfa703a45a40534912706a83af295af746662",
          "withoutMetadata": "7fae6f8b65a143a4c7bccdd935e62da265a5d4930269d0c232bedf1ca35447b2",
          "linkedWithoutMetadata": "7fae6f8b65a143a4c7bccdd935e62da265a5d4930269d0c232bedf1ca35447b2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/FeeLogic.sol:FeeLogic": {
        "src": "contracts/utils/FeeLogic.sol:32",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/FeeLogic.sol:IVaultMinter": {
        "src": "contracts/utils/FeeLogic.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "convertToShares(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/VaultLogic.sol:VaultLogic": {
        "src": "contracts/utils/VaultLogic.sol:15",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)162_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib": {
        "src": "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:11",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/platform/AmbientGuard.sol:AmbientGuard": {
        "src": "contracts/guards/platform/AmbientGuard.sol:28",
        "version": {
          "withMetadata": "c89ce8d1234a6c58785ee810054782ff3ee8470fa2653206157464980d37e88e",
          "withoutMetadata": "872724017d24913895c5d88fbe6361ded98cc0998e25cc3135e2839bdabe96c0",
          "linkedWithoutMetadata": "872724017d24913895c5d88fbe6361ded98cc0998e25cc3135e2839bdabe96c0"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes",
          "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "platformName",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "AmbientGuard",
              "src": "contracts/guards/platform/AmbientGuard.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)162_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset": {
        "src": "contracts/interfaces/IHasSupportedAsset.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes": {
        "src": "contracts/interfaces/ITransactionTypes.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:8",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "addSupportedAsset(address)",
          "batchAddSupportedAssets(address[])",
          "removeSupportedAsset(address)",
          "updateFees(uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "pause()",
          "unpause()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "getVaultAssetBreakdown()",
          "factory()",
          "manager()",
          "underlyingAsset()",
          "protocolTreasury()",
          "currentEpoch()",
          "vaultState()",
          "epochStartTime()",
          "fundraisingDuration()",
          "minFundraisingAmount()",
          "managerFee()",
          "withdrawalFee()",
          "maxCapacity()",
          "minDepositAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/ambient/ICrocSwapDex.sol:ICrocSwapDex": {
        "src": "contracts/interfaces/external/ambient/ICrocSwapDex.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userCmd(uint16,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard": {
        "src": "contracts/interfaces/guards/IPlatformGuard.sol:6",
        "inherit": [
          "contracts/interfaces/guards/IGuard.sol:IGuard"
        ],
        "libraries": [],
        "methods": [
          "platformName()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/TxDataUtils.sol:TxDataUtils": {
        "src": "contracts/utils/TxDataUtils.sol:20",
        "version": {
          "withMetadata": "8cb004785e763015bdeba03de981235690d55637ba6b96312909c6052b135ff9",
          "withoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb",
          "linkedWithoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb"
        },
        "inherit": [],
        "libraries": [
          "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib"
        ],
        "methods": [
          "getMethod(bytes)",
          "getParams(bytes)",
          "getInput(bytes,uint8)",
          "getBytes(bytes,uint8,uint256)",
          "getArrayLast(bytes,uint8)",
          "getArrayLength(bytes,uint8)",
          "getArrayIndex(bytes,uint8,uint8)",
          "read4left(bytes,uint256)",
          "read32(bytes,uint256,uint256)",
          "convert32toAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)162_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib": {
        "src": "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:11",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/platform/AmbientGuard.sol:AmbientGuard": {
        "src": "contracts/guards/platform/AmbientGuard.sol:28",
        "version": {
          "withMetadata": "704a73b50a7ac0d883aa5d128cb8dbf298bdd6bdc90fa62e0f443501c2933e6c",
          "withoutMetadata": "53cb07bee8382e37e2a0dfff44aa2359eb2e381c8a639f682d3d433e729b1689",
          "linkedWithoutMetadata": "53cb07bee8382e37e2a0dfff44aa2359eb2e381c8a639f682d3d433e729b1689"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes",
          "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "platformName",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "AmbientGuard",
              "src": "contracts/guards/platform/AmbientGuard.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)162_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset": {
        "src": "contracts/interfaces/IHasSupportedAsset.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes": {
        "src": "contracts/interfaces/ITransactionTypes.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:8",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "addSupportedAsset(address)",
          "batchAddSupportedAssets(address[])",
          "removeSupportedAsset(address)",
          "updateFees(uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "pause()",
          "unpause()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "getVaultAssetBreakdown()",
          "factory()",
          "manager()",
          "underlyingAsset()",
          "protocolTreasury()",
          "currentEpoch()",
          "vaultState()",
          "epochStartTime()",
          "fundraisingDuration()",
          "minFundraisingAmount()",
          "managerFee()",
          "withdrawalFee()",
          "maxCapacity()",
          "minDepositAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/ambient/ICrocSwapDex.sol:ICrocSwapDex": {
        "src": "contracts/interfaces/external/ambient/ICrocSwapDex.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userCmd(uint16,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard": {
        "src": "contracts/interfaces/guards/IPlatformGuard.sol:6",
        "inherit": [
          "contracts/interfaces/guards/IGuard.sol:IGuard"
        ],
        "libraries": [],
        "methods": [
          "platformName()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/TxDataUtils.sol:TxDataUtils": {
        "src": "contracts/utils/TxDataUtils.sol:20",
        "version": {
          "withMetadata": "8cb004785e763015bdeba03de981235690d55637ba6b96312909c6052b135ff9",
          "withoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb",
          "linkedWithoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb"
        },
        "inherit": [],
        "libraries": [
          "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib"
        ],
        "methods": [
          "getMethod(bytes)",
          "getParams(bytes)",
          "getInput(bytes,uint8)",
          "getBytes(bytes,uint8,uint256)",
          "getArrayLast(bytes,uint8)",
          "getArrayLength(bytes,uint8)",
          "getArrayIndex(bytes,uint8,uint8)",
          "read4left(bytes,uint256)",
          "read32(bytes,uint256,uint256)",
          "convert32toAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)212_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib": {
        "src": "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:11",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/platform/AmbientGuard.sol:AmbientGuard": {
        "src": "contracts/guards/platform/AmbientGuard.sol:17",
        "version": {
          "withMetadata": "a68f6c657f8fcd3fadcdc82a85290cc24dfff4c509137ad53d67f2c29da44941",
          "withoutMetadata": "2b9e0befdd0e6e1dd8b5650aa8da173bf71eb641760ecf8682f6d41d02bca90f",
          "linkedWithoutMetadata": "2b9e0befdd0e6e1dd8b5650aa8da173bf71eb641760ecf8682f6d41d02bca90f"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes",
          "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "platformName",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "AmbientGuard",
              "src": "contracts/guards/platform/AmbientGuard.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)212_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset": {
        "src": "contracts/interfaces/IHasSupportedAsset.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes": {
        "src": "contracts/interfaces/ITransactionTypes.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:8",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "addSupportedAsset(address)",
          "batchAddSupportedAssets(address[])",
          "removeSupportedAsset(address)",
          "updateFees(uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "pause()",
          "unpause()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "getVaultAssetBreakdown()",
          "factory()",
          "manager()",
          "underlyingAsset()",
          "protocolTreasury()",
          "currentEpoch()",
          "vaultState()",
          "epochStartTime()",
          "fundraisingDuration()",
          "minFundraisingAmount()",
          "managerFee()",
          "withdrawalFee()",
          "maxCapacity()",
          "minDepositAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/ambient/ICrocSwapDex.sol:ICrocSwapDex": {
        "src": "contracts/interfaces/external/ambient/ICrocSwapDex.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userCmd(uint16,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard": {
        "src": "contracts/interfaces/guards/IPlatformGuard.sol:6",
        "inherit": [
          "contracts/interfaces/guards/IGuard.sol:IGuard"
        ],
        "libraries": [],
        "methods": [
          "platformName()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/test/MockVault.sol:MockVault": {
        "src": "contracts/test/MockVault.sol:12",
        "version": {
          "withMetadata": "f8cccb3dc414931de9a7b2e01ba58fc3e14ffe82285856cc9e3d665ca33093e5",
          "withoutMetadata": "aab86ad9c338a6d3ab676417e01c837448da8fd327a7d69e86cf124f2ba46691",
          "linkedWithoutMetadata": "aab86ad9c338a6d3ab676417e01c837448da8fd327a7d69e86cf124f2ba46691"
        },
        "inherit": [
          "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "isSupportedAsset(address)",
          "getSupportedAssets()",
          "getAssetType(address)",
          "addSupportedAsset(address)",
          "removeSupportedAsset(address)",
          "addSupportedAssets(address[])",
          "setAssetType(address,uint16)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockVault",
            "src": "contracts/test/MockVault.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "supportedAssets",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "MockVault",
              "src": "contracts/test/MockVault.sol:14"
            },
            {
              "label": "assetTypes",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint16)",
              "contract": "MockVault",
              "src": "contracts/test/MockVault.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint16)": {
              "label": "mapping(address => uint16)",
              "numberOfBytes": "32"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/TxDataUtils.sol:TxDataUtils": {
        "src": "contracts/utils/TxDataUtils.sol:20",
        "version": {
          "withMetadata": "8cb004785e763015bdeba03de981235690d55637ba6b96312909c6052b135ff9",
          "withoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb",
          "linkedWithoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb"
        },
        "inherit": [],
        "libraries": [
          "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib"
        ],
        "methods": [
          "getMethod(bytes)",
          "getParams(bytes)",
          "getInput(bytes,uint8)",
          "getBytes(bytes,uint8,uint256)",
          "getArrayLast(bytes,uint8)",
          "getArrayLength(bytes,uint8)",
          "getArrayIndex(bytes,uint8,uint8)",
          "read4left(bytes,uint256)",
          "read32(bytes,uint256,uint256)",
          "convert32toAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/ambient/ICrocSwapDex.sol:ICrocSwapDex": {
        "src": "contracts/interfaces/external/ambient/ICrocSwapDex.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userCmd(uint16,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/test/MockAmbientDex.sol:MockAmbientDex": {
        "src": "contracts/test/MockAmbientDex.sol:7",
        "version": {
          "withMetadata": "4d45aa52f392391423ed4cb520433a7e282e7127644cfbb055a3c252fbfac15c",
          "withoutMetadata": "00b015c49a6c683e940b4d5dc8adecc6ce8bd353af51475db0eab0eae372929a",
          "linkedWithoutMetadata": "00b015c49a6c683e940b4d5dc8adecc6ce8bd353af51475db0eab0eae372929a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "userCmd(uint16,bytes)",
          "executeSwap(address,address,uint256,bool,address)",
          "parseSwapCommand(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset": {
        "src": "contracts/interfaces/IHasSupportedAsset.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:8",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "addSupportedAsset(address)",
          "batchAddSupportedAssets(address[])",
          "removeSupportedAsset(address)",
          "updateFees(uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "pause()",
          "unpause()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "getVaultAssetBreakdown()",
          "factory()",
          "manager()",
          "underlyingAsset()",
          "protocolTreasury()",
          "currentEpoch()",
          "vaultState()",
          "epochStartTime()",
          "fundraisingDuration()",
          "minFundraisingAmount()",
          "managerFee()",
          "withdrawalFee()",
          "maxCapacity()",
          "minDepositAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/test/MockVault.sol:MockVault": {
        "src": "contracts/test/MockVault.sol:7",
        "version": {
          "withMetadata": "88757691fc9f8aa52afdc76a86e221f1cc8c4eead85d0982b560a85f280c9881",
          "withoutMetadata": "f2cc833fc455066fea220b40c26eacf60d5b117bc8b5e2514a1d5579af1a39bf",
          "linkedWithoutMetadata": "f2cc833fc455066fea220b40c26eacf60d5b117bc8b5e2514a1d5579af1a39bf"
        },
        "inherit": [
          "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setSupportedAsset(address,bool)",
          "setAssetType(address,uint16)",
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockVault",
            "src": "contracts/test/MockVault.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "MockVault",
              "src": "contracts/test/MockVault.sol:8"
            },
            {
              "label": "supportedAssets",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "MockVault",
              "src": "contracts/test/MockVault.sol:9"
            },
            {
              "label": "assetTypes",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint16)",
              "contract": "MockVault",
              "src": "contracts/test/MockVault.sol:10"
            },
            {
              "label": "_supportedAssetsList",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_address)dyn_storage",
              "contract": "MockVault",
              "src": "contracts/test/MockVault.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint16)": {
              "label": "mapping(address => uint16)",
              "numberOfBytes": "32"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/ambient/ICrocSwapDex.sol:ICrocSwapDex": {
        "src": "contracts/interfaces/external/ambient/ICrocSwapDex.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userCmd(uint16,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/test/MockAmbientDex.sol:MockAmbientDex": {
        "src": "contracts/test/MockAmbientDex.sol:7",
        "version": {
          "withMetadata": "33a6332276d7e20811776714e14695d864d27027008679cb8a25aba5a6cf818e",
          "withoutMetadata": "4d6610c92865c0b2c24da28f954b3331b3125e66cff37edd470ef45adba2011e",
          "linkedWithoutMetadata": "4d6610c92865c0b2c24da28f954b3331b3125e66cff37edd470ef45adba2011e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "userCmd(uint16,bytes)",
          "parseSwapCommand(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib": {
        "src": "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:11",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard": {
        "src": "contracts/interfaces/guards/IPlatformGuard.sol:6",
        "inherit": [
          "contracts/interfaces/guards/IGuard.sol:IGuard"
        ],
        "libraries": [],
        "methods": [
          "platformName()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/test/AmbientGuardFix.sol:AmbientGuardFix": {
        "src": "contracts/test/AmbientGuardFix.sol:8",
        "version": {
          "withMetadata": "59b95e5e3a71d8f9193234d82662cbc5dba77b40b16d1cea6c2b7b409da6ebbd",
          "withoutMetadata": "0c925f62c2c22e8b23fe37a7929415856fbacc27da48ae705e7d9aab4e1f1b2c",
          "linkedWithoutMetadata": "0c925f62c2c22e8b23fe37a7929415856fbacc27da48ae705e7d9aab4e1f1b2c"
        },
        "inherit": [
          "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "platformName",
            "src": "contracts/test/AmbientGuardFix.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "platformName",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "AmbientGuardFix",
              "src": "contracts/test/AmbientGuardFix.sol:9"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/TxDataUtils.sol:TxDataUtils": {
        "src": "contracts/utils/TxDataUtils.sol:20",
        "version": {
          "withMetadata": "8cb004785e763015bdeba03de981235690d55637ba6b96312909c6052b135ff9",
          "withoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb",
          "linkedWithoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb"
        },
        "inherit": [],
        "libraries": [
          "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib"
        ],
        "methods": [
          "getMethod(bytes)",
          "getParams(bytes)",
          "getInput(bytes,uint8)",
          "getBytes(bytes,uint8,uint256)",
          "getArrayLast(bytes,uint8)",
          "getArrayLength(bytes,uint8)",
          "getArrayIndex(bytes,uint8,uint8)",
          "read4left(bytes,uint256)",
          "read32(bytes,uint256,uint256)",
          "convert32toAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)162_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib": {
        "src": "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:11",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/platform/AmbientGuard.sol:AmbientGuard": {
        "src": "contracts/guards/platform/AmbientGuard.sol:17",
        "version": {
          "withMetadata": "36f636adaa78467c09aaf62d61e66e58cc5f6321a2377c9d0d07152a5a1adb6e",
          "withoutMetadata": "4197c629e6d19f8fa0d086879d914199a0d7b83920e22884c7f595724d88b933",
          "linkedWithoutMetadata": "4197c629e6d19f8fa0d086879d914199a0d7b83920e22884c7f595724d88b933"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes",
          "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "platformName",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "AmbientGuard",
              "src": "contracts/guards/platform/AmbientGuard.sol:41"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)162_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset": {
        "src": "contracts/interfaces/IHasSupportedAsset.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes": {
        "src": "contracts/interfaces/ITransactionTypes.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:8",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "addSupportedAsset(address)",
          "batchAddSupportedAssets(address[])",
          "removeSupportedAsset(address)",
          "updateFees(uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "pause()",
          "unpause()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "getVaultAssetBreakdown()",
          "factory()",
          "manager()",
          "underlyingAsset()",
          "protocolTreasury()",
          "currentEpoch()",
          "vaultState()",
          "epochStartTime()",
          "fundraisingDuration()",
          "minFundraisingAmount()",
          "managerFee()",
          "withdrawalFee()",
          "maxCapacity()",
          "minDepositAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/ambient/ICrocSwapDex.sol:ICrocSwapDex": {
        "src": "contracts/interfaces/external/ambient/ICrocSwapDex.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userCmd(uint16,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard": {
        "src": "contracts/interfaces/guards/IPlatformGuard.sol:6",
        "inherit": [
          "contracts/interfaces/guards/IGuard.sol:IGuard"
        ],
        "libraries": [],
        "methods": [
          "platformName()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/TxDataUtils.sol:TxDataUtils": {
        "src": "contracts/utils/TxDataUtils.sol:20",
        "version": {
          "withMetadata": "8cb004785e763015bdeba03de981235690d55637ba6b96312909c6052b135ff9",
          "withoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb",
          "linkedWithoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb"
        },
        "inherit": [],
        "libraries": [
          "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib"
        ],
        "methods": [
          "getMethod(bytes)",
          "getParams(bytes)",
          "getInput(bytes,uint8)",
          "getBytes(bytes,uint8,uint256)",
          "getArrayLast(bytes,uint8)",
          "getArrayLength(bytes,uint8)",
          "getArrayIndex(bytes,uint8,uint8)",
          "read4left(bytes,uint256)",
          "read32(bytes,uint256,uint256)",
          "convert32toAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/ambient/ICrocSwapDex.sol:ICrocSwapDex": {
        "src": "contracts/interfaces/external/ambient/ICrocSwapDex.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userCmd(uint16,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/test/MockAmbientDex.sol:MockAmbientDex": {
        "src": "contracts/test/MockAmbientDex.sol:7",
        "version": {
          "withMetadata": "dac0f32d14a2b99bb851008173ac37189903af3c7039d0c5880884d512946dc9",
          "withoutMetadata": "01bef0753f341cf1a6289a4bb1695dbe03a08654737c5fc92470c52174f9f768",
          "linkedWithoutMetadata": "01bef0753f341cf1a6289a4bb1695dbe03a08654737c5fc92470c52174f9f768"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "userCmd(uint16,bytes)",
          "parseSwapCommand(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)162_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib": {
        "src": "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:11",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/platform/AmbientGuard.sol:AmbientGuard": {
        "src": "contracts/guards/platform/AmbientGuard.sol:17",
        "version": {
          "withMetadata": "36f636adaa78467c09aaf62d61e66e58cc5f6321a2377c9d0d07152a5a1adb6e",
          "withoutMetadata": "4197c629e6d19f8fa0d086879d914199a0d7b83920e22884c7f595724d88b933",
          "linkedWithoutMetadata": "4197c629e6d19f8fa0d086879d914199a0d7b83920e22884c7f595724d88b933"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes",
          "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "platformName",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "AmbientGuard",
              "src": "contracts/guards/platform/AmbientGuard.sol:41"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)162_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset": {
        "src": "contracts/interfaces/IHasSupportedAsset.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes": {
        "src": "contracts/interfaces/ITransactionTypes.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:8",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "addSupportedAsset(address)",
          "batchAddSupportedAssets(address[])",
          "removeSupportedAsset(address)",
          "updateFees(uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "pause()",
          "unpause()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "getVaultAssetBreakdown()",
          "factory()",
          "manager()",
          "underlyingAsset()",
          "protocolTreasury()",
          "currentEpoch()",
          "vaultState()",
          "epochStartTime()",
          "fundraisingDuration()",
          "minFundraisingAmount()",
          "managerFee()",
          "withdrawalFee()",
          "maxCapacity()",
          "minDepositAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/ambient/ICrocSwapDex.sol:ICrocSwapDex": {
        "src": "contracts/interfaces/external/ambient/ICrocSwapDex.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userCmd(uint16,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard": {
        "src": "contracts/interfaces/guards/IPlatformGuard.sol:6",
        "inherit": [
          "contracts/interfaces/guards/IGuard.sol:IGuard"
        ],
        "libraries": [],
        "methods": [
          "platformName()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/TxDataUtils.sol:TxDataUtils": {
        "src": "contracts/utils/TxDataUtils.sol:20",
        "version": {
          "withMetadata": "8cb004785e763015bdeba03de981235690d55637ba6b96312909c6052b135ff9",
          "withoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb",
          "linkedWithoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb"
        },
        "inherit": [],
        "libraries": [
          "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib"
        ],
        "methods": [
          "getMethod(bytes)",
          "getParams(bytes)",
          "getInput(bytes,uint8)",
          "getBytes(bytes,uint8,uint256)",
          "getArrayLast(bytes,uint8)",
          "getArrayLength(bytes,uint8)",
          "getArrayIndex(bytes,uint8,uint8)",
          "read4left(bytes,uint256)",
          "read32(bytes,uint256,uint256)",
          "convert32toAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)162_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib": {
        "src": "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:11",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/platform/AmbientGuard.sol:AmbientGuard": {
        "src": "contracts/guards/platform/AmbientGuard.sol:17",
        "version": {
          "withMetadata": "df2650a7d9f1646c5559bf08cab3dc53d03f04739edf997f65bc98a1113d4c70",
          "withoutMetadata": "3ec6e0aad7ba9cb543fe1cfb469293b3566db6ffe49a83292db67f88f7427ce9",
          "linkedWithoutMetadata": "3ec6e0aad7ba9cb543fe1cfb469293b3566db6ffe49a83292db67f88f7427ce9"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes",
          "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "platformName",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "AmbientGuard",
              "src": "contracts/guards/platform/AmbientGuard.sol:38"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)162_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset": {
        "src": "contracts/interfaces/IHasSupportedAsset.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes": {
        "src": "contracts/interfaces/ITransactionTypes.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:8",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "addSupportedAsset(address)",
          "batchAddSupportedAssets(address[])",
          "removeSupportedAsset(address)",
          "updateFees(uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "pause()",
          "unpause()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "getVaultAssetBreakdown()",
          "factory()",
          "manager()",
          "underlyingAsset()",
          "protocolTreasury()",
          "currentEpoch()",
          "vaultState()",
          "epochStartTime()",
          "fundraisingDuration()",
          "minFundraisingAmount()",
          "managerFee()",
          "withdrawalFee()",
          "maxCapacity()",
          "minDepositAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/ambient/ICrocSwapDex.sol:ICrocSwapDex": {
        "src": "contracts/interfaces/external/ambient/ICrocSwapDex.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userCmd(uint16,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard": {
        "src": "contracts/interfaces/guards/IPlatformGuard.sol:6",
        "inherit": [
          "contracts/interfaces/guards/IGuard.sol:IGuard"
        ],
        "libraries": [],
        "methods": [
          "platformName()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/test/MockAmbientDex.sol:MockAmbientDex": {
        "src": "contracts/test/MockAmbientDex.sol:7",
        "version": {
          "withMetadata": "5cab5a4d59759f3cecc397a9500035b6d61fa10f31ffd4c4bc5dc5402e49c4ae",
          "withoutMetadata": "967f55b7cdb7ed797be9efd5a54695a2343100e15c31a52ec70f4938dbc2857d",
          "linkedWithoutMetadata": "967f55b7cdb7ed797be9efd5a54695a2343100e15c31a52ec70f4938dbc2857d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "userCmd(uint16,bytes)",
          "parseSwapCommand(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/TxDataUtils.sol:TxDataUtils": {
        "src": "contracts/utils/TxDataUtils.sol:20",
        "version": {
          "withMetadata": "8cb004785e763015bdeba03de981235690d55637ba6b96312909c6052b135ff9",
          "withoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb",
          "linkedWithoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb"
        },
        "inherit": [],
        "libraries": [
          "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib"
        ],
        "methods": [
          "getMethod(bytes)",
          "getParams(bytes)",
          "getInput(bytes,uint8)",
          "getBytes(bytes,uint8,uint256)",
          "getArrayLast(bytes,uint8)",
          "getArrayLength(bytes,uint8)",
          "getArrayIndex(bytes,uint8,uint8)",
          "read4left(bytes,uint256)",
          "read32(bytes,uint256,uint256)",
          "convert32toAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/ambient/ICrocSwapDex.sol:ICrocSwapDex": {
        "src": "contracts/interfaces/external/ambient/ICrocSwapDex.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userCmd(uint16,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/test/MockAmbientDex.sol:MockAmbientDex": {
        "src": "contracts/test/MockAmbientDex.sol:7",
        "version": {
          "withMetadata": "6150f3df5788de68da356dcf45a82828b6e2765db8c760c8aca092b4ab4ce9f2",
          "withoutMetadata": "2fc16acedbba19f933f8f242afc5b3791da5c20fc33a9b959e80a7bb07ed2d8e",
          "linkedWithoutMetadata": "2fc16acedbba19f933f8f242afc5b3791da5c20fc33a9b959e80a7bb07ed2d8e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "userCmd(uint16,bytes)",
          "parseSwapCommand(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:ERC4626Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:51",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "decimals()",
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "maxMint(address)",
          "maxWithdraw(address)",
          "maxRedeem(address)",
          "previewDeposit(uint256)",
          "previewMint(uint256)",
          "previewWithdraw(uint256)",
          "previewRedeem(uint256)",
          "deposit(uint256,address)",
          "mint(uint256,address)",
          "withdraw(uint256,address,address)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1173": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(ERC4626Storage)387_storage": {
              "label": "struct ERC4626Upgradeable.ERC4626Storage",
              "members": [
                {
                  "label": "_asset",
                  "type": "t_contract(IERC20)1173",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_underlyingDecimals",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC4626": [
              {
                "contract": "ERC4626Upgradeable",
                "label": "_asset",
                "type": "t_contract(IERC20)1173",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:56",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC4626Upgradeable",
                "label": "_underlyingDecimals",
                "type": "t_uint8",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:57",
                "offset": 20,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)755_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC1363.sol:IERC1363": {
        "src": "@openzeppelin/contracts/interfaces/IERC1363.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFromAndCall(address,address,uint256)",
          "transferFromAndCall(address,address,uint256,bytes)",
          "approveAndCall(address,uint256)",
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/Panic.sol:Panic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/Vault.sol:Vault": {
        "src": "contracts/Vault.sol:30",
        "version": {
          "withMetadata": "d53527a37758b602fd9c011d0fc94a79cb087b37c5432560d68ebe100241f77c",
          "withoutMetadata": "00d0a4efabdba76aa32776ba194f43d39070673e89ea56a60ec7bc2cc7bcfd60",
          "linkedWithoutMetadata": "00d0a4efabdba76aa32776ba194f43d39070673e89ea56a60ec7bc2cc7bcfd60"
        },
        "inherit": [
          "contracts/utils/FeeLogic.sol:IVaultMinter",
          "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset",
          "contracts/interfaces/IVault.sol:IVault",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:ERC4626Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "contracts/utils/FeeLogic.sol:FeeLogic",
          "contracts/utils/VaultLogic.sol:VaultLogic",
          "contracts/utils/AssetLogic.sol:AssetLogic",
          "@openzeppelin/contracts/utils/math/Math.sol:Math"
        ],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "assetBalance(address)",
          "decodeRevertReason(bytes)",
          "totalAssets()",
          "maxDeposit(address)",
          "maxWithdraw(address)",
          "previewDeposit(uint256)",
          "previewWithdraw(uint256)",
          "deposit(uint256,address)",
          "withdraw(uint256,address,address)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "mint(address,uint256)",
          "convertToShares(uint256)",
          "_updateAssetPricesExternal()",
          "addSupportedAsset(address)",
          "batchAddSupportedAssets(address[])",
          "removeSupportedAsset(address)",
          "addSupportedPlatform(string)",
          "removeSupportedPlatform(string)",
          "updateFees(uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "updateOracleProtection(uint256,uint256)",
          "setEmergencyOracleMode(bool)",
          "setEmergencyPrice(address,uint256)",
          "pause()",
          "unpause()",
          "()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "getVaultAssetBreakdown()",
          "convertAssetValueToUnderlying(address,uint256)",
          "getAutoRealizationStatus()",
          "previewWithdrawalImpact(uint256)",
          "shouldManagerRealize()",
          "version()",
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)",
          "previewWithdrawalAfterFees(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/Vault.sol:208",
            "expectedLinearization": [
              "ERC20Upgradeable",
              "ERC4626Upgradeable",
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable"
            ],
            "foundOrder": [
              "ERC4626Upgradeable",
              "ERC20Upgradeable",
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable"
            ]
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "underlyingAsset",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:97"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:98"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:99"
            },
            {
              "label": "protocolTreasury",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:100"
            },
            {
              "label": "currentEpoch",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:103"
            },
            {
              "label": "vaultState",
              "offset": 0,
              "slot": "5",
              "type": "t_enum(VaultState)10527",
              "contract": "Vault",
              "src": "contracts/Vault.sol:104"
            },
            {
              "label": "epochStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:105"
            },
            {
              "label": "fundraisingDuration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:106"
            },
            {
              "label": "minFundraisingAmount",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:107"
            },
            {
              "label": "managerFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:111"
            },
            {
              "label": "withdrawalFee",
              "offset": 2,
              "slot": "9",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:112"
            },
            {
              "label": "_totalAssets",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:125"
            },
            {
              "label": "lastRealizationTime",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:126"
            },
            {
              "label": "maxCapacity",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:127"
            },
            {
              "label": "minDepositAmount",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:128"
            },
            {
              "label": "realizationCooldown",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:131"
            },
            {
              "label": "maxPriceDeviationBps",
              "offset": 0,
              "slot": "15",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:132"
            },
            {
              "label": "emergencyOracleMode",
              "offset": 2,
              "slot": "15",
              "type": "t_bool",
              "contract": "Vault",
              "src": "contracts/Vault.sol:133"
            },
            {
              "label": "lastAssetPrices",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:135"
            },
            {
              "label": "currentRealization",
              "offset": 0,
              "slot": "17",
              "type": "t_struct(RealizationState)6855_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:145"
            },
            {
              "label": "supportedAssets",
              "offset": 0,
              "slot": "22",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:148"
            },
            {
              "label": "assetPosition",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:149"
            },
            {
              "label": "isAssetSupported",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:150"
            },
            {
              "label": "supportedPlatforms",
              "offset": 0,
              "slot": "25",
              "type": "t_array(t_string_storage)dyn_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:153"
            },
            {
              "label": "isPlatformSupported",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_string_memory_ptr,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:154"
            },
            {
              "label": "authorizedStrategies",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:157"
            },
            {
              "label": "epochStartAssets",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:160"
            },
            {
              "label": "epochEndAssets",
              "offset": 0,
              "slot": "29",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:161"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1173": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(ERC4626Storage)387_storage": {
              "label": "struct ERC4626Upgradeable.ERC4626Storage",
              "members": [
                {
                  "label": "_asset",
                  "type": "t_contract(IERC20)1173",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_underlyingDecimals",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)755_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]",
              "numberOfBytes": "32"
            },
            "t_enum(VaultState)10527": {
              "label": "enum IVault.VaultState",
              "members": [
                "FUNDRAISING",
                "LIVE"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_bool)": {
              "label": "mapping(string => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RealizationState)6855_storage": {
              "label": "struct Vault.RealizationState",
              "members": [
                {
                  "label": "isRealized",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "realizedAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "preRealizationValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "totalFeesExtracted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC4626": [
              {
                "contract": "ERC4626Upgradeable",
                "label": "_asset",
                "type": "t_contract(IERC20)1173",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:56",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC4626Upgradeable",
                "label": "_underlyingDecimals",
                "type": "t_uint8",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:57",
                "offset": 20,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IAssetHandler.sol:IAssetHandler": {
        "src": "contracts/interfaces/IAssetHandler.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addAsset(address,uint16,address)",
          "addAssets(struct IAssetHandler.Asset[])",
          "removeAsset(address)",
          "priceAggregators(address)",
          "assetTypes(address)",
          "getUSDPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo": {
        "src": "contracts/interfaces/IHasGuardInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset": {
        "src": "contracts/interfaces/IHasSupportedAsset.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:8",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "addSupportedAsset(address)",
          "batchAddSupportedAssets(address[])",
          "removeSupportedAsset(address)",
          "updateFees(uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "pause()",
          "unpause()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "getVaultAssetBreakdown()",
          "factory()",
          "manager()",
          "underlyingAsset()",
          "protocolTreasury()",
          "currentEpoch()",
          "vaultState()",
          "epochStartTime()",
          "fundraisingDuration()",
          "minFundraisingAmount()",
          "managerFee()",
          "withdrawalFee()",
          "maxCapacity()",
          "minDepositAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVaultFactory.sol:IVaultFactory": {
        "src": "contracts/interfaces/IVaultFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenType(address)",
          "getAssetType(address)",
          "getDeployedVaults()",
          "getVaultCount()",
          "getVaultsByManager(address)",
          "getVaultInfo(address)",
          "getDetailedVaultInfo(address)",
          "getFactoryStats()",
          "isValidVault(address)",
          "getVaultManager(address)",
          "isAssetWhitelisted(address)",
          "version()",
          "emergencyRecoverAsset(address,uint256)",
          "setTreasuryAddress(address)",
          "setAdminAddress(address)",
          "proxyAdmin()",
          "vaultImplementation()",
          "implementationVersion()",
          "deployedVaults(uint256)",
          "isVault(address)",
          "vaultManager(address)",
          "vaultIndex(address)",
          "underlyingAssetAllowed(address)",
          "tokenType(address)",
          "whitelistedAssets(uint256)",
          "assetIndex(address)",
          "maxCapacityLimit()",
          "minCapacityLimit()",
          "creationFee()",
          "treasury()",
          "admin()",
          "owner()",
          "paused()",
          "governance()",
          "getAssetHandler()",
          "vaultStorageVersion()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard": {
        "src": "contracts/interfaces/guards/IAssetGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/ITxTrackingGuard.sol:ITxTrackingGuard": {
        "src": "contracts/interfaces/guards/ITxTrackingGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isTxTrackingGuard()",
          "afterTxGuard(address,address,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/AssetLogic.sol:AssetLogic": {
        "src": "contracts/utils/AssetLogic.sol:30",
        "version": {
          "withMetadata": "d50d1ab49190d6f833b1124842ebfa703a45a40534912706a83af295af746662",
          "withoutMetadata": "7fae6f8b65a143a4c7bccdd935e62da265a5d4930269d0c232bedf1ca35447b2",
          "linkedWithoutMetadata": "7fae6f8b65a143a4c7bccdd935e62da265a5d4930269d0c232bedf1ca35447b2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/FeeLogic.sol:FeeLogic": {
        "src": "contracts/utils/FeeLogic.sol:32",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/FeeLogic.sol:IVaultMinter": {
        "src": "contracts/utils/FeeLogic.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "convertToShares(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/VaultLogic.sol:VaultLogic": {
        "src": "contracts/utils/VaultLogic.sol:15",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:ERC4626Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:51",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "decimals()",
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "maxMint(address)",
          "maxWithdraw(address)",
          "maxRedeem(address)",
          "previewDeposit(uint256)",
          "previewMint(uint256)",
          "previewWithdraw(uint256)",
          "previewRedeem(uint256)",
          "deposit(uint256,address)",
          "mint(uint256,address)",
          "withdraw(uint256,address,address)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1173": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(ERC4626Storage)387_storage": {
              "label": "struct ERC4626Upgradeable.ERC4626Storage",
              "members": [
                {
                  "label": "_asset",
                  "type": "t_contract(IERC20)1173",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_underlyingDecimals",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC4626": [
              {
                "contract": "ERC4626Upgradeable",
                "label": "_asset",
                "type": "t_contract(IERC20)1173",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:56",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC4626Upgradeable",
                "label": "_underlyingDecimals",
                "type": "t_uint8",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:57",
                "offset": 20,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)755_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC1363.sol:IERC1363": {
        "src": "@openzeppelin/contracts/interfaces/IERC1363.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFromAndCall(address,address,uint256)",
          "transferFromAndCall(address,address,uint256,bytes)",
          "approveAndCall(address,uint256)",
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/Panic.sol:Panic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/Vault.sol:Vault": {
        "src": "contracts/Vault.sol:30",
        "version": {
          "withMetadata": "d53527a37758b602fd9c011d0fc94a79cb087b37c5432560d68ebe100241f77c",
          "withoutMetadata": "00d0a4efabdba76aa32776ba194f43d39070673e89ea56a60ec7bc2cc7bcfd60",
          "linkedWithoutMetadata": "00d0a4efabdba76aa32776ba194f43d39070673e89ea56a60ec7bc2cc7bcfd60"
        },
        "inherit": [
          "contracts/utils/FeeLogic.sol:IVaultMinter",
          "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset",
          "contracts/interfaces/IVault.sol:IVault",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:ERC4626Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "contracts/utils/FeeLogic.sol:FeeLogic",
          "contracts/utils/VaultLogic.sol:VaultLogic",
          "contracts/utils/AssetLogic.sol:AssetLogic",
          "@openzeppelin/contracts/utils/math/Math.sol:Math"
        ],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "assetBalance(address)",
          "decodeRevertReason(bytes)",
          "totalAssets()",
          "maxDeposit(address)",
          "maxWithdraw(address)",
          "previewDeposit(uint256)",
          "previewWithdraw(uint256)",
          "deposit(uint256,address)",
          "withdraw(uint256,address,address)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "mint(address,uint256)",
          "convertToShares(uint256)",
          "_updateAssetPricesExternal()",
          "addSupportedAsset(address)",
          "batchAddSupportedAssets(address[])",
          "removeSupportedAsset(address)",
          "addSupportedPlatform(string)",
          "removeSupportedPlatform(string)",
          "updateFees(uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "updateOracleProtection(uint256,uint256)",
          "setEmergencyOracleMode(bool)",
          "setEmergencyPrice(address,uint256)",
          "pause()",
          "unpause()",
          "()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "getVaultAssetBreakdown()",
          "convertAssetValueToUnderlying(address,uint256)",
          "getAutoRealizationStatus()",
          "previewWithdrawalImpact(uint256)",
          "shouldManagerRealize()",
          "version()",
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)",
          "previewWithdrawalAfterFees(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/Vault.sol:208",
            "expectedLinearization": [
              "ERC20Upgradeable",
              "ERC4626Upgradeable",
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable"
            ],
            "foundOrder": [
              "ERC4626Upgradeable",
              "ERC20Upgradeable",
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable"
            ]
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "underlyingAsset",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:97"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:98"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:99"
            },
            {
              "label": "protocolTreasury",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:100"
            },
            {
              "label": "currentEpoch",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:103"
            },
            {
              "label": "vaultState",
              "offset": 0,
              "slot": "5",
              "type": "t_enum(VaultState)10529",
              "contract": "Vault",
              "src": "contracts/Vault.sol:104"
            },
            {
              "label": "epochStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:105"
            },
            {
              "label": "fundraisingDuration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:106"
            },
            {
              "label": "minFundraisingAmount",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:107"
            },
            {
              "label": "managerFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:111"
            },
            {
              "label": "withdrawalFee",
              "offset": 2,
              "slot": "9",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:112"
            },
            {
              "label": "_totalAssets",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:125"
            },
            {
              "label": "lastRealizationTime",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:126"
            },
            {
              "label": "maxCapacity",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:127"
            },
            {
              "label": "minDepositAmount",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:128"
            },
            {
              "label": "realizationCooldown",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:131"
            },
            {
              "label": "maxPriceDeviationBps",
              "offset": 0,
              "slot": "15",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:132"
            },
            {
              "label": "emergencyOracleMode",
              "offset": 2,
              "slot": "15",
              "type": "t_bool",
              "contract": "Vault",
              "src": "contracts/Vault.sol:133"
            },
            {
              "label": "lastAssetPrices",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:135"
            },
            {
              "label": "currentRealization",
              "offset": 0,
              "slot": "17",
              "type": "t_struct(RealizationState)6855_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:145"
            },
            {
              "label": "supportedAssets",
              "offset": 0,
              "slot": "22",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:148"
            },
            {
              "label": "assetPosition",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:149"
            },
            {
              "label": "isAssetSupported",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:150"
            },
            {
              "label": "supportedPlatforms",
              "offset": 0,
              "slot": "25",
              "type": "t_array(t_string_storage)dyn_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:153"
            },
            {
              "label": "isPlatformSupported",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_string_memory_ptr,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:154"
            },
            {
              "label": "authorizedStrategies",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:157"
            },
            {
              "label": "epochStartAssets",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:160"
            },
            {
              "label": "epochEndAssets",
              "offset": 0,
              "slot": "29",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:161"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1173": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(ERC4626Storage)387_storage": {
              "label": "struct ERC4626Upgradeable.ERC4626Storage",
              "members": [
                {
                  "label": "_asset",
                  "type": "t_contract(IERC20)1173",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_underlyingDecimals",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)755_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]",
              "numberOfBytes": "32"
            },
            "t_enum(VaultState)10529": {
              "label": "enum IVault.VaultState",
              "members": [
                "FUNDRAISING",
                "LIVE"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_bool)": {
              "label": "mapping(string => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RealizationState)6855_storage": {
              "label": "struct Vault.RealizationState",
              "members": [
                {
                  "label": "isRealized",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "realizedAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "preRealizationValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "totalFeesExtracted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC4626": [
              {
                "contract": "ERC4626Upgradeable",
                "label": "_asset",
                "type": "t_contract(IERC20)1173",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:56",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC4626Upgradeable",
                "label": "_underlyingDecimals",
                "type": "t_uint8",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:57",
                "offset": 20,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IAssetHandler.sol:IAssetHandler": {
        "src": "contracts/interfaces/IAssetHandler.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addAsset(address,uint16,address)",
          "addAssets(struct IAssetHandler.Asset[])",
          "removeAsset(address)",
          "priceAggregators(address)",
          "assetTypes(address)",
          "getUSDPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo": {
        "src": "contracts/interfaces/IHasGuardInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset": {
        "src": "contracts/interfaces/IHasSupportedAsset.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:8",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "addSupportedAsset(address)",
          "batchAddSupportedAssets(address[])",
          "removeSupportedAsset(address)",
          "updateFees(uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "pause()",
          "unpause()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "getVaultAssetBreakdown()",
          "factory()",
          "manager()",
          "underlyingAsset()",
          "protocolTreasury()",
          "currentEpoch()",
          "vaultState()",
          "epochStartTime()",
          "fundraisingDuration()",
          "minFundraisingAmount()",
          "managerFee()",
          "withdrawalFee()",
          "maxCapacity()",
          "minDepositAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVaultFactory.sol:IVaultFactory": {
        "src": "contracts/interfaces/IVaultFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenType(address)",
          "getAssetType(address)",
          "getDeployedVaults()",
          "getVaultCount()",
          "getVaultsByManager(address)",
          "getVaultInfo(address)",
          "getDetailedVaultInfo(address)",
          "getFactoryStats()",
          "isValidVault(address)",
          "getVaultManager(address)",
          "isAssetWhitelisted(address)",
          "version()",
          "emergencyRecoverAsset(address,uint256)",
          "setTreasuryAddress(address)",
          "setAdminAddress(address)",
          "proxyAdmin()",
          "vaultImplementation()",
          "implementationVersion()",
          "deployedVaults(uint256)",
          "isVault(address)",
          "vaultManager(address)",
          "vaultIndex(address)",
          "underlyingAssetAllowed(address)",
          "tokenType(address)",
          "whitelistedAssets(uint256)",
          "assetIndex(address)",
          "maxCapacityLimit()",
          "minCapacityLimit()",
          "creationFee()",
          "treasury()",
          "admin()",
          "owner()",
          "paused()",
          "governance()",
          "getAssetHandler()",
          "vaultStorageVersion()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard": {
        "src": "contracts/interfaces/guards/IAssetGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/ITxTrackingGuard.sol:ITxTrackingGuard": {
        "src": "contracts/interfaces/guards/ITxTrackingGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isTxTrackingGuard()",
          "afterTxGuard(address,address,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/AssetLogic.sol:AssetLogic": {
        "src": "contracts/utils/AssetLogic.sol:30",
        "version": {
          "withMetadata": "d50d1ab49190d6f833b1124842ebfa703a45a40534912706a83af295af746662",
          "withoutMetadata": "7fae6f8b65a143a4c7bccdd935e62da265a5d4930269d0c232bedf1ca35447b2",
          "linkedWithoutMetadata": "7fae6f8b65a143a4c7bccdd935e62da265a5d4930269d0c232bedf1ca35447b2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/FeeLogic.sol:FeeLogic": {
        "src": "contracts/utils/FeeLogic.sol:32",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/FeeLogic.sol:IVaultMinter": {
        "src": "contracts/utils/FeeLogic.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "convertToShares(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/VaultLogic.sol:VaultLogic": {
        "src": "contracts/utils/VaultLogic.sol:15",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:ERC4626Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:51",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "decimals()",
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "maxMint(address)",
          "maxWithdraw(address)",
          "maxRedeem(address)",
          "previewDeposit(uint256)",
          "previewMint(uint256)",
          "previewWithdraw(uint256)",
          "previewRedeem(uint256)",
          "deposit(uint256,address)",
          "mint(uint256,address)",
          "withdraw(uint256,address,address)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1690": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(ERC4626Storage)387_storage": {
              "label": "struct ERC4626Upgradeable.ERC4626Storage",
              "members": [
                {
                  "label": "_asset",
                  "type": "t_contract(IERC20)1690",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_underlyingDecimals",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC4626": [
              {
                "contract": "ERC4626Upgradeable",
                "label": "_asset",
                "type": "t_contract(IERC20)1690",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:56",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC4626Upgradeable",
                "label": "_underlyingDecimals",
                "type": "t_uint8",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:57",
                "offset": 20,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)755_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils"
        ],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(EIP712Storage)824_storage": {
              "label": "struct EIP712Upgradeable.EIP712Storage",
              "members": [
                {
                  "label": "_hashedName",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_hashedVersion",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_version",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44",
                "offset": 0,
                "slot": "3"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC1363.sol:IERC1363": {
        "src": "@openzeppelin/contracts/interfaces/IERC1363.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFromAndCall(address,address,uint256)",
          "transferFromAndCall(address,address,uint256,bytes)",
          "approveAndCall(address,uint256)",
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267": {
        "src": "@openzeppelin/contracts/interfaces/IERC5267.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "db5df44becafaf3bbe1dce50a4e5b800698e29607bbd33858e8d63b703068088",
          "withoutMetadata": "7fb5ed68306b380728eee4483ffc46446c67b9fc8cc571f1349f0ca48ad2c9bf",
          "linkedWithoutMetadata": "7fb5ed68306b380728eee4483ffc46446c67b9fc8cc571f1349f0ca48ad2c9bf"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:26"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:15",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "613c0acf87bfe4d12cc4143a0d439ad70fe05bb5fa7359d9fd382a60ce6db3d6",
          "withoutMetadata": "156db0c1c0f718defa5eaa534156f98e88c355328c2ed215498ced894c984c10",
          "linkedWithoutMetadata": "156db0c1c0f718defa5eaa534156f98e88c355328c2ed215498ced894c984c10"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProxyAdmin",
            "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:17",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:62",
        "version": {
          "withMetadata": "d8485658017fc48fe600503bd704240239a8fb5a4dfc6186c57af53c2dd66709",
          "withoutMetadata": "d8485658017fc48fe600503bd704240239a8fb5a4dfc6186c57af53c2dd66709",
          "linkedWithoutMetadata": "d8485658017fc48fe600503bd704240239a8fb5a4dfc6186c57af53c2dd66709"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:79"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_admin",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:67"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1566_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:11",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin/contracts/utils/Errors.sol:14",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:13",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils": {
        "src": "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:15",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/Panic.sol:Panic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:11",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib": {
        "src": "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:11",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@uniswap/v3-periphery/contracts/libraries/Path.sol:Path": {
        "src": "@uniswap/v3-periphery/contracts/libraries/Path.sol:7",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/Vault.sol:Vault": {
        "src": "contracts/Vault.sol:30",
        "version": {
          "withMetadata": "d53527a37758b602fd9c011d0fc94a79cb087b37c5432560d68ebe100241f77c",
          "withoutMetadata": "00d0a4efabdba76aa32776ba194f43d39070673e89ea56a60ec7bc2cc7bcfd60",
          "linkedWithoutMetadata": "00d0a4efabdba76aa32776ba194f43d39070673e89ea56a60ec7bc2cc7bcfd60"
        },
        "inherit": [
          "contracts/utils/FeeLogic.sol:IVaultMinter",
          "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset",
          "contracts/interfaces/IVault.sol:IVault",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:ERC4626Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "contracts/utils/FeeLogic.sol:FeeLogic",
          "contracts/utils/VaultLogic.sol:VaultLogic",
          "contracts/utils/AssetLogic.sol:AssetLogic",
          "@openzeppelin/contracts/utils/math/Math.sol:Math"
        ],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "assetBalance(address)",
          "decodeRevertReason(bytes)",
          "totalAssets()",
          "maxDeposit(address)",
          "maxWithdraw(address)",
          "previewDeposit(uint256)",
          "previewWithdraw(uint256)",
          "deposit(uint256,address)",
          "withdraw(uint256,address,address)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "mint(address,uint256)",
          "convertToShares(uint256)",
          "_updateAssetPricesExternal()",
          "addSupportedAsset(address)",
          "batchAddSupportedAssets(address[])",
          "removeSupportedAsset(address)",
          "addSupportedPlatform(string)",
          "removeSupportedPlatform(string)",
          "updateFees(uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "updateOracleProtection(uint256,uint256)",
          "setEmergencyOracleMode(bool)",
          "setEmergencyPrice(address,uint256)",
          "pause()",
          "unpause()",
          "()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "getVaultAssetBreakdown()",
          "convertAssetValueToUnderlying(address,uint256)",
          "getAutoRealizationStatus()",
          "previewWithdrawalImpact(uint256)",
          "shouldManagerRealize()",
          "version()",
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)",
          "previewWithdrawalAfterFees(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/Vault.sol:208",
            "expectedLinearization": [
              "ERC20Upgradeable",
              "ERC4626Upgradeable",
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable"
            ],
            "foundOrder": [
              "ERC4626Upgradeable",
              "ERC20Upgradeable",
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable"
            ]
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "underlyingAsset",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:97"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:98"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:99"
            },
            {
              "label": "protocolTreasury",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:100"
            },
            {
              "label": "currentEpoch",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:103"
            },
            {
              "label": "vaultState",
              "offset": 0,
              "slot": "5",
              "type": "t_enum(VaultState)18495",
              "contract": "Vault",
              "src": "contracts/Vault.sol:104"
            },
            {
              "label": "epochStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:105"
            },
            {
              "label": "fundraisingDuration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:106"
            },
            {
              "label": "minFundraisingAmount",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:107"
            },
            {
              "label": "managerFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:111"
            },
            {
              "label": "withdrawalFee",
              "offset": 2,
              "slot": "9",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:112"
            },
            {
              "label": "_totalAssets",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:125"
            },
            {
              "label": "lastRealizationTime",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:126"
            },
            {
              "label": "maxCapacity",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:127"
            },
            {
              "label": "minDepositAmount",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:128"
            },
            {
              "label": "realizationCooldown",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:131"
            },
            {
              "label": "maxPriceDeviationBps",
              "offset": 0,
              "slot": "15",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:132"
            },
            {
              "label": "emergencyOracleMode",
              "offset": 2,
              "slot": "15",
              "type": "t_bool",
              "contract": "Vault",
              "src": "contracts/Vault.sol:133"
            },
            {
              "label": "lastAssetPrices",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:135"
            },
            {
              "label": "currentRealization",
              "offset": 0,
              "slot": "17",
              "type": "t_struct(RealizationState)10525_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:145"
            },
            {
              "label": "supportedAssets",
              "offset": 0,
              "slot": "22",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:148"
            },
            {
              "label": "assetPosition",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:149"
            },
            {
              "label": "isAssetSupported",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:150"
            },
            {
              "label": "supportedPlatforms",
              "offset": 0,
              "slot": "25",
              "type": "t_array(t_string_storage)dyn_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:153"
            },
            {
              "label": "isPlatformSupported",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_string_memory_ptr,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:154"
            },
            {
              "label": "authorizedStrategies",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:157"
            },
            {
              "label": "epochStartAssets",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:160"
            },
            {
              "label": "epochEndAssets",
              "offset": 0,
              "slot": "29",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:161"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1690": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(ERC4626Storage)387_storage": {
              "label": "struct ERC4626Upgradeable.ERC4626Storage",
              "members": [
                {
                  "label": "_asset",
                  "type": "t_contract(IERC20)1690",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_underlyingDecimals",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)755_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]",
              "numberOfBytes": "32"
            },
            "t_enum(VaultState)18495": {
              "label": "enum IVault.VaultState",
              "members": [
                "FUNDRAISING",
                "LIVE"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_bool)": {
              "label": "mapping(string => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RealizationState)10525_storage": {
              "label": "struct Vault.RealizationState",
              "members": [
                {
                  "label": "isRealized",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "realizedAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "preRealizationValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "totalFeesExtracted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC4626": [
              {
                "contract": "ERC4626Upgradeable",
                "label": "_asset",
                "type": "t_contract(IERC20)1690",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:56",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC4626Upgradeable",
                "label": "_underlyingDecimals",
                "type": "t_uint8",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:57",
                "offset": 20,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/VaultFactory.sol:VaultFactory": {
        "src": "contracts/VaultFactory.sol:71",
        "version": {
          "withMetadata": "f1b2153b006fcb311c94fa3aa46429b8b4ce8e3ad929d5fd5a66fd09efb91ae5",
          "withoutMetadata": "745dcdf76d88c302fe9de47097e61bbf49090702724bce5d3d257d026a2ad1c2",
          "linkedWithoutMetadata": "745dcdf76d88c302fe9de47097e61bbf49090702724bce5d3d257d026a2ad1c2"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IHasAssetInfo.sol:IHasAssetInfo",
          "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo",
          "contracts/interfaces/IVaultFactory.sol:IVaultFactory"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "getAdjustedMaxCapacityLimit(address)",
          "getAdjustedMinCapacityLimit(address)",
          "createVault(string,string,address,address,uint256,uint256,uint256)",
          "setAssetWhitelist(address,uint16,bool)",
          "batchSetAssetWhitelist(address[],uint16[],bool[])",
          "getTokenType(address)",
          "getWhitelistedAssets()",
          "setGovernanceAddress(address)",
          "setTreasuryAddress(address)",
          "setAdminAddress(address)",
          "updateVaultFees(address,uint256,uint256)",
          "getAssetHandler()",
          "setAssetHandler(address)",
          "setMaximumSupportedAssetCount(uint256)",
          "getMaximumSupportedAssetCount()",
          "isValidAsset(address)",
          "getAssetPrice(address)",
          "getAssetType(address)",
          "updateVaultImplementation(address)",
          "upgradeVault(address,address)",
          "batchUpgradeVaults(address[],address)",
          "setFactorySettings(uint256,uint256,uint256)",
          "setFactorySettingsInAssetUnits(uint256,uint256,uint256)",
          "getAdjustedCapacityLimits(address)",
          "pause()",
          "unpause()",
          "addUnderlyingAsset(address,uint16)",
          "addWhitelistedAsset(address,uint16)",
          "removeUnderlyingAsset(address)",
          "removeWhitelistedAsset(address)",
          "getUnderlyingAssets()",
          "getUnderlyingAssetCount()",
          "getWhitelistedAssetCount()",
          "isUnderlyingAssetAllowed(address)",
          "isAssetWhitelisted(address)",
          "setGovernanceAddress(bytes32,address)",
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)",
          "hasGuard(address)",
          "getAssetsWithTypes()",
          "getDeployedVaults()",
          "getVaultCount()",
          "getVaultsByManager(address)",
          "getVaultInfo(address)",
          "getDetailedVaultInfo(address)",
          "getFactoryStats()",
          "isValidVault(address)",
          "getVaultManager(address)",
          "addUnderlyingAssetWhitelist(address)",
          "removeUnderlyingAssetWhitelist(address)",
          "setVaultStorageVersion(uint256)",
          "version()",
          "emergencyRecoverAsset(address,uint256)",
          "owner()",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "proxyAdmin",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:85"
            },
            {
              "label": "vaultImplementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:86"
            },
            {
              "label": "implementationVersion",
              "offset": 20,
              "slot": "1",
              "type": "t_uint32",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:87"
            },
            {
              "label": "deployedVaults",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:90"
            },
            {
              "label": "isVault",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:91"
            },
            {
              "label": "vaultManager",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_address)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:92"
            },
            {
              "label": "vaultIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:93"
            },
            {
              "label": "underlyingAssetAllowed",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:96"
            },
            {
              "label": "underlyingAssets",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:97"
            },
            {
              "label": "underlyingAssetIndex",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:98"
            },
            {
              "label": "assetWhitelisted",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:101"
            },
            {
              "label": "tokenType",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint16)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:102"
            },
            {
              "label": "whitelistedAssets",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:103"
            },
            {
              "label": "assetIndex",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:104"
            },
            {
              "label": "governance",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:106"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:107"
            },
            {
              "label": "admin",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:108"
            },
            {
              "label": "_assetHandler",
              "offset": 0,
              "slot": "16",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:110"
            },
            {
              "label": "_maximumSupportedAssetCount",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:111"
            },
            {
              "label": "vaultVersion",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:113"
            },
            {
              "label": "vaultStorageVersion",
              "offset": 0,
              "slot": "19",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:114"
            },
            {
              "label": "maxCapacityLimit",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:117"
            },
            {
              "label": "minCapacityLimit",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:118"
            },
            {
              "label": "creationFee",
              "offset": 0,
              "slot": "22",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:119"
            },
            {
              "label": "governanceAddresses",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:122"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint16)": {
              "label": "mapping(address => uint16)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/asset/ERC20Guard.sol:ERC20Guard": {
        "src": "contracts/guards/asset/ERC20Guard.sol:30",
        "version": {
          "withMetadata": "3cb23725a9ab609686f94ecceaa00264017b202e1df3d9047c7b5fafa003bc06",
          "withoutMetadata": "d0984ba4783a8bad04232921f4cfa48d764a34b1dee1dab9752f9f728e012469",
          "linkedWithoutMetadata": "d0984ba4783a8bad04232921f4cfa48d764a34b1dee1dab9752f9f728e012469"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes",
          "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)",
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "WETH",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ERC20Guard",
              "src": "contracts/guards/asset/ERC20Guard.sol:32"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1566_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/asset/ETHGuard.sol:ETHGuard": {
        "src": "contracts/guards/asset/ETHGuard.sol:33",
        "version": {
          "withMetadata": "a1b726ac81ba38ed16f72d962bff2d54094d49eefb541577b1847652a2448dde",
          "withoutMetadata": "fa531d0f3172bbdbed6554c228aaaad1739e5a431e1bc2b3558a0c54658af477",
          "linkedWithoutMetadata": "fa531d0f3172bbdbed6554c228aaaad1739e5a431e1bc2b3558a0c54658af477"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)",
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "WETH",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ETHGuard",
              "src": "contracts/guards/asset/ETHGuard.sol:34"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1566_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/asset/StETHGuard.sol:IStETH": {
        "src": "contracts/guards/asset/StETHGuard.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPooledEthByShares(uint256)",
          "getSharesByPooledEth(uint256)",
          "getTotalShares()",
          "getTotalPooledEther()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/asset/StETHGuard.sol:StETHGuard": {
        "src": "contracts/guards/asset/StETHGuard.sol:19",
        "version": {
          "withMetadata": "da50bd9e865912fda35d1578be3946f12f213efd5a788071f1754dcd580d5f75",
          "withoutMetadata": "78e8263f7f4eab3d95fd1fbb03fd3aea3affebbf791962a80e438028ac84c7a4",
          "linkedWithoutMetadata": "78e8263f7f4eab3d95fd1fbb03fd3aea3affebbf791962a80e438028ac84c7a4"
        },
        "inherit": [
          "contracts/guards/asset/ERC20Guard.sol:ERC20Guard",
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes",
          "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "getBalance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "WETH",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ERC20Guard",
              "src": "contracts/guards/asset/ERC20Guard.sol:32"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1566_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/platform/AmbientGuard.sol:AmbientGuard": {
        "src": "contracts/guards/platform/AmbientGuard.sol:17",
        "version": {
          "withMetadata": "02d3873912d4b3bdbd4a5a948e2d30b70e8538b60a4da3d51761d3f9fa3a9f79",
          "withoutMetadata": "c7a80cec05b7001baf3df880d8749cc647625b302b59c722ebba567871ce1559",
          "linkedWithoutMetadata": "c7a80cec05b7001baf3df880d8749cc647625b302b59c722ebba567871ce1559"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes",
          "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "platformName",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "AmbientGuard",
              "src": "contracts/guards/platform/AmbientGuard.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1566_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/platform/KyberswapGuard.sol:KyberswapGuard": {
        "src": "contracts/guards/platform/KyberswapGuard.sol:25",
        "version": {
          "withMetadata": "e3ce0b582ff23087bc4c66001f251dbb04b67ec4bd83e7a6d6035e252966307a",
          "withoutMetadata": "bb43280c008dd00d5157f9f98bb9fb10329798dd0fee934ab6475ddf5a7ab00e",
          "linkedWithoutMetadata": "bb43280c008dd00d5157f9f98bb9fb10329798dd0fee934ab6475ddf5a7ab00e"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes",
          "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [
          "@uniswap/v3-periphery/contracts/libraries/Path.sol:Path"
        ],
        "methods": [
          "initialize()",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "platformName",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "KyberswapGuard",
              "src": "contracts/guards/platform/KyberswapGuard.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1566_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IAggregatorV3Interface.sol:IAggregatorV3Interface": {
        "src": "contracts/interfaces/IAggregatorV3Interface.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IAssetHandler.sol:IAssetHandler": {
        "src": "contracts/interfaces/IAssetHandler.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addAsset(address,uint16,address)",
          "addAssets(struct IAssetHandler.Asset[])",
          "removeAsset(address)",
          "priceAggregators(address)",
          "assetTypes(address)",
          "getUSDPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IGovernance.sol:IGovernance": {
        "src": "contracts/interfaces/IGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "contractGuards(address)",
          "assetGuards(uint16)",
          "nameToDestination(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasAssetInfo.sol:IHasAssetInfo": {
        "src": "contracts/interfaces/IHasAssetInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidAsset(address)",
          "getAssetPrice(address)",
          "getAssetType(address)",
          "getMaximumSupportedAssetCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo": {
        "src": "contracts/interfaces/IHasGuardInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasOwnable.sol:IHasOwnable": {
        "src": "contracts/interfaces/IHasOwnable.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasPausable.sol:IHasPausable": {
        "src": "contracts/interfaces/IHasPausable.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPaused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset": {
        "src": "contracts/interfaces/IHasSupportedAsset.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes": {
        "src": "contracts/interfaces/ITransactionTypes.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:8",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "addSupportedAsset(address)",
          "batchAddSupportedAssets(address[])",
          "removeSupportedAsset(address)",
          "updateFees(uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "pause()",
          "unpause()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "getVaultAssetBreakdown()",
          "factory()",
          "manager()",
          "underlyingAsset()",
          "protocolTreasury()",
          "currentEpoch()",
          "vaultState()",
          "epochStartTime()",
          "fundraisingDuration()",
          "minFundraisingAmount()",
          "managerFee()",
          "withdrawalFee()",
          "maxCapacity()",
          "minDepositAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVaultFactory.sol:IVaultFactory": {
        "src": "contracts/interfaces/IVaultFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenType(address)",
          "getAssetType(address)",
          "getDeployedVaults()",
          "getVaultCount()",
          "getVaultsByManager(address)",
          "getVaultInfo(address)",
          "getDetailedVaultInfo(address)",
          "getFactoryStats()",
          "isValidVault(address)",
          "getVaultManager(address)",
          "isAssetWhitelisted(address)",
          "version()",
          "emergencyRecoverAsset(address,uint256)",
          "setTreasuryAddress(address)",
          "setAdminAddress(address)",
          "proxyAdmin()",
          "vaultImplementation()",
          "implementationVersion()",
          "deployedVaults(uint256)",
          "isVault(address)",
          "vaultManager(address)",
          "vaultIndex(address)",
          "underlyingAssetAllowed(address)",
          "tokenType(address)",
          "whitelistedAssets(uint256)",
          "assetIndex(address)",
          "maxCapacityLimit()",
          "minCapacityLimit()",
          "creationFee()",
          "treasury()",
          "admin()",
          "owner()",
          "paused()",
          "governance()",
          "getAssetHandler()",
          "vaultStorageVersion()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IWETH.sol:IWETH": {
        "src": "contracts/interfaces/IWETH.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/ambient/ICrocSwapDex.sol:ICrocSwapDex": {
        "src": "contracts/interfaces/external/ambient/ICrocSwapDex.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userCmd(uint16,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/kyberswap/IMetaAggregationRouterV2.sol:IMetaAggregationRouterV2": {
        "src": "contracts/interfaces/external/kyberswap/IMetaAggregationRouterV2.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swap((address,address,bytes,(address,address,address[],uint256[],address[],uint256[],address,uint256,uint256,uint256,bytes),bytes))",
          "swapSimpleMode(address,(address,address,address[],uint256[],address[],uint256[],address,uint256,uint256,uint256,bytes),bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard": {
        "src": "contracts/interfaces/guards/IAssetGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard": {
        "src": "contracts/interfaces/guards/IPlatformGuard.sol:6",
        "inherit": [
          "contracts/interfaces/guards/IGuard.sol:IGuard"
        ],
        "libraries": [],
        "methods": [
          "platformName()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/ITxTrackingGuard.sol:ITxTrackingGuard": {
        "src": "contracts/interfaces/guards/ITxTrackingGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isTxTrackingGuard()",
          "afterTxGuard(address,address,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/AssetLogic.sol:AssetLogic": {
        "src": "contracts/utils/AssetLogic.sol:30",
        "version": {
          "withMetadata": "d50d1ab49190d6f833b1124842ebfa703a45a40534912706a83af295af746662",
          "withoutMetadata": "7fae6f8b65a143a4c7bccdd935e62da265a5d4930269d0c232bedf1ca35447b2",
          "linkedWithoutMetadata": "7fae6f8b65a143a4c7bccdd935e62da265a5d4930269d0c232bedf1ca35447b2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/FeeLogic.sol:FeeLogic": {
        "src": "contracts/utils/FeeLogic.sol:32",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/FeeLogic.sol:IVaultMinter": {
        "src": "contracts/utils/FeeLogic.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "convertToShares(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/TxDataUtils.sol:TxDataUtils": {
        "src": "contracts/utils/TxDataUtils.sol:20",
        "version": {
          "withMetadata": "8cb004785e763015bdeba03de981235690d55637ba6b96312909c6052b135ff9",
          "withoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb",
          "linkedWithoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb"
        },
        "inherit": [],
        "libraries": [
          "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib"
        ],
        "methods": [
          "getMethod(bytes)",
          "getParams(bytes)",
          "getInput(bytes,uint8)",
          "getBytes(bytes,uint8,uint256)",
          "getArrayLast(bytes,uint8)",
          "getArrayLength(bytes,uint8)",
          "getArrayIndex(bytes,uint8,uint8)",
          "read4left(bytes,uint256)",
          "read32(bytes,uint256,uint256)",
          "convert32toAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/VaultLogic.sol:VaultLogic": {
        "src": "contracts/utils/VaultLogic.sol:15",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:ERC4626Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:51",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "decimals()",
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "maxMint(address)",
          "maxWithdraw(address)",
          "maxRedeem(address)",
          "previewDeposit(uint256)",
          "previewMint(uint256)",
          "previewWithdraw(uint256)",
          "previewRedeem(uint256)",
          "deposit(uint256,address)",
          "mint(uint256,address)",
          "withdraw(uint256,address,address)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1690": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(ERC4626Storage)387_storage": {
              "label": "struct ERC4626Upgradeable.ERC4626Storage",
              "members": [
                {
                  "label": "_asset",
                  "type": "t_contract(IERC20)1690",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_underlyingDecimals",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC4626": [
              {
                "contract": "ERC4626Upgradeable",
                "label": "_asset",
                "type": "t_contract(IERC20)1690",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:56",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC4626Upgradeable",
                "label": "_underlyingDecimals",
                "type": "t_uint8",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:57",
                "offset": 20,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)755_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils"
        ],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(EIP712Storage)824_storage": {
              "label": "struct EIP712Upgradeable.EIP712Storage",
              "members": [
                {
                  "label": "_hashedName",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_hashedVersion",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_version",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44",
                "offset": 0,
                "slot": "3"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC1363.sol:IERC1363": {
        "src": "@openzeppelin/contracts/interfaces/IERC1363.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFromAndCall(address,address,uint256)",
          "transferFromAndCall(address,address,uint256,bytes)",
          "approveAndCall(address,uint256)",
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267": {
        "src": "@openzeppelin/contracts/interfaces/IERC5267.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "db5df44becafaf3bbe1dce50a4e5b800698e29607bbd33858e8d63b703068088",
          "withoutMetadata": "7fb5ed68306b380728eee4483ffc46446c67b9fc8cc571f1349f0ca48ad2c9bf",
          "linkedWithoutMetadata": "7fb5ed68306b380728eee4483ffc46446c67b9fc8cc571f1349f0ca48ad2c9bf"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:26"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:15",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "613c0acf87bfe4d12cc4143a0d439ad70fe05bb5fa7359d9fd382a60ce6db3d6",
          "withoutMetadata": "156db0c1c0f718defa5eaa534156f98e88c355328c2ed215498ced894c984c10",
          "linkedWithoutMetadata": "156db0c1c0f718defa5eaa534156f98e88c355328c2ed215498ced894c984c10"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProxyAdmin",
            "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:17",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:62",
        "version": {
          "withMetadata": "d8485658017fc48fe600503bd704240239a8fb5a4dfc6186c57af53c2dd66709",
          "withoutMetadata": "d8485658017fc48fe600503bd704240239a8fb5a4dfc6186c57af53c2dd66709",
          "linkedWithoutMetadata": "d8485658017fc48fe600503bd704240239a8fb5a4dfc6186c57af53c2dd66709"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:79"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_admin",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:67"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1566_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:11",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin/contracts/utils/Errors.sol:14",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:13",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils": {
        "src": "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:15",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/Panic.sol:Panic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:11",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib": {
        "src": "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:11",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@uniswap/v3-periphery/contracts/libraries/Path.sol:Path": {
        "src": "@uniswap/v3-periphery/contracts/libraries/Path.sol:7",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/Vault.sol:Vault": {
        "src": "contracts/Vault.sol:30",
        "version": {
          "withMetadata": "d53527a37758b602fd9c011d0fc94a79cb087b37c5432560d68ebe100241f77c",
          "withoutMetadata": "00d0a4efabdba76aa32776ba194f43d39070673e89ea56a60ec7bc2cc7bcfd60",
          "linkedWithoutMetadata": "00d0a4efabdba76aa32776ba194f43d39070673e89ea56a60ec7bc2cc7bcfd60"
        },
        "inherit": [
          "contracts/utils/FeeLogic.sol:IVaultMinter",
          "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset",
          "contracts/interfaces/IVault.sol:IVault",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:ERC4626Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "contracts/utils/FeeLogic.sol:FeeLogic",
          "contracts/utils/VaultLogic.sol:VaultLogic",
          "contracts/utils/AssetLogic.sol:AssetLogic",
          "@openzeppelin/contracts/utils/math/Math.sol:Math"
        ],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "assetBalance(address)",
          "decodeRevertReason(bytes)",
          "totalAssets()",
          "maxDeposit(address)",
          "maxWithdraw(address)",
          "previewDeposit(uint256)",
          "previewWithdraw(uint256)",
          "deposit(uint256,address)",
          "withdraw(uint256,address,address)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "mint(address,uint256)",
          "convertToShares(uint256)",
          "_updateAssetPricesExternal()",
          "addSupportedAsset(address)",
          "batchAddSupportedAssets(address[])",
          "removeSupportedAsset(address)",
          "addSupportedPlatform(string)",
          "removeSupportedPlatform(string)",
          "updateFees(uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "updateOracleProtection(uint256,uint256)",
          "setEmergencyOracleMode(bool)",
          "setEmergencyPrice(address,uint256)",
          "pause()",
          "unpause()",
          "()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "getVaultAssetBreakdown()",
          "convertAssetValueToUnderlying(address,uint256)",
          "getAutoRealizationStatus()",
          "previewWithdrawalImpact(uint256)",
          "shouldManagerRealize()",
          "version()",
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)",
          "previewWithdrawalAfterFees(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/Vault.sol:208",
            "expectedLinearization": [
              "ERC20Upgradeable",
              "ERC4626Upgradeable",
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable"
            ],
            "foundOrder": [
              "ERC4626Upgradeable",
              "ERC20Upgradeable",
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable"
            ]
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "underlyingAsset",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:97"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:98"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:99"
            },
            {
              "label": "protocolTreasury",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:100"
            },
            {
              "label": "currentEpoch",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:103"
            },
            {
              "label": "vaultState",
              "offset": 0,
              "slot": "5",
              "type": "t_enum(VaultState)18495",
              "contract": "Vault",
              "src": "contracts/Vault.sol:104"
            },
            {
              "label": "epochStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:105"
            },
            {
              "label": "fundraisingDuration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:106"
            },
            {
              "label": "minFundraisingAmount",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:107"
            },
            {
              "label": "managerFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:111"
            },
            {
              "label": "withdrawalFee",
              "offset": 2,
              "slot": "9",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:112"
            },
            {
              "label": "_totalAssets",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:125"
            },
            {
              "label": "lastRealizationTime",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:126"
            },
            {
              "label": "maxCapacity",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:127"
            },
            {
              "label": "minDepositAmount",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:128"
            },
            {
              "label": "realizationCooldown",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:131"
            },
            {
              "label": "maxPriceDeviationBps",
              "offset": 0,
              "slot": "15",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:132"
            },
            {
              "label": "emergencyOracleMode",
              "offset": 2,
              "slot": "15",
              "type": "t_bool",
              "contract": "Vault",
              "src": "contracts/Vault.sol:133"
            },
            {
              "label": "lastAssetPrices",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:135"
            },
            {
              "label": "currentRealization",
              "offset": 0,
              "slot": "17",
              "type": "t_struct(RealizationState)10525_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:145"
            },
            {
              "label": "supportedAssets",
              "offset": 0,
              "slot": "22",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:148"
            },
            {
              "label": "assetPosition",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:149"
            },
            {
              "label": "isAssetSupported",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:150"
            },
            {
              "label": "supportedPlatforms",
              "offset": 0,
              "slot": "25",
              "type": "t_array(t_string_storage)dyn_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:153"
            },
            {
              "label": "isPlatformSupported",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_string_memory_ptr,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:154"
            },
            {
              "label": "authorizedStrategies",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:157"
            },
            {
              "label": "epochStartAssets",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:160"
            },
            {
              "label": "epochEndAssets",
              "offset": 0,
              "slot": "29",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:161"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1690": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(ERC4626Storage)387_storage": {
              "label": "struct ERC4626Upgradeable.ERC4626Storage",
              "members": [
                {
                  "label": "_asset",
                  "type": "t_contract(IERC20)1690",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_underlyingDecimals",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)755_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]",
              "numberOfBytes": "32"
            },
            "t_enum(VaultState)18495": {
              "label": "enum IVault.VaultState",
              "members": [
                "FUNDRAISING",
                "LIVE"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_bool)": {
              "label": "mapping(string => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RealizationState)10525_storage": {
              "label": "struct Vault.RealizationState",
              "members": [
                {
                  "label": "isRealized",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "realizedAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "preRealizationValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "totalFeesExtracted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC4626": [
              {
                "contract": "ERC4626Upgradeable",
                "label": "_asset",
                "type": "t_contract(IERC20)1690",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:56",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC4626Upgradeable",
                "label": "_underlyingDecimals",
                "type": "t_uint8",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:57",
                "offset": 20,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/VaultFactory.sol:VaultFactory": {
        "src": "contracts/VaultFactory.sol:71",
        "version": {
          "withMetadata": "f1b2153b006fcb311c94fa3aa46429b8b4ce8e3ad929d5fd5a66fd09efb91ae5",
          "withoutMetadata": "745dcdf76d88c302fe9de47097e61bbf49090702724bce5d3d257d026a2ad1c2",
          "linkedWithoutMetadata": "745dcdf76d88c302fe9de47097e61bbf49090702724bce5d3d257d026a2ad1c2"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IHasAssetInfo.sol:IHasAssetInfo",
          "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo",
          "contracts/interfaces/IVaultFactory.sol:IVaultFactory"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "getAdjustedMaxCapacityLimit(address)",
          "getAdjustedMinCapacityLimit(address)",
          "createVault(string,string,address,address,uint256,uint256,uint256)",
          "setAssetWhitelist(address,uint16,bool)",
          "batchSetAssetWhitelist(address[],uint16[],bool[])",
          "getTokenType(address)",
          "getWhitelistedAssets()",
          "setGovernanceAddress(address)",
          "setTreasuryAddress(address)",
          "setAdminAddress(address)",
          "updateVaultFees(address,uint256,uint256)",
          "getAssetHandler()",
          "setAssetHandler(address)",
          "setMaximumSupportedAssetCount(uint256)",
          "getMaximumSupportedAssetCount()",
          "isValidAsset(address)",
          "getAssetPrice(address)",
          "getAssetType(address)",
          "updateVaultImplementation(address)",
          "upgradeVault(address,address)",
          "batchUpgradeVaults(address[],address)",
          "setFactorySettings(uint256,uint256,uint256)",
          "setFactorySettingsInAssetUnits(uint256,uint256,uint256)",
          "getAdjustedCapacityLimits(address)",
          "pause()",
          "unpause()",
          "addUnderlyingAsset(address,uint16)",
          "addWhitelistedAsset(address,uint16)",
          "removeUnderlyingAsset(address)",
          "removeWhitelistedAsset(address)",
          "getUnderlyingAssets()",
          "getUnderlyingAssetCount()",
          "getWhitelistedAssetCount()",
          "isUnderlyingAssetAllowed(address)",
          "isAssetWhitelisted(address)",
          "setGovernanceAddress(bytes32,address)",
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)",
          "hasGuard(address)",
          "getAssetsWithTypes()",
          "getDeployedVaults()",
          "getVaultCount()",
          "getVaultsByManager(address)",
          "getVaultInfo(address)",
          "getDetailedVaultInfo(address)",
          "getFactoryStats()",
          "isValidVault(address)",
          "getVaultManager(address)",
          "addUnderlyingAssetWhitelist(address)",
          "removeUnderlyingAssetWhitelist(address)",
          "setVaultStorageVersion(uint256)",
          "version()",
          "emergencyRecoverAsset(address,uint256)",
          "owner()",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "proxyAdmin",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:85"
            },
            {
              "label": "vaultImplementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:86"
            },
            {
              "label": "implementationVersion",
              "offset": 20,
              "slot": "1",
              "type": "t_uint32",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:87"
            },
            {
              "label": "deployedVaults",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:90"
            },
            {
              "label": "isVault",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:91"
            },
            {
              "label": "vaultManager",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_address)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:92"
            },
            {
              "label": "vaultIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:93"
            },
            {
              "label": "underlyingAssetAllowed",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:96"
            },
            {
              "label": "underlyingAssets",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:97"
            },
            {
              "label": "underlyingAssetIndex",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:98"
            },
            {
              "label": "assetWhitelisted",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:101"
            },
            {
              "label": "tokenType",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint16)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:102"
            },
            {
              "label": "whitelistedAssets",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:103"
            },
            {
              "label": "assetIndex",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:104"
            },
            {
              "label": "governance",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:106"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:107"
            },
            {
              "label": "admin",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:108"
            },
            {
              "label": "_assetHandler",
              "offset": 0,
              "slot": "16",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:110"
            },
            {
              "label": "_maximumSupportedAssetCount",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:111"
            },
            {
              "label": "vaultVersion",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:113"
            },
            {
              "label": "vaultStorageVersion",
              "offset": 0,
              "slot": "19",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:114"
            },
            {
              "label": "maxCapacityLimit",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:117"
            },
            {
              "label": "minCapacityLimit",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:118"
            },
            {
              "label": "creationFee",
              "offset": 0,
              "slot": "22",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:119"
            },
            {
              "label": "governanceAddresses",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:122"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint16)": {
              "label": "mapping(address => uint16)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/asset/ERC20Guard.sol:ERC20Guard": {
        "src": "contracts/guards/asset/ERC20Guard.sol:30",
        "version": {
          "withMetadata": "3cb23725a9ab609686f94ecceaa00264017b202e1df3d9047c7b5fafa003bc06",
          "withoutMetadata": "d0984ba4783a8bad04232921f4cfa48d764a34b1dee1dab9752f9f728e012469",
          "linkedWithoutMetadata": "d0984ba4783a8bad04232921f4cfa48d764a34b1dee1dab9752f9f728e012469"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes",
          "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)",
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "WETH",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ERC20Guard",
              "src": "contracts/guards/asset/ERC20Guard.sol:32"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1566_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/asset/ETHGuard.sol:ETHGuard": {
        "src": "contracts/guards/asset/ETHGuard.sol:33",
        "version": {
          "withMetadata": "a1b726ac81ba38ed16f72d962bff2d54094d49eefb541577b1847652a2448dde",
          "withoutMetadata": "fa531d0f3172bbdbed6554c228aaaad1739e5a431e1bc2b3558a0c54658af477",
          "linkedWithoutMetadata": "fa531d0f3172bbdbed6554c228aaaad1739e5a431e1bc2b3558a0c54658af477"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)",
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "WETH",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ETHGuard",
              "src": "contracts/guards/asset/ETHGuard.sol:34"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1566_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/asset/StETHGuard.sol:IStETH": {
        "src": "contracts/guards/asset/StETHGuard.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPooledEthByShares(uint256)",
          "getSharesByPooledEth(uint256)",
          "getTotalShares()",
          "getTotalPooledEther()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/asset/StETHGuard.sol:StETHGuard": {
        "src": "contracts/guards/asset/StETHGuard.sol:19",
        "version": {
          "withMetadata": "da50bd9e865912fda35d1578be3946f12f213efd5a788071f1754dcd580d5f75",
          "withoutMetadata": "78e8263f7f4eab3d95fd1fbb03fd3aea3affebbf791962a80e438028ac84c7a4",
          "linkedWithoutMetadata": "78e8263f7f4eab3d95fd1fbb03fd3aea3affebbf791962a80e438028ac84c7a4"
        },
        "inherit": [
          "contracts/guards/asset/ERC20Guard.sol:ERC20Guard",
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes",
          "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "getBalance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "WETH",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ERC20Guard",
              "src": "contracts/guards/asset/ERC20Guard.sol:32"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1566_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/platform/AmbientGuard.sol:AmbientGuard": {
        "src": "contracts/guards/platform/AmbientGuard.sol:17",
        "version": {
          "withMetadata": "02d3873912d4b3bdbd4a5a948e2d30b70e8538b60a4da3d51761d3f9fa3a9f79",
          "withoutMetadata": "c7a80cec05b7001baf3df880d8749cc647625b302b59c722ebba567871ce1559",
          "linkedWithoutMetadata": "c7a80cec05b7001baf3df880d8749cc647625b302b59c722ebba567871ce1559"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes",
          "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "platformName",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "AmbientGuard",
              "src": "contracts/guards/platform/AmbientGuard.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1566_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/platform/KyberswapGuard.sol:KyberswapGuard": {
        "src": "contracts/guards/platform/KyberswapGuard.sol:25",
        "version": {
          "withMetadata": "e3ce0b582ff23087bc4c66001f251dbb04b67ec4bd83e7a6d6035e252966307a",
          "withoutMetadata": "bb43280c008dd00d5157f9f98bb9fb10329798dd0fee934ab6475ddf5a7ab00e",
          "linkedWithoutMetadata": "bb43280c008dd00d5157f9f98bb9fb10329798dd0fee934ab6475ddf5a7ab00e"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes",
          "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [
          "@uniswap/v3-periphery/contracts/libraries/Path.sol:Path"
        ],
        "methods": [
          "initialize()",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "platformName",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "KyberswapGuard",
              "src": "contracts/guards/platform/KyberswapGuard.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1566_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IAggregatorV3Interface.sol:IAggregatorV3Interface": {
        "src": "contracts/interfaces/IAggregatorV3Interface.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IAssetHandler.sol:IAssetHandler": {
        "src": "contracts/interfaces/IAssetHandler.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addAsset(address,uint16,address)",
          "addAssets(struct IAssetHandler.Asset[])",
          "removeAsset(address)",
          "priceAggregators(address)",
          "assetTypes(address)",
          "getUSDPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IGovernance.sol:IGovernance": {
        "src": "contracts/interfaces/IGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "contractGuards(address)",
          "assetGuards(uint16)",
          "nameToDestination(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasAssetInfo.sol:IHasAssetInfo": {
        "src": "contracts/interfaces/IHasAssetInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidAsset(address)",
          "getAssetPrice(address)",
          "getAssetType(address)",
          "getMaximumSupportedAssetCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo": {
        "src": "contracts/interfaces/IHasGuardInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasOwnable.sol:IHasOwnable": {
        "src": "contracts/interfaces/IHasOwnable.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasPausable.sol:IHasPausable": {
        "src": "contracts/interfaces/IHasPausable.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPaused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset": {
        "src": "contracts/interfaces/IHasSupportedAsset.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes": {
        "src": "contracts/interfaces/ITransactionTypes.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:8",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "addSupportedAsset(address)",
          "batchAddSupportedAssets(address[])",
          "removeSupportedAsset(address)",
          "updateFees(uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "pause()",
          "unpause()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "getVaultAssetBreakdown()",
          "factory()",
          "manager()",
          "underlyingAsset()",
          "protocolTreasury()",
          "currentEpoch()",
          "vaultState()",
          "epochStartTime()",
          "fundraisingDuration()",
          "minFundraisingAmount()",
          "managerFee()",
          "withdrawalFee()",
          "maxCapacity()",
          "minDepositAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVaultFactory.sol:IVaultFactory": {
        "src": "contracts/interfaces/IVaultFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenType(address)",
          "getAssetType(address)",
          "getDeployedVaults()",
          "getVaultCount()",
          "getVaultsByManager(address)",
          "getVaultInfo(address)",
          "getDetailedVaultInfo(address)",
          "getFactoryStats()",
          "isValidVault(address)",
          "getVaultManager(address)",
          "isAssetWhitelisted(address)",
          "version()",
          "emergencyRecoverAsset(address,uint256)",
          "setTreasuryAddress(address)",
          "setAdminAddress(address)",
          "proxyAdmin()",
          "vaultImplementation()",
          "implementationVersion()",
          "deployedVaults(uint256)",
          "isVault(address)",
          "vaultManager(address)",
          "vaultIndex(address)",
          "underlyingAssetAllowed(address)",
          "tokenType(address)",
          "whitelistedAssets(uint256)",
          "assetIndex(address)",
          "maxCapacityLimit()",
          "minCapacityLimit()",
          "creationFee()",
          "treasury()",
          "admin()",
          "owner()",
          "paused()",
          "governance()",
          "getAssetHandler()",
          "vaultStorageVersion()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IWETH.sol:IWETH": {
        "src": "contracts/interfaces/IWETH.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/ambient/ICrocSwapDex.sol:ICrocSwapDex": {
        "src": "contracts/interfaces/external/ambient/ICrocSwapDex.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userCmd(uint16,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/kyberswap/IMetaAggregationRouterV2.sol:IMetaAggregationRouterV2": {
        "src": "contracts/interfaces/external/kyberswap/IMetaAggregationRouterV2.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swap((address,address,bytes,(address,address,address[],uint256[],address[],uint256[],address,uint256,uint256,uint256,bytes),bytes))",
          "swapSimpleMode(address,(address,address,address[],uint256[],address[],uint256[],address,uint256,uint256,uint256,bytes),bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard": {
        "src": "contracts/interfaces/guards/IAssetGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard": {
        "src": "contracts/interfaces/guards/IPlatformGuard.sol:6",
        "inherit": [
          "contracts/interfaces/guards/IGuard.sol:IGuard"
        ],
        "libraries": [],
        "methods": [
          "platformName()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/ITxTrackingGuard.sol:ITxTrackingGuard": {
        "src": "contracts/interfaces/guards/ITxTrackingGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isTxTrackingGuard()",
          "afterTxGuard(address,address,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/AssetLogic.sol:AssetLogic": {
        "src": "contracts/utils/AssetLogic.sol:30",
        "version": {
          "withMetadata": "d50d1ab49190d6f833b1124842ebfa703a45a40534912706a83af295af746662",
          "withoutMetadata": "7fae6f8b65a143a4c7bccdd935e62da265a5d4930269d0c232bedf1ca35447b2",
          "linkedWithoutMetadata": "7fae6f8b65a143a4c7bccdd935e62da265a5d4930269d0c232bedf1ca35447b2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/FeeLogic.sol:FeeLogic": {
        "src": "contracts/utils/FeeLogic.sol:32",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/FeeLogic.sol:IVaultMinter": {
        "src": "contracts/utils/FeeLogic.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "convertToShares(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/TxDataUtils.sol:TxDataUtils": {
        "src": "contracts/utils/TxDataUtils.sol:20",
        "version": {
          "withMetadata": "8cb004785e763015bdeba03de981235690d55637ba6b96312909c6052b135ff9",
          "withoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb",
          "linkedWithoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb"
        },
        "inherit": [],
        "libraries": [
          "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib"
        ],
        "methods": [
          "getMethod(bytes)",
          "getParams(bytes)",
          "getInput(bytes,uint8)",
          "getBytes(bytes,uint8,uint256)",
          "getArrayLast(bytes,uint8)",
          "getArrayLength(bytes,uint8)",
          "getArrayIndex(bytes,uint8,uint8)",
          "read4left(bytes,uint256)",
          "read32(bytes,uint256,uint256)",
          "convert32toAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/VaultLogic.sol:VaultLogic": {
        "src": "contracts/utils/VaultLogic.sol:15",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)162_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib": {
        "src": "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:11",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/platform/AmbientGuard.sol:AmbientGuard": {
        "src": "contracts/guards/platform/AmbientGuard.sol:17",
        "version": {
          "withMetadata": "02d3873912d4b3bdbd4a5a948e2d30b70e8538b60a4da3d51761d3f9fa3a9f79",
          "withoutMetadata": "c7a80cec05b7001baf3df880d8749cc647625b302b59c722ebba567871ce1559",
          "linkedWithoutMetadata": "c7a80cec05b7001baf3df880d8749cc647625b302b59c722ebba567871ce1559"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes",
          "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "platformName",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "AmbientGuard",
              "src": "contracts/guards/platform/AmbientGuard.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)162_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset": {
        "src": "contracts/interfaces/IHasSupportedAsset.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes": {
        "src": "contracts/interfaces/ITransactionTypes.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:8",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "addSupportedAsset(address)",
          "batchAddSupportedAssets(address[])",
          "removeSupportedAsset(address)",
          "updateFees(uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "pause()",
          "unpause()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "factory()",
          "manager()",
          "underlyingAsset()",
          "protocolTreasury()",
          "currentEpoch()",
          "vaultState()",
          "epochStartTime()",
          "fundraisingDuration()",
          "minFundraisingAmount()",
          "managerFee()",
          "withdrawalFee()",
          "maxCapacity()",
          "minDepositAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/ambient/ICrocSwapDex.sol:ICrocSwapDex": {
        "src": "contracts/interfaces/external/ambient/ICrocSwapDex.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userCmd(uint16,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard": {
        "src": "contracts/interfaces/guards/IPlatformGuard.sol:6",
        "inherit": [
          "contracts/interfaces/guards/IGuard.sol:IGuard"
        ],
        "libraries": [],
        "methods": [
          "platformName()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/TxDataUtils.sol:TxDataUtils": {
        "src": "contracts/utils/TxDataUtils.sol:20",
        "version": {
          "withMetadata": "8cb004785e763015bdeba03de981235690d55637ba6b96312909c6052b135ff9",
          "withoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb",
          "linkedWithoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb"
        },
        "inherit": [],
        "libraries": [
          "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib"
        ],
        "methods": [
          "getMethod(bytes)",
          "getParams(bytes)",
          "getInput(bytes,uint8)",
          "getBytes(bytes,uint8,uint256)",
          "getArrayLast(bytes,uint8)",
          "getArrayLength(bytes,uint8)",
          "getArrayIndex(bytes,uint8,uint8)",
          "read4left(bytes,uint256)",
          "read32(bytes,uint256,uint256)",
          "convert32toAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)162_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib": {
        "src": "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:11",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/platform/AmbientGuard.sol:AmbientGuard": {
        "src": "contracts/guards/platform/AmbientGuard.sol:29",
        "version": {
          "withMetadata": "bc42fc832edb3f7ecf4f8a02940fb06770a76261eda1e21a6feaa672b6feefb8",
          "withoutMetadata": "d973f198602e8cc187dc9fea5af14364497c6dcb223fbb7e2175c320af1a519c",
          "linkedWithoutMetadata": "d973f198602e8cc187dc9fea5af14364497c6dcb223fbb7e2175c320af1a519c"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes",
          "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "platformName",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "AmbientGuard",
              "src": "contracts/guards/platform/AmbientGuard.sol:31"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)162_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset": {
        "src": "contracts/interfaces/IHasSupportedAsset.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes": {
        "src": "contracts/interfaces/ITransactionTypes.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:8",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "addSupportedAsset(address)",
          "batchAddSupportedAssets(address[])",
          "removeSupportedAsset(address)",
          "updateFees(uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "pause()",
          "unpause()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "factory()",
          "manager()",
          "underlyingAsset()",
          "protocolTreasury()",
          "currentEpoch()",
          "vaultState()",
          "epochStartTime()",
          "fundraisingDuration()",
          "minFundraisingAmount()",
          "managerFee()",
          "withdrawalFee()",
          "maxCapacity()",
          "minDepositAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/ambient/ICrocSwapDex.sol:ICrocSwapDex": {
        "src": "contracts/interfaces/external/ambient/ICrocSwapDex.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userCmd(uint16,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard": {
        "src": "contracts/interfaces/guards/IPlatformGuard.sol:6",
        "inherit": [
          "contracts/interfaces/guards/IGuard.sol:IGuard"
        ],
        "libraries": [],
        "methods": [
          "platformName()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/TxDataUtils.sol:TxDataUtils": {
        "src": "contracts/utils/TxDataUtils.sol:20",
        "version": {
          "withMetadata": "8cb004785e763015bdeba03de981235690d55637ba6b96312909c6052b135ff9",
          "withoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb",
          "linkedWithoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb"
        },
        "inherit": [],
        "libraries": [
          "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib"
        ],
        "methods": [
          "getMethod(bytes)",
          "getParams(bytes)",
          "getInput(bytes,uint8)",
          "getBytes(bytes,uint8,uint256)",
          "getArrayLast(bytes,uint8)",
          "getArrayLength(bytes,uint8)",
          "getArrayIndex(bytes,uint8,uint8)",
          "read4left(bytes,uint256)",
          "read32(bytes,uint256,uint256)",
          "convert32toAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)162_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib": {
        "src": "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:11",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/platform/AmbientGuardFix.sol:AmbientGuardFix": {
        "src": "contracts/guards/platform/AmbientGuardFix.sol:29",
        "version": {
          "withMetadata": "e58a7205ddf84aea3152c0e73ce49c00c184f96b21936d1202b51eb6e1a9d6b1",
          "withoutMetadata": "a8b9af7c9bfed006a126aed772376f9c21581df7b61c8a90f59dd0461e6562f5",
          "linkedWithoutMetadata": "a8b9af7c9bfed006a126aed772376f9c21581df7b61c8a90f59dd0461e6562f5"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes",
          "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "platformName",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "AmbientGuardFix",
              "src": "contracts/guards/platform/AmbientGuardFix.sol:31"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)162_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset": {
        "src": "contracts/interfaces/IHasSupportedAsset.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes": {
        "src": "contracts/interfaces/ITransactionTypes.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:8",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "addSupportedAsset(address)",
          "batchAddSupportedAssets(address[])",
          "removeSupportedAsset(address)",
          "updateFees(uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "pause()",
          "unpause()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "factory()",
          "manager()",
          "underlyingAsset()",
          "protocolTreasury()",
          "currentEpoch()",
          "vaultState()",
          "epochStartTime()",
          "fundraisingDuration()",
          "minFundraisingAmount()",
          "managerFee()",
          "withdrawalFee()",
          "maxCapacity()",
          "minDepositAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/ambient/ICrocSwapDex.sol:ICrocSwapDex": {
        "src": "contracts/interfaces/external/ambient/ICrocSwapDex.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userCmd(uint16,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard": {
        "src": "contracts/interfaces/guards/IPlatformGuard.sol:6",
        "inherit": [
          "contracts/interfaces/guards/IGuard.sol:IGuard"
        ],
        "libraries": [],
        "methods": [
          "platformName()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/TxDataUtils.sol:TxDataUtils": {
        "src": "contracts/utils/TxDataUtils.sol:20",
        "version": {
          "withMetadata": "8cb004785e763015bdeba03de981235690d55637ba6b96312909c6052b135ff9",
          "withoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb",
          "linkedWithoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb"
        },
        "inherit": [],
        "libraries": [
          "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib"
        ],
        "methods": [
          "getMethod(bytes)",
          "getParams(bytes)",
          "getInput(bytes,uint8)",
          "getBytes(bytes,uint8,uint256)",
          "getArrayLast(bytes,uint8)",
          "getArrayLength(bytes,uint8)",
          "getArrayIndex(bytes,uint8,uint8)",
          "read4left(bytes,uint256)",
          "read32(bytes,uint256,uint256)",
          "convert32toAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)162_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib": {
        "src": "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:11",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/platform/AmbientGuardUpdated.sol:AmbientGuardUpdated": {
        "src": "contracts/guards/platform/AmbientGuardUpdated.sol:29",
        "version": {
          "withMetadata": "56fb27bd628ffcbfa5be13531435a4a06107170d0b992d28f64bd3c83a2ffb9c",
          "withoutMetadata": "db973d981a1a7a4446f1afa07a98b02c73b4ee7b41fd02d453d07ded4ff3f6da",
          "linkedWithoutMetadata": "db973d981a1a7a4446f1afa07a98b02c73b4ee7b41fd02d453d07ded4ff3f6da"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes",
          "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "platformName",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "AmbientGuardUpdated",
              "src": "contracts/guards/platform/AmbientGuardUpdated.sol:31"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)162_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset": {
        "src": "contracts/interfaces/IHasSupportedAsset.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes": {
        "src": "contracts/interfaces/ITransactionTypes.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:8",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "addSupportedAsset(address)",
          "batchAddSupportedAssets(address[])",
          "removeSupportedAsset(address)",
          "updateFees(uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "pause()",
          "unpause()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "factory()",
          "manager()",
          "underlyingAsset()",
          "protocolTreasury()",
          "currentEpoch()",
          "vaultState()",
          "epochStartTime()",
          "fundraisingDuration()",
          "minFundraisingAmount()",
          "managerFee()",
          "withdrawalFee()",
          "maxCapacity()",
          "minDepositAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/ambient/ICrocSwapDex.sol:ICrocSwapDex": {
        "src": "contracts/interfaces/external/ambient/ICrocSwapDex.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userCmd(uint16,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard": {
        "src": "contracts/interfaces/guards/IPlatformGuard.sol:6",
        "inherit": [
          "contracts/interfaces/guards/IGuard.sol:IGuard"
        ],
        "libraries": [],
        "methods": [
          "platformName()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/TxDataUtils.sol:TxDataUtils": {
        "src": "contracts/utils/TxDataUtils.sol:20",
        "version": {
          "withMetadata": "8cb004785e763015bdeba03de981235690d55637ba6b96312909c6052b135ff9",
          "withoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb",
          "linkedWithoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb"
        },
        "inherit": [],
        "libraries": [
          "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib"
        ],
        "methods": [
          "getMethod(bytes)",
          "getParams(bytes)",
          "getInput(bytes,uint8)",
          "getBytes(bytes,uint8,uint256)",
          "getArrayLast(bytes,uint8)",
          "getArrayLength(bytes,uint8)",
          "getArrayIndex(bytes,uint8,uint8)",
          "read4left(bytes,uint256)",
          "read32(bytes,uint256,uint256)",
          "convert32toAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)162_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib": {
        "src": "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:11",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/platform/AmbientGuardSimple.sol:AmbientGuardSimple": {
        "src": "contracts/guards/platform/AmbientGuardSimple.sol:29",
        "version": {
          "withMetadata": "8554847bd7edff995bcf476e0a5a2762f4835fd4ba5bccb3b390761135d6cda2",
          "withoutMetadata": "64692889fa282628aaec2d8e666bd699722d22e29bfe0860df7a09b9d46b1568",
          "linkedWithoutMetadata": "64692889fa282628aaec2d8e666bd699722d22e29bfe0860df7a09b9d46b1568"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes",
          "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)",
          "dumpBytes(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "platformName",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "AmbientGuardSimple",
              "src": "contracts/guards/platform/AmbientGuardSimple.sol:31"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)162_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset": {
        "src": "contracts/interfaces/IHasSupportedAsset.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes": {
        "src": "contracts/interfaces/ITransactionTypes.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:8",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "addSupportedAsset(address)",
          "batchAddSupportedAssets(address[])",
          "removeSupportedAsset(address)",
          "updateFees(uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "pause()",
          "unpause()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "factory()",
          "manager()",
          "underlyingAsset()",
          "protocolTreasury()",
          "currentEpoch()",
          "vaultState()",
          "epochStartTime()",
          "fundraisingDuration()",
          "minFundraisingAmount()",
          "managerFee()",
          "withdrawalFee()",
          "maxCapacity()",
          "minDepositAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/ambient/ICrocSwapDex.sol:ICrocSwapDex": {
        "src": "contracts/interfaces/external/ambient/ICrocSwapDex.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userCmd(uint16,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard": {
        "src": "contracts/interfaces/guards/IPlatformGuard.sol:6",
        "inherit": [
          "contracts/interfaces/guards/IGuard.sol:IGuard"
        ],
        "libraries": [],
        "methods": [
          "platformName()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/TxDataUtils.sol:TxDataUtils": {
        "src": "contracts/utils/TxDataUtils.sol:20",
        "version": {
          "withMetadata": "8cb004785e763015bdeba03de981235690d55637ba6b96312909c6052b135ff9",
          "withoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb",
          "linkedWithoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb"
        },
        "inherit": [],
        "libraries": [
          "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib"
        ],
        "methods": [
          "getMethod(bytes)",
          "getParams(bytes)",
          "getInput(bytes,uint8)",
          "getBytes(bytes,uint8,uint256)",
          "getArrayLast(bytes,uint8)",
          "getArrayLength(bytes,uint8)",
          "getArrayIndex(bytes,uint8,uint8)",
          "read4left(bytes,uint256)",
          "read32(bytes,uint256,uint256)",
          "convert32toAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)162_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib": {
        "src": "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:11",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/platform/AmbientGuard.sol:AmbientGuard": {
        "src": "contracts/guards/platform/AmbientGuard.sol:29",
        "version": {
          "withMetadata": "f5cd0c65ebfb6c1101197a671a2838c7d0aa7f6b8a76e8035fc836b6a6a79bbd",
          "withoutMetadata": "f92332c36e1397274ff4cf3759583a5264f6ee5745fd38cda507ad3ff92f408c",
          "linkedWithoutMetadata": "f92332c36e1397274ff4cf3759583a5264f6ee5745fd38cda507ad3ff92f408c"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes",
          "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "platformName",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "AmbientGuard",
              "src": "contracts/guards/platform/AmbientGuard.sol:31"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)162_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset": {
        "src": "contracts/interfaces/IHasSupportedAsset.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes": {
        "src": "contracts/interfaces/ITransactionTypes.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:8",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "addSupportedAsset(address)",
          "batchAddSupportedAssets(address[])",
          "removeSupportedAsset(address)",
          "updateFees(uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "pause()",
          "unpause()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "factory()",
          "manager()",
          "underlyingAsset()",
          "protocolTreasury()",
          "currentEpoch()",
          "vaultState()",
          "epochStartTime()",
          "fundraisingDuration()",
          "minFundraisingAmount()",
          "managerFee()",
          "withdrawalFee()",
          "maxCapacity()",
          "minDepositAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/ambient/ICrocSwapDex.sol:ICrocSwapDex": {
        "src": "contracts/interfaces/external/ambient/ICrocSwapDex.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userCmd(uint16,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard": {
        "src": "contracts/interfaces/guards/IPlatformGuard.sol:6",
        "inherit": [
          "contracts/interfaces/guards/IGuard.sol:IGuard"
        ],
        "libraries": [],
        "methods": [
          "platformName()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/TxDataUtils.sol:TxDataUtils": {
        "src": "contracts/utils/TxDataUtils.sol:20",
        "version": {
          "withMetadata": "8cb004785e763015bdeba03de981235690d55637ba6b96312909c6052b135ff9",
          "withoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb",
          "linkedWithoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb"
        },
        "inherit": [],
        "libraries": [
          "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib"
        ],
        "methods": [
          "getMethod(bytes)",
          "getParams(bytes)",
          "getInput(bytes,uint8)",
          "getBytes(bytes,uint8,uint256)",
          "getArrayLast(bytes,uint8)",
          "getArrayLength(bytes,uint8)",
          "getArrayIndex(bytes,uint8,uint8)",
          "read4left(bytes,uint256)",
          "read32(bytes,uint256,uint256)",
          "convert32toAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)162_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib": {
        "src": "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:11",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/platform/AmbientGuardDebug.sol:AmbientGuardDebug": {
        "src": "contracts/guards/platform/AmbientGuardDebug.sol:34",
        "version": {
          "withMetadata": "6c62d65b064bf3f7348d0be2115abc4c69d160032482cf5cd6941217013e7742",
          "withoutMetadata": "5779cd07f43b21135382bfec3339b2fd1d46a0ce9cdc8da8d4d594de463b1479",
          "linkedWithoutMetadata": "5779cd07f43b21135382bfec3339b2fd1d46a0ce9cdc8da8d4d594de463b1479"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes",
          "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)",
          "dumpBytes(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "platformName",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "AmbientGuardDebug",
              "src": "contracts/guards/platform/AmbientGuardDebug.sol:36"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)162_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset": {
        "src": "contracts/interfaces/IHasSupportedAsset.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes": {
        "src": "contracts/interfaces/ITransactionTypes.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:8",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "addSupportedAsset(address)",
          "batchAddSupportedAssets(address[])",
          "removeSupportedAsset(address)",
          "updateFees(uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "pause()",
          "unpause()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "factory()",
          "manager()",
          "underlyingAsset()",
          "protocolTreasury()",
          "currentEpoch()",
          "vaultState()",
          "epochStartTime()",
          "fundraisingDuration()",
          "minFundraisingAmount()",
          "managerFee()",
          "withdrawalFee()",
          "maxCapacity()",
          "minDepositAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/ambient/ICrocSwapDex.sol:ICrocSwapDex": {
        "src": "contracts/interfaces/external/ambient/ICrocSwapDex.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userCmd(uint16,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard": {
        "src": "contracts/interfaces/guards/IPlatformGuard.sol:6",
        "inherit": [
          "contracts/interfaces/guards/IGuard.sol:IGuard"
        ],
        "libraries": [],
        "methods": [
          "platformName()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/TxDataUtils.sol:TxDataUtils": {
        "src": "contracts/utils/TxDataUtils.sol:20",
        "version": {
          "withMetadata": "8cb004785e763015bdeba03de981235690d55637ba6b96312909c6052b135ff9",
          "withoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb",
          "linkedWithoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb"
        },
        "inherit": [],
        "libraries": [
          "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib"
        ],
        "methods": [
          "getMethod(bytes)",
          "getParams(bytes)",
          "getInput(bytes,uint8)",
          "getBytes(bytes,uint8,uint256)",
          "getArrayLast(bytes,uint8)",
          "getArrayLength(bytes,uint8)",
          "getArrayIndex(bytes,uint8,uint8)",
          "read4left(bytes,uint256)",
          "read32(bytes,uint256,uint256)",
          "convert32toAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:ERC4626Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:51",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "decimals()",
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "maxMint(address)",
          "maxWithdraw(address)",
          "maxRedeem(address)",
          "previewDeposit(uint256)",
          "previewMint(uint256)",
          "previewWithdraw(uint256)",
          "previewRedeem(uint256)",
          "deposit(uint256,address)",
          "mint(uint256,address)",
          "withdraw(uint256,address,address)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1173": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(ERC4626Storage)387_storage": {
              "label": "struct ERC4626Upgradeable.ERC4626Storage",
              "members": [
                {
                  "label": "_asset",
                  "type": "t_contract(IERC20)1173",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_underlyingDecimals",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC4626": [
              {
                "contract": "ERC4626Upgradeable",
                "label": "_asset",
                "type": "t_contract(IERC20)1173",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:56",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC4626Upgradeable",
                "label": "_underlyingDecimals",
                "type": "t_uint8",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:57",
                "offset": 20,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)755_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC1363.sol:IERC1363": {
        "src": "@openzeppelin/contracts/interfaces/IERC1363.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFromAndCall(address,address,uint256)",
          "transferFromAndCall(address,address,uint256,bytes)",
          "approveAndCall(address,uint256)",
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/Panic.sol:Panic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/Vault.sol:Vault": {
        "src": "contracts/Vault.sol:30",
        "version": {
          "withMetadata": "ea3af8f2f5280ebea0046b76b48466a658ae12db4c439f2cba11137d23ce62dc",
          "withoutMetadata": "09fe3bd55f802002c738226fe160e6dfe6dd18462b4d3249838ce90d298bb57d",
          "linkedWithoutMetadata": "09fe3bd55f802002c738226fe160e6dfe6dd18462b4d3249838ce90d298bb57d"
        },
        "inherit": [
          "contracts/utils/FeeLogic.sol:IVaultMinter",
          "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset",
          "contracts/interfaces/IVault.sol:IVault",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:ERC4626Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "contracts/utils/FeeLogic.sol:FeeLogic",
          "contracts/utils/VaultLogic.sol:VaultLogic",
          "contracts/utils/AssetLogic.sol:AssetLogic",
          "@openzeppelin/contracts/utils/math/Math.sol:Math"
        ],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "assetBalance(address)",
          "decodeRevertReason(bytes)",
          "totalAssets()",
          "maxDeposit(address)",
          "maxWithdraw(address)",
          "previewDeposit(uint256)",
          "previewWithdraw(uint256)",
          "deposit(uint256,address)",
          "withdraw(uint256,address,address)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "mint(address,uint256)",
          "convertToShares(uint256)",
          "_updateAssetPricesExternal()",
          "addSupportedAsset(address)",
          "batchAddSupportedAssets(address[])",
          "removeSupportedAsset(address)",
          "addSupportedPlatform(string)",
          "removeSupportedPlatform(string)",
          "updateFees(uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "updateOracleProtection(uint256,uint256)",
          "setEmergencyOracleMode(bool)",
          "setEmergencyPrice(address,uint256)",
          "pause()",
          "unpause()",
          "()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "convertAssetValueToUnderlying(address,uint256)",
          "getAutoRealizationStatus()",
          "previewWithdrawalImpact(uint256)",
          "shouldManagerRealize()",
          "version()",
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)",
          "previewWithdrawalAfterFees(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/Vault.sol:208",
            "expectedLinearization": [
              "ERC20Upgradeable",
              "ERC4626Upgradeable",
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable"
            ],
            "foundOrder": [
              "ERC4626Upgradeable",
              "ERC20Upgradeable",
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable"
            ]
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "underlyingAsset",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:97"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:98"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:99"
            },
            {
              "label": "protocolTreasury",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:100"
            },
            {
              "label": "currentEpoch",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:103"
            },
            {
              "label": "vaultState",
              "offset": 0,
              "slot": "5",
              "type": "t_enum(VaultState)10500",
              "contract": "Vault",
              "src": "contracts/Vault.sol:104"
            },
            {
              "label": "epochStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:105"
            },
            {
              "label": "fundraisingDuration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:106"
            },
            {
              "label": "minFundraisingAmount",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:107"
            },
            {
              "label": "managerFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:111"
            },
            {
              "label": "withdrawalFee",
              "offset": 2,
              "slot": "9",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:112"
            },
            {
              "label": "_totalAssets",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:125"
            },
            {
              "label": "lastRealizationTime",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:126"
            },
            {
              "label": "maxCapacity",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:127"
            },
            {
              "label": "minDepositAmount",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:128"
            },
            {
              "label": "realizationCooldown",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:131"
            },
            {
              "label": "maxPriceDeviationBps",
              "offset": 0,
              "slot": "15",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:132"
            },
            {
              "label": "emergencyOracleMode",
              "offset": 2,
              "slot": "15",
              "type": "t_bool",
              "contract": "Vault",
              "src": "contracts/Vault.sol:133"
            },
            {
              "label": "lastAssetPrices",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:135"
            },
            {
              "label": "currentRealization",
              "offset": 0,
              "slot": "17",
              "type": "t_struct(RealizationState)6855_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:145"
            },
            {
              "label": "supportedAssets",
              "offset": 0,
              "slot": "22",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:148"
            },
            {
              "label": "assetPosition",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:149"
            },
            {
              "label": "isAssetSupported",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:150"
            },
            {
              "label": "supportedPlatforms",
              "offset": 0,
              "slot": "25",
              "type": "t_array(t_string_storage)dyn_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:153"
            },
            {
              "label": "isPlatformSupported",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_string_memory_ptr,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:154"
            },
            {
              "label": "authorizedStrategies",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:157"
            },
            {
              "label": "epochStartAssets",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:160"
            },
            {
              "label": "epochEndAssets",
              "offset": 0,
              "slot": "29",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:161"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1173": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(ERC4626Storage)387_storage": {
              "label": "struct ERC4626Upgradeable.ERC4626Storage",
              "members": [
                {
                  "label": "_asset",
                  "type": "t_contract(IERC20)1173",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_underlyingDecimals",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)755_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]",
              "numberOfBytes": "32"
            },
            "t_enum(VaultState)10500": {
              "label": "enum IVault.VaultState",
              "members": [
                "FUNDRAISING",
                "LIVE"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_bool)": {
              "label": "mapping(string => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RealizationState)6855_storage": {
              "label": "struct Vault.RealizationState",
              "members": [
                {
                  "label": "isRealized",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "realizedAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "preRealizationValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "totalFeesExtracted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC4626": [
              {
                "contract": "ERC4626Upgradeable",
                "label": "_asset",
                "type": "t_contract(IERC20)1173",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:56",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC4626Upgradeable",
                "label": "_underlyingDecimals",
                "type": "t_uint8",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:57",
                "offset": 20,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IAssetHandler.sol:IAssetHandler": {
        "src": "contracts/interfaces/IAssetHandler.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addAsset(address,uint16,address)",
          "addAssets(struct IAssetHandler.Asset[])",
          "removeAsset(address)",
          "priceAggregators(address)",
          "assetTypes(address)",
          "getUSDPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo": {
        "src": "contracts/interfaces/IHasGuardInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset": {
        "src": "contracts/interfaces/IHasSupportedAsset.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:8",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "addSupportedAsset(address)",
          "batchAddSupportedAssets(address[])",
          "removeSupportedAsset(address)",
          "updateFees(uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "pause()",
          "unpause()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "factory()",
          "manager()",
          "underlyingAsset()",
          "protocolTreasury()",
          "currentEpoch()",
          "vaultState()",
          "epochStartTime()",
          "fundraisingDuration()",
          "minFundraisingAmount()",
          "managerFee()",
          "withdrawalFee()",
          "maxCapacity()",
          "minDepositAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVaultFactory.sol:IVaultFactory": {
        "src": "contracts/interfaces/IVaultFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenType(address)",
          "getAssetType(address)",
          "getDeployedVaults()",
          "getVaultCount()",
          "getVaultsByManager(address)",
          "getVaultInfo(address)",
          "getDetailedVaultInfo(address)",
          "getFactoryStats()",
          "isValidVault(address)",
          "getVaultManager(address)",
          "isAssetWhitelisted(address)",
          "version()",
          "emergencyRecoverAsset(address,uint256)",
          "setTreasuryAddress(address)",
          "setAdminAddress(address)",
          "proxyAdmin()",
          "vaultImplementation()",
          "implementationVersion()",
          "deployedVaults(uint256)",
          "isVault(address)",
          "vaultManager(address)",
          "vaultIndex(address)",
          "underlyingAssetAllowed(address)",
          "tokenType(address)",
          "whitelistedAssets(uint256)",
          "assetIndex(address)",
          "maxCapacityLimit()",
          "minCapacityLimit()",
          "creationFee()",
          "treasury()",
          "admin()",
          "owner()",
          "paused()",
          "governance()",
          "getAssetHandler()",
          "vaultStorageVersion()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard": {
        "src": "contracts/interfaces/guards/IAssetGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/ITxTrackingGuard.sol:ITxTrackingGuard": {
        "src": "contracts/interfaces/guards/ITxTrackingGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isTxTrackingGuard()",
          "afterTxGuard(address,address,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/AssetLogic.sol:AssetLogic": {
        "src": "contracts/utils/AssetLogic.sol:30",
        "version": {
          "withMetadata": "d50d1ab49190d6f833b1124842ebfa703a45a40534912706a83af295af746662",
          "withoutMetadata": "7fae6f8b65a143a4c7bccdd935e62da265a5d4930269d0c232bedf1ca35447b2",
          "linkedWithoutMetadata": "7fae6f8b65a143a4c7bccdd935e62da265a5d4930269d0c232bedf1ca35447b2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/FeeLogic.sol:FeeLogic": {
        "src": "contracts/utils/FeeLogic.sol:32",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/FeeLogic.sol:IVaultMinter": {
        "src": "contracts/utils/FeeLogic.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "convertToShares(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/VaultLogic.sol:VaultLogic": {
        "src": "contracts/utils/VaultLogic.sol:15",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)162_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib": {
        "src": "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:11",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/platform/AmbientGuard.sol:AmbientGuard": {
        "src": "contracts/guards/platform/AmbientGuard.sol:29",
        "version": {
          "withMetadata": "bc42fc832edb3f7ecf4f8a02940fb06770a76261eda1e21a6feaa672b6feefb8",
          "withoutMetadata": "d973f198602e8cc187dc9fea5af14364497c6dcb223fbb7e2175c320af1a519c",
          "linkedWithoutMetadata": "d973f198602e8cc187dc9fea5af14364497c6dcb223fbb7e2175c320af1a519c"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes",
          "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "platformName",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "AmbientGuard",
              "src": "contracts/guards/platform/AmbientGuard.sol:31"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)162_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset": {
        "src": "contracts/interfaces/IHasSupportedAsset.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes": {
        "src": "contracts/interfaces/ITransactionTypes.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:8",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "addSupportedAsset(address)",
          "batchAddSupportedAssets(address[])",
          "removeSupportedAsset(address)",
          "updateFees(uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "pause()",
          "unpause()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "factory()",
          "manager()",
          "underlyingAsset()",
          "protocolTreasury()",
          "currentEpoch()",
          "vaultState()",
          "epochStartTime()",
          "fundraisingDuration()",
          "minFundraisingAmount()",
          "managerFee()",
          "withdrawalFee()",
          "maxCapacity()",
          "minDepositAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/ambient/ICrocSwapDex.sol:ICrocSwapDex": {
        "src": "contracts/interfaces/external/ambient/ICrocSwapDex.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userCmd(uint16,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard": {
        "src": "contracts/interfaces/guards/IPlatformGuard.sol:6",
        "inherit": [
          "contracts/interfaces/guards/IGuard.sol:IGuard"
        ],
        "libraries": [],
        "methods": [
          "platformName()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/TxDataUtils.sol:TxDataUtils": {
        "src": "contracts/utils/TxDataUtils.sol:20",
        "version": {
          "withMetadata": "8cb004785e763015bdeba03de981235690d55637ba6b96312909c6052b135ff9",
          "withoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb",
          "linkedWithoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb"
        },
        "inherit": [],
        "libraries": [
          "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib"
        ],
        "methods": [
          "getMethod(bytes)",
          "getParams(bytes)",
          "getInput(bytes,uint8)",
          "getBytes(bytes,uint8,uint256)",
          "getArrayLast(bytes,uint8)",
          "getArrayLength(bytes,uint8)",
          "getArrayIndex(bytes,uint8,uint8)",
          "read4left(bytes,uint256)",
          "read32(bytes,uint256,uint256)",
          "convert32toAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:ERC4626Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:51",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "decimals()",
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "maxMint(address)",
          "maxWithdraw(address)",
          "maxRedeem(address)",
          "previewDeposit(uint256)",
          "previewMint(uint256)",
          "previewWithdraw(uint256)",
          "previewRedeem(uint256)",
          "deposit(uint256,address)",
          "mint(uint256,address)",
          "withdraw(uint256,address,address)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1690": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(ERC4626Storage)387_storage": {
              "label": "struct ERC4626Upgradeable.ERC4626Storage",
              "members": [
                {
                  "label": "_asset",
                  "type": "t_contract(IERC20)1690",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_underlyingDecimals",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC4626": [
              {
                "contract": "ERC4626Upgradeable",
                "label": "_asset",
                "type": "t_contract(IERC20)1690",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:56",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC4626Upgradeable",
                "label": "_underlyingDecimals",
                "type": "t_uint8",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:57",
                "offset": 20,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)755_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils"
        ],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(EIP712Storage)824_storage": {
              "label": "struct EIP712Upgradeable.EIP712Storage",
              "members": [
                {
                  "label": "_hashedName",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_hashedVersion",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_version",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44",
                "offset": 0,
                "slot": "3"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC1363.sol:IERC1363": {
        "src": "@openzeppelin/contracts/interfaces/IERC1363.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFromAndCall(address,address,uint256)",
          "transferFromAndCall(address,address,uint256,bytes)",
          "approveAndCall(address,uint256)",
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267": {
        "src": "@openzeppelin/contracts/interfaces/IERC5267.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "db5df44becafaf3bbe1dce50a4e5b800698e29607bbd33858e8d63b703068088",
          "withoutMetadata": "7fb5ed68306b380728eee4483ffc46446c67b9fc8cc571f1349f0ca48ad2c9bf",
          "linkedWithoutMetadata": "7fb5ed68306b380728eee4483ffc46446c67b9fc8cc571f1349f0ca48ad2c9bf"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:26"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:15",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "613c0acf87bfe4d12cc4143a0d439ad70fe05bb5fa7359d9fd382a60ce6db3d6",
          "withoutMetadata": "156db0c1c0f718defa5eaa534156f98e88c355328c2ed215498ced894c984c10",
          "linkedWithoutMetadata": "156db0c1c0f718defa5eaa534156f98e88c355328c2ed215498ced894c984c10"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProxyAdmin",
            "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:17",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:62",
        "version": {
          "withMetadata": "d8485658017fc48fe600503bd704240239a8fb5a4dfc6186c57af53c2dd66709",
          "withoutMetadata": "d8485658017fc48fe600503bd704240239a8fb5a4dfc6186c57af53c2dd66709",
          "linkedWithoutMetadata": "d8485658017fc48fe600503bd704240239a8fb5a4dfc6186c57af53c2dd66709"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:79"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_admin",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:67"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1566_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:11",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin/contracts/utils/Errors.sol:14",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:13",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils": {
        "src": "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:15",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/Panic.sol:Panic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:11",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib": {
        "src": "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:11",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@uniswap/v3-periphery/contracts/libraries/Path.sol:Path": {
        "src": "@uniswap/v3-periphery/contracts/libraries/Path.sol:7",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/Vault.sol:Vault": {
        "src": "contracts/Vault.sol:30",
        "version": {
          "withMetadata": "feda9c47f8323258877978d3e1aef660ad9cd47fafb75a3445745d1c779b4f31",
          "withoutMetadata": "b70d8a9e9f92d78137ec3239fe1db7f1d4b482cc550f1dec1fc716719345385f",
          "linkedWithoutMetadata": "b70d8a9e9f92d78137ec3239fe1db7f1d4b482cc550f1dec1fc716719345385f"
        },
        "inherit": [
          "contracts/utils/FeeLogic.sol:IVaultMinter",
          "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset",
          "contracts/interfaces/IVault.sol:IVault",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:ERC4626Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "contracts/utils/FeeLogic.sol:FeeLogic",
          "contracts/utils/VaultLogic.sol:VaultLogic",
          "contracts/utils/AssetLogic.sol:AssetLogic",
          "@openzeppelin/contracts/utils/math/Math.sol:Math"
        ],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "assetBalance(address)",
          "decodeRevertReason(bytes)",
          "totalAssets()",
          "maxDeposit(address)",
          "maxWithdraw(address)",
          "previewDeposit(uint256)",
          "previewWithdraw(uint256)",
          "deposit(uint256,address)",
          "withdraw(uint256,address,address)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "mint(address,uint256)",
          "convertToShares(uint256)",
          "_updateAssetPricesExternal()",
          "addSupportedAsset(address)",
          "batchAddSupportedAssets(address[])",
          "removeSupportedAsset(address)",
          "addSupportedPlatform(string)",
          "removeSupportedPlatform(string)",
          "updateFees(uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "updateOracleProtection(uint256,uint256)",
          "setEmergencyOracleMode(bool)",
          "setEmergencyPrice(address,uint256)",
          "pause()",
          "unpause()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "convertAssetValueToUnderlying(address,uint256)",
          "getAutoRealizationStatus()",
          "previewWithdrawalImpact(uint256)",
          "shouldManagerRealize()",
          "version()",
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)",
          "previewWithdrawalAfterFees(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/Vault.sol:208",
            "expectedLinearization": [
              "ERC20Upgradeable",
              "ERC4626Upgradeable",
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable"
            ],
            "foundOrder": [
              "ERC4626Upgradeable",
              "ERC20Upgradeable",
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable"
            ]
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "underlyingAsset",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:97"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:98"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:99"
            },
            {
              "label": "protocolTreasury",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:100"
            },
            {
              "label": "currentEpoch",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:103"
            },
            {
              "label": "vaultState",
              "offset": 0,
              "slot": "5",
              "type": "t_enum(VaultState)18616",
              "contract": "Vault",
              "src": "contracts/Vault.sol:104"
            },
            {
              "label": "epochStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:105"
            },
            {
              "label": "fundraisingDuration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:106"
            },
            {
              "label": "minFundraisingAmount",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:107"
            },
            {
              "label": "managerFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:111"
            },
            {
              "label": "withdrawalFee",
              "offset": 2,
              "slot": "9",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:112"
            },
            {
              "label": "_totalAssets",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:125"
            },
            {
              "label": "lastRealizationTime",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:126"
            },
            {
              "label": "maxCapacity",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:127"
            },
            {
              "label": "minDepositAmount",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:128"
            },
            {
              "label": "realizationCooldown",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:131"
            },
            {
              "label": "maxPriceDeviationBps",
              "offset": 0,
              "slot": "15",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:132"
            },
            {
              "label": "emergencyOracleMode",
              "offset": 2,
              "slot": "15",
              "type": "t_bool",
              "contract": "Vault",
              "src": "contracts/Vault.sol:133"
            },
            {
              "label": "lastAssetPrices",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:135"
            },
            {
              "label": "currentRealization",
              "offset": 0,
              "slot": "17",
              "type": "t_struct(RealizationState)10525_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:145"
            },
            {
              "label": "supportedAssets",
              "offset": 0,
              "slot": "22",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:148"
            },
            {
              "label": "assetPosition",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:149"
            },
            {
              "label": "isAssetSupported",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:150"
            },
            {
              "label": "supportedPlatforms",
              "offset": 0,
              "slot": "25",
              "type": "t_array(t_string_storage)dyn_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:153"
            },
            {
              "label": "isPlatformSupported",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_string_memory_ptr,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:154"
            },
            {
              "label": "authorizedStrategies",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:157"
            },
            {
              "label": "epochStartAssets",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:160"
            },
            {
              "label": "epochEndAssets",
              "offset": 0,
              "slot": "29",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:161"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1690": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(ERC4626Storage)387_storage": {
              "label": "struct ERC4626Upgradeable.ERC4626Storage",
              "members": [
                {
                  "label": "_asset",
                  "type": "t_contract(IERC20)1690",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_underlyingDecimals",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)755_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]",
              "numberOfBytes": "32"
            },
            "t_enum(VaultState)18616": {
              "label": "enum IVault.VaultState",
              "members": [
                "FUNDRAISING",
                "LIVE"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_bool)": {
              "label": "mapping(string => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RealizationState)10525_storage": {
              "label": "struct Vault.RealizationState",
              "members": [
                {
                  "label": "isRealized",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "realizedAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "preRealizationValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "totalFeesExtracted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC4626": [
              {
                "contract": "ERC4626Upgradeable",
                "label": "_asset",
                "type": "t_contract(IERC20)1690",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:56",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC4626Upgradeable",
                "label": "_underlyingDecimals",
                "type": "t_uint8",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:57",
                "offset": 20,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/VaultFactory.sol:VaultFactory": {
        "src": "contracts/VaultFactory.sol:71",
        "version": {
          "withMetadata": "f1b2153b006fcb311c94fa3aa46429b8b4ce8e3ad929d5fd5a66fd09efb91ae5",
          "withoutMetadata": "745dcdf76d88c302fe9de47097e61bbf49090702724bce5d3d257d026a2ad1c2",
          "linkedWithoutMetadata": "745dcdf76d88c302fe9de47097e61bbf49090702724bce5d3d257d026a2ad1c2"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IHasAssetInfo.sol:IHasAssetInfo",
          "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo",
          "contracts/interfaces/IVaultFactory.sol:IVaultFactory"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "getAdjustedMaxCapacityLimit(address)",
          "getAdjustedMinCapacityLimit(address)",
          "createVault(string,string,address,address,uint256,uint256,uint256)",
          "setAssetWhitelist(address,uint16,bool)",
          "batchSetAssetWhitelist(address[],uint16[],bool[])",
          "getTokenType(address)",
          "getWhitelistedAssets()",
          "setGovernanceAddress(address)",
          "setTreasuryAddress(address)",
          "setAdminAddress(address)",
          "updateVaultFees(address,uint256,uint256)",
          "getAssetHandler()",
          "setAssetHandler(address)",
          "setMaximumSupportedAssetCount(uint256)",
          "getMaximumSupportedAssetCount()",
          "isValidAsset(address)",
          "getAssetPrice(address)",
          "getAssetType(address)",
          "updateVaultImplementation(address)",
          "upgradeVault(address,address)",
          "batchUpgradeVaults(address[],address)",
          "setFactorySettings(uint256,uint256,uint256)",
          "setFactorySettingsInAssetUnits(uint256,uint256,uint256)",
          "getAdjustedCapacityLimits(address)",
          "pause()",
          "unpause()",
          "addUnderlyingAsset(address,uint16)",
          "addWhitelistedAsset(address,uint16)",
          "removeUnderlyingAsset(address)",
          "removeWhitelistedAsset(address)",
          "getUnderlyingAssets()",
          "getUnderlyingAssetCount()",
          "getWhitelistedAssetCount()",
          "isUnderlyingAssetAllowed(address)",
          "isAssetWhitelisted(address)",
          "setGovernanceAddress(bytes32,address)",
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)",
          "hasGuard(address)",
          "getAssetsWithTypes()",
          "getDeployedVaults()",
          "getVaultCount()",
          "getVaultsByManager(address)",
          "getVaultInfo(address)",
          "getDetailedVaultInfo(address)",
          "getFactoryStats()",
          "isValidVault(address)",
          "getVaultManager(address)",
          "addUnderlyingAssetWhitelist(address)",
          "removeUnderlyingAssetWhitelist(address)",
          "setVaultStorageVersion(uint256)",
          "version()",
          "emergencyRecoverAsset(address,uint256)",
          "owner()",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "proxyAdmin",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:85"
            },
            {
              "label": "vaultImplementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:86"
            },
            {
              "label": "implementationVersion",
              "offset": 20,
              "slot": "1",
              "type": "t_uint32",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:87"
            },
            {
              "label": "deployedVaults",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:90"
            },
            {
              "label": "isVault",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:91"
            },
            {
              "label": "vaultManager",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_address)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:92"
            },
            {
              "label": "vaultIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:93"
            },
            {
              "label": "underlyingAssetAllowed",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:96"
            },
            {
              "label": "underlyingAssets",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:97"
            },
            {
              "label": "underlyingAssetIndex",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:98"
            },
            {
              "label": "assetWhitelisted",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:101"
            },
            {
              "label": "tokenType",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint16)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:102"
            },
            {
              "label": "whitelistedAssets",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:103"
            },
            {
              "label": "assetIndex",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:104"
            },
            {
              "label": "governance",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:106"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:107"
            },
            {
              "label": "admin",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:108"
            },
            {
              "label": "_assetHandler",
              "offset": 0,
              "slot": "16",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:110"
            },
            {
              "label": "_maximumSupportedAssetCount",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:111"
            },
            {
              "label": "vaultVersion",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:113"
            },
            {
              "label": "vaultStorageVersion",
              "offset": 0,
              "slot": "19",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:114"
            },
            {
              "label": "maxCapacityLimit",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:117"
            },
            {
              "label": "minCapacityLimit",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:118"
            },
            {
              "label": "creationFee",
              "offset": 0,
              "slot": "22",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:119"
            },
            {
              "label": "governanceAddresses",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:122"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint16)": {
              "label": "mapping(address => uint16)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/asset/AmbientAssetGuard.sol:AmbientAssetGuard": {
        "src": "contracts/guards/asset/AmbientAssetGuard.sol:26",
        "version": {
          "withMetadata": "139983fdfbc83a0d8777a98edbc85426c0d82bb5c99e22486cae67c0f39a6a74",
          "withoutMetadata": "09c367d26feff058e151560aee2cfcb6937b743249502cc53d43aa4160946748",
          "linkedWithoutMetadata": "09c367d26feff058e151560aee2cfcb6937b743249502cc53d43aa4160946748"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)",
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)",
          "setPoolConfig(address,address,uint256)",
          "getRangeTokens(address,address,address,int24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "crocQueryEndpoint",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "AmbientAssetGuard",
              "src": "contracts/guards/asset/AmbientAssetGuard.sol:28"
            },
            {
              "label": "poolConfigs",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "AmbientAssetGuard",
              "src": "contracts/guards/asset/AmbientAssetGuard.sol:31"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1566_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/asset/ERC20Guard.sol:ERC20Guard": {
        "src": "contracts/guards/asset/ERC20Guard.sol:30",
        "version": {
          "withMetadata": "3cb23725a9ab609686f94ecceaa00264017b202e1df3d9047c7b5fafa003bc06",
          "withoutMetadata": "d0984ba4783a8bad04232921f4cfa48d764a34b1dee1dab9752f9f728e012469",
          "linkedWithoutMetadata": "d0984ba4783a8bad04232921f4cfa48d764a34b1dee1dab9752f9f728e012469"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes",
          "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)",
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "WETH",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ERC20Guard",
              "src": "contracts/guards/asset/ERC20Guard.sol:32"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1566_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/asset/ETHGuard.sol:ETHGuard": {
        "src": "contracts/guards/asset/ETHGuard.sol:33",
        "version": {
          "withMetadata": "a1b726ac81ba38ed16f72d962bff2d54094d49eefb541577b1847652a2448dde",
          "withoutMetadata": "fa531d0f3172bbdbed6554c228aaaad1739e5a431e1bc2b3558a0c54658af477",
          "linkedWithoutMetadata": "fa531d0f3172bbdbed6554c228aaaad1739e5a431e1bc2b3558a0c54658af477"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)",
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "WETH",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ETHGuard",
              "src": "contracts/guards/asset/ETHGuard.sol:34"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1566_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/asset/StETHGuard.sol:IStETH": {
        "src": "contracts/guards/asset/StETHGuard.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPooledEthByShares(uint256)",
          "getSharesByPooledEth(uint256)",
          "getTotalShares()",
          "getTotalPooledEther()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/asset/StETHGuard.sol:StETHGuard": {
        "src": "contracts/guards/asset/StETHGuard.sol:19",
        "version": {
          "withMetadata": "da50bd9e865912fda35d1578be3946f12f213efd5a788071f1754dcd580d5f75",
          "withoutMetadata": "78e8263f7f4eab3d95fd1fbb03fd3aea3affebbf791962a80e438028ac84c7a4",
          "linkedWithoutMetadata": "78e8263f7f4eab3d95fd1fbb03fd3aea3affebbf791962a80e438028ac84c7a4"
        },
        "inherit": [
          "contracts/guards/asset/ERC20Guard.sol:ERC20Guard",
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes",
          "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "getBalance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "WETH",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ERC20Guard",
              "src": "contracts/guards/asset/ERC20Guard.sol:32"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1566_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/platform/AmbientGuard.sol:AmbientGuard": {
        "src": "contracts/guards/platform/AmbientGuard.sol:28",
        "version": {
          "withMetadata": "835981ec52b71549d254703377ab11b6d213e11ee435a7cc46a71d58c10de14b",
          "withoutMetadata": "917b7d3d24b5e9e0daf50d5a7409b741dbdf2bee868af0f82ccacdc251215ef3",
          "linkedWithoutMetadata": "917b7d3d24b5e9e0daf50d5a7409b741dbdf2bee868af0f82ccacdc251215ef3"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes",
          "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "platformName",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "AmbientGuard",
              "src": "contracts/guards/platform/AmbientGuard.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1566_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/platform/KyberswapGuard.sol:KyberswapGuard": {
        "src": "contracts/guards/platform/KyberswapGuard.sol:25",
        "version": {
          "withMetadata": "e3ce0b582ff23087bc4c66001f251dbb04b67ec4bd83e7a6d6035e252966307a",
          "withoutMetadata": "bb43280c008dd00d5157f9f98bb9fb10329798dd0fee934ab6475ddf5a7ab00e",
          "linkedWithoutMetadata": "bb43280c008dd00d5157f9f98bb9fb10329798dd0fee934ab6475ddf5a7ab00e"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes",
          "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [
          "@uniswap/v3-periphery/contracts/libraries/Path.sol:Path"
        ],
        "methods": [
          "initialize()",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "platformName",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "KyberswapGuard",
              "src": "contracts/guards/platform/KyberswapGuard.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1566_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IAggregatorV3Interface.sol:IAggregatorV3Interface": {
        "src": "contracts/interfaces/IAggregatorV3Interface.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IAssetHandler.sol:IAssetHandler": {
        "src": "contracts/interfaces/IAssetHandler.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addAsset(address,uint16,address)",
          "addAssets(struct IAssetHandler.Asset[])",
          "removeAsset(address)",
          "priceAggregators(address)",
          "assetTypes(address)",
          "getUSDPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IGovernance.sol:IGovernance": {
        "src": "contracts/interfaces/IGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "contractGuards(address)",
          "assetGuards(uint16)",
          "nameToDestination(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasAssetInfo.sol:IHasAssetInfo": {
        "src": "contracts/interfaces/IHasAssetInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidAsset(address)",
          "getAssetPrice(address)",
          "getAssetType(address)",
          "getMaximumSupportedAssetCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo": {
        "src": "contracts/interfaces/IHasGuardInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasOwnable.sol:IHasOwnable": {
        "src": "contracts/interfaces/IHasOwnable.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasPausable.sol:IHasPausable": {
        "src": "contracts/interfaces/IHasPausable.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPaused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset": {
        "src": "contracts/interfaces/IHasSupportedAsset.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes": {
        "src": "contracts/interfaces/ITransactionTypes.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:8",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "addSupportedAsset(address)",
          "batchAddSupportedAssets(address[])",
          "removeSupportedAsset(address)",
          "updateFees(uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "pause()",
          "unpause()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "factory()",
          "manager()",
          "underlyingAsset()",
          "protocolTreasury()",
          "currentEpoch()",
          "vaultState()",
          "epochStartTime()",
          "fundraisingDuration()",
          "minFundraisingAmount()",
          "managerFee()",
          "withdrawalFee()",
          "maxCapacity()",
          "minDepositAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVaultFactory.sol:IVaultFactory": {
        "src": "contracts/interfaces/IVaultFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenType(address)",
          "getAssetType(address)",
          "getDeployedVaults()",
          "getVaultCount()",
          "getVaultsByManager(address)",
          "getVaultInfo(address)",
          "getDetailedVaultInfo(address)",
          "getFactoryStats()",
          "isValidVault(address)",
          "getVaultManager(address)",
          "isAssetWhitelisted(address)",
          "version()",
          "emergencyRecoverAsset(address,uint256)",
          "setTreasuryAddress(address)",
          "setAdminAddress(address)",
          "proxyAdmin()",
          "vaultImplementation()",
          "implementationVersion()",
          "deployedVaults(uint256)",
          "isVault(address)",
          "vaultManager(address)",
          "vaultIndex(address)",
          "underlyingAssetAllowed(address)",
          "tokenType(address)",
          "whitelistedAssets(uint256)",
          "assetIndex(address)",
          "maxCapacityLimit()",
          "minCapacityLimit()",
          "creationFee()",
          "treasury()",
          "admin()",
          "owner()",
          "paused()",
          "governance()",
          "getAssetHandler()",
          "vaultStorageVersion()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IWETH.sol:IWETH": {
        "src": "contracts/interfaces/IWETH.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/ambient/ICrocQuery.sol:ICrocQuery": {
        "src": "contracts/interfaces/external/ambient/ICrocQuery.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "queryPrice(address,address,uint256)",
          "queryCurve(address,address,uint256)",
          "queryCurveTick(address,address,uint256)",
          "queryRangeTokens(address,address,address,uint256,int24,int24)",
          "queryRangePosition(address,address,address,uint256,int24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/ambient/ICrocSwapDex.sol:ICrocSwapDex": {
        "src": "contracts/interfaces/external/ambient/ICrocSwapDex.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userCmd(uint16,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/kyberswap/IMetaAggregationRouterV2.sol:IMetaAggregationRouterV2": {
        "src": "contracts/interfaces/external/kyberswap/IMetaAggregationRouterV2.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swap((address,address,bytes,(address,address,address[],uint256[],address[],uint256[],address,uint256,uint256,uint256,bytes),bytes))",
          "swapSimpleMode(address,(address,address,address[],uint256[],address[],uint256[],address,uint256,uint256,uint256,bytes),bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard": {
        "src": "contracts/interfaces/guards/IAssetGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard": {
        "src": "contracts/interfaces/guards/IPlatformGuard.sol:6",
        "inherit": [
          "contracts/interfaces/guards/IGuard.sol:IGuard"
        ],
        "libraries": [],
        "methods": [
          "platformName()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/ITxTrackingGuard.sol:ITxTrackingGuard": {
        "src": "contracts/interfaces/guards/ITxTrackingGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isTxTrackingGuard()",
          "afterTxGuard(address,address,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/AssetLogic.sol:AssetLogic": {
        "src": "contracts/utils/AssetLogic.sol:30",
        "version": {
          "withMetadata": "d50d1ab49190d6f833b1124842ebfa703a45a40534912706a83af295af746662",
          "withoutMetadata": "7fae6f8b65a143a4c7bccdd935e62da265a5d4930269d0c232bedf1ca35447b2",
          "linkedWithoutMetadata": "7fae6f8b65a143a4c7bccdd935e62da265a5d4930269d0c232bedf1ca35447b2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/FeeLogic.sol:FeeLogic": {
        "src": "contracts/utils/FeeLogic.sol:32",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/FeeLogic.sol:IVaultMinter": {
        "src": "contracts/utils/FeeLogic.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "convertToShares(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/TxDataUtils.sol:TxDataUtils": {
        "src": "contracts/utils/TxDataUtils.sol:20",
        "version": {
          "withMetadata": "8cb004785e763015bdeba03de981235690d55637ba6b96312909c6052b135ff9",
          "withoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb",
          "linkedWithoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb"
        },
        "inherit": [],
        "libraries": [
          "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib"
        ],
        "methods": [
          "getMethod(bytes)",
          "getParams(bytes)",
          "getInput(bytes,uint8)",
          "getBytes(bytes,uint8,uint256)",
          "getArrayLast(bytes,uint8)",
          "getArrayLength(bytes,uint8)",
          "getArrayIndex(bytes,uint8,uint8)",
          "read4left(bytes,uint256)",
          "read32(bytes,uint256,uint256)",
          "convert32toAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/VaultLogic.sol:VaultLogic": {
        "src": "contracts/utils/VaultLogic.sol:15",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:ERC4626Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:51",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "decimals()",
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "maxMint(address)",
          "maxWithdraw(address)",
          "maxRedeem(address)",
          "previewDeposit(uint256)",
          "previewMint(uint256)",
          "previewWithdraw(uint256)",
          "previewRedeem(uint256)",
          "deposit(uint256,address)",
          "mint(uint256,address)",
          "withdraw(uint256,address,address)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1690": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(ERC4626Storage)387_storage": {
              "label": "struct ERC4626Upgradeable.ERC4626Storage",
              "members": [
                {
                  "label": "_asset",
                  "type": "t_contract(IERC20)1690",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_underlyingDecimals",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC4626": [
              {
                "contract": "ERC4626Upgradeable",
                "label": "_asset",
                "type": "t_contract(IERC20)1690",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:56",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC4626Upgradeable",
                "label": "_underlyingDecimals",
                "type": "t_uint8",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:57",
                "offset": 20,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)755_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils"
        ],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(EIP712Storage)824_storage": {
              "label": "struct EIP712Upgradeable.EIP712Storage",
              "members": [
                {
                  "label": "_hashedName",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_hashedVersion",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_version",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44",
                "offset": 0,
                "slot": "3"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC1363.sol:IERC1363": {
        "src": "@openzeppelin/contracts/interfaces/IERC1363.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFromAndCall(address,address,uint256)",
          "transferFromAndCall(address,address,uint256,bytes)",
          "approveAndCall(address,uint256)",
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267": {
        "src": "@openzeppelin/contracts/interfaces/IERC5267.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "db5df44becafaf3bbe1dce50a4e5b800698e29607bbd33858e8d63b703068088",
          "withoutMetadata": "7fb5ed68306b380728eee4483ffc46446c67b9fc8cc571f1349f0ca48ad2c9bf",
          "linkedWithoutMetadata": "7fb5ed68306b380728eee4483ffc46446c67b9fc8cc571f1349f0ca48ad2c9bf"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:26"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:15",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "613c0acf87bfe4d12cc4143a0d439ad70fe05bb5fa7359d9fd382a60ce6db3d6",
          "withoutMetadata": "156db0c1c0f718defa5eaa534156f98e88c355328c2ed215498ced894c984c10",
          "linkedWithoutMetadata": "156db0c1c0f718defa5eaa534156f98e88c355328c2ed215498ced894c984c10"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProxyAdmin",
            "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:17",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:62",
        "version": {
          "withMetadata": "d8485658017fc48fe600503bd704240239a8fb5a4dfc6186c57af53c2dd66709",
          "withoutMetadata": "d8485658017fc48fe600503bd704240239a8fb5a4dfc6186c57af53c2dd66709",
          "linkedWithoutMetadata": "d8485658017fc48fe600503bd704240239a8fb5a4dfc6186c57af53c2dd66709"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:79"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_admin",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:67"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1566_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:11",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin/contracts/utils/Errors.sol:14",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:13",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils": {
        "src": "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:15",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/Panic.sol:Panic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:11",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib": {
        "src": "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:11",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@uniswap/v3-periphery/contracts/libraries/Path.sol:Path": {
        "src": "@uniswap/v3-periphery/contracts/libraries/Path.sol:7",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/Vault.sol:Vault": {
        "src": "contracts/Vault.sol:30",
        "version": {
          "withMetadata": "4a0cd8143fcd3afe9b7c14b048075a2a2b1cde200f576809640e69cc13d81938",
          "withoutMetadata": "ee8935138547a97f8778da78207509779afba3df4443e3315eb32b62724a3ec8",
          "linkedWithoutMetadata": "ee8935138547a97f8778da78207509779afba3df4443e3315eb32b62724a3ec8"
        },
        "inherit": [
          "contracts/utils/FeeLogic.sol:IVaultMinter",
          "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset",
          "contracts/interfaces/IVault.sol:IVault",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:ERC4626Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "contracts/utils/FeeLogic.sol:FeeLogic",
          "contracts/utils/VaultLogic.sol:VaultLogic",
          "contracts/utils/AssetLogic.sol:AssetLogic",
          "@openzeppelin/contracts/utils/math/Math.sol:Math"
        ],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "emergencyLiquidateAll()",
          "assetBalance(address)",
          "decodeRevertReason(bytes)",
          "totalAssets()",
          "maxDeposit(address)",
          "maxWithdraw(address)",
          "previewDeposit(uint256)",
          "previewWithdraw(uint256)",
          "deposit(uint256,address)",
          "withdraw(uint256,address,address)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "mint(address,uint256)",
          "convertToShares(uint256)",
          "_updateAssetPricesExternal()",
          "addSupportedAsset(address)",
          "batchAddSupportedAssets(address[])",
          "removeSupportedAsset(address)",
          "addSupportedPlatform(string)",
          "removeSupportedPlatform(string)",
          "updateFees(uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "updateOracleProtection(uint256,uint256)",
          "setEmergencyOracleMode(bool)",
          "setEmergencyPrice(address,uint256)",
          "pause()",
          "unpause()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "convertAssetValueToUnderlying(address,uint256)",
          "getAutoRealizationStatus()",
          "previewWithdrawalImpact(uint256)",
          "shouldManagerRealize()",
          "version()",
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)",
          "previewWithdrawalAfterFees(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/Vault.sol:208",
            "expectedLinearization": [
              "ERC20Upgradeable",
              "ERC4626Upgradeable",
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable"
            ],
            "foundOrder": [
              "ERC4626Upgradeable",
              "ERC20Upgradeable",
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable"
            ]
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "underlyingAsset",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:97"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:98"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:99"
            },
            {
              "label": "protocolTreasury",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:100"
            },
            {
              "label": "currentEpoch",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:103"
            },
            {
              "label": "vaultState",
              "offset": 0,
              "slot": "5",
              "type": "t_enum(VaultState)18616",
              "contract": "Vault",
              "src": "contracts/Vault.sol:104"
            },
            {
              "label": "epochStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:105"
            },
            {
              "label": "fundraisingDuration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:106"
            },
            {
              "label": "minFundraisingAmount",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:107"
            },
            {
              "label": "managerFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:111"
            },
            {
              "label": "withdrawalFee",
              "offset": 2,
              "slot": "9",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:112"
            },
            {
              "label": "_totalAssets",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:125"
            },
            {
              "label": "lastRealizationTime",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:126"
            },
            {
              "label": "maxCapacity",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:127"
            },
            {
              "label": "minDepositAmount",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:128"
            },
            {
              "label": "realizationCooldown",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:131"
            },
            {
              "label": "maxPriceDeviationBps",
              "offset": 0,
              "slot": "15",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:132"
            },
            {
              "label": "emergencyOracleMode",
              "offset": 2,
              "slot": "15",
              "type": "t_bool",
              "contract": "Vault",
              "src": "contracts/Vault.sol:133"
            },
            {
              "label": "lastAssetPrices",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:135"
            },
            {
              "label": "currentRealization",
              "offset": 0,
              "slot": "17",
              "type": "t_struct(RealizationState)10525_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:145"
            },
            {
              "label": "supportedAssets",
              "offset": 0,
              "slot": "22",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:148"
            },
            {
              "label": "assetPosition",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:149"
            },
            {
              "label": "isAssetSupported",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:150"
            },
            {
              "label": "supportedPlatforms",
              "offset": 0,
              "slot": "25",
              "type": "t_array(t_string_storage)dyn_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:153"
            },
            {
              "label": "isPlatformSupported",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_string_memory_ptr,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:154"
            },
            {
              "label": "authorizedStrategies",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:157"
            },
            {
              "label": "epochStartAssets",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:160"
            },
            {
              "label": "epochEndAssets",
              "offset": 0,
              "slot": "29",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:161"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1690": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(ERC4626Storage)387_storage": {
              "label": "struct ERC4626Upgradeable.ERC4626Storage",
              "members": [
                {
                  "label": "_asset",
                  "type": "t_contract(IERC20)1690",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_underlyingDecimals",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)755_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]",
              "numberOfBytes": "32"
            },
            "t_enum(VaultState)18616": {
              "label": "enum IVault.VaultState",
              "members": [
                "FUNDRAISING",
                "LIVE"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_bool)": {
              "label": "mapping(string => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RealizationState)10525_storage": {
              "label": "struct Vault.RealizationState",
              "members": [
                {
                  "label": "isRealized",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "realizedAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "preRealizationValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "totalFeesExtracted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC4626": [
              {
                "contract": "ERC4626Upgradeable",
                "label": "_asset",
                "type": "t_contract(IERC20)1690",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:56",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC4626Upgradeable",
                "label": "_underlyingDecimals",
                "type": "t_uint8",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:57",
                "offset": 20,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/VaultFactory.sol:VaultFactory": {
        "src": "contracts/VaultFactory.sol:71",
        "version": {
          "withMetadata": "f1b2153b006fcb311c94fa3aa46429b8b4ce8e3ad929d5fd5a66fd09efb91ae5",
          "withoutMetadata": "745dcdf76d88c302fe9de47097e61bbf49090702724bce5d3d257d026a2ad1c2",
          "linkedWithoutMetadata": "745dcdf76d88c302fe9de47097e61bbf49090702724bce5d3d257d026a2ad1c2"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IHasAssetInfo.sol:IHasAssetInfo",
          "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo",
          "contracts/interfaces/IVaultFactory.sol:IVaultFactory"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "getAdjustedMaxCapacityLimit(address)",
          "getAdjustedMinCapacityLimit(address)",
          "createVault(string,string,address,address,uint256,uint256,uint256)",
          "setAssetWhitelist(address,uint16,bool)",
          "batchSetAssetWhitelist(address[],uint16[],bool[])",
          "getTokenType(address)",
          "getWhitelistedAssets()",
          "setGovernanceAddress(address)",
          "setTreasuryAddress(address)",
          "setAdminAddress(address)",
          "updateVaultFees(address,uint256,uint256)",
          "getAssetHandler()",
          "setAssetHandler(address)",
          "setMaximumSupportedAssetCount(uint256)",
          "getMaximumSupportedAssetCount()",
          "isValidAsset(address)",
          "getAssetPrice(address)",
          "getAssetType(address)",
          "updateVaultImplementation(address)",
          "upgradeVault(address,address)",
          "batchUpgradeVaults(address[],address)",
          "setFactorySettings(uint256,uint256,uint256)",
          "setFactorySettingsInAssetUnits(uint256,uint256,uint256)",
          "getAdjustedCapacityLimits(address)",
          "pause()",
          "unpause()",
          "addUnderlyingAsset(address,uint16)",
          "addWhitelistedAsset(address,uint16)",
          "removeUnderlyingAsset(address)",
          "removeWhitelistedAsset(address)",
          "getUnderlyingAssets()",
          "getUnderlyingAssetCount()",
          "getWhitelistedAssetCount()",
          "isUnderlyingAssetAllowed(address)",
          "isAssetWhitelisted(address)",
          "setGovernanceAddress(bytes32,address)",
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)",
          "hasGuard(address)",
          "getAssetsWithTypes()",
          "getDeployedVaults()",
          "getVaultCount()",
          "getVaultsByManager(address)",
          "getVaultInfo(address)",
          "getDetailedVaultInfo(address)",
          "getFactoryStats()",
          "isValidVault(address)",
          "getVaultManager(address)",
          "addUnderlyingAssetWhitelist(address)",
          "removeUnderlyingAssetWhitelist(address)",
          "setVaultStorageVersion(uint256)",
          "version()",
          "emergencyRecoverAsset(address,uint256)",
          "owner()",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "proxyAdmin",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:85"
            },
            {
              "label": "vaultImplementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:86"
            },
            {
              "label": "implementationVersion",
              "offset": 20,
              "slot": "1",
              "type": "t_uint32",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:87"
            },
            {
              "label": "deployedVaults",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:90"
            },
            {
              "label": "isVault",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:91"
            },
            {
              "label": "vaultManager",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_address)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:92"
            },
            {
              "label": "vaultIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:93"
            },
            {
              "label": "underlyingAssetAllowed",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:96"
            },
            {
              "label": "underlyingAssets",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:97"
            },
            {
              "label": "underlyingAssetIndex",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:98"
            },
            {
              "label": "assetWhitelisted",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:101"
            },
            {
              "label": "tokenType",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint16)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:102"
            },
            {
              "label": "whitelistedAssets",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:103"
            },
            {
              "label": "assetIndex",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:104"
            },
            {
              "label": "governance",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:106"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:107"
            },
            {
              "label": "admin",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:108"
            },
            {
              "label": "_assetHandler",
              "offset": 0,
              "slot": "16",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:110"
            },
            {
              "label": "_maximumSupportedAssetCount",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:111"
            },
            {
              "label": "vaultVersion",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:113"
            },
            {
              "label": "vaultStorageVersion",
              "offset": 0,
              "slot": "19",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:114"
            },
            {
              "label": "maxCapacityLimit",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:117"
            },
            {
              "label": "minCapacityLimit",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:118"
            },
            {
              "label": "creationFee",
              "offset": 0,
              "slot": "22",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:119"
            },
            {
              "label": "governanceAddresses",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:122"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint16)": {
              "label": "mapping(address => uint16)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/asset/AmbientAssetGuard.sol:AmbientAssetGuard": {
        "src": "contracts/guards/asset/AmbientAssetGuard.sol:26",
        "version": {
          "withMetadata": "139983fdfbc83a0d8777a98edbc85426c0d82bb5c99e22486cae67c0f39a6a74",
          "withoutMetadata": "09c367d26feff058e151560aee2cfcb6937b743249502cc53d43aa4160946748",
          "linkedWithoutMetadata": "09c367d26feff058e151560aee2cfcb6937b743249502cc53d43aa4160946748"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)",
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)",
          "setPoolConfig(address,address,uint256)",
          "getRangeTokens(address,address,address,int24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "crocQueryEndpoint",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "AmbientAssetGuard",
              "src": "contracts/guards/asset/AmbientAssetGuard.sol:28"
            },
            {
              "label": "poolConfigs",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "AmbientAssetGuard",
              "src": "contracts/guards/asset/AmbientAssetGuard.sol:31"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1566_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/asset/ERC20Guard.sol:ERC20Guard": {
        "src": "contracts/guards/asset/ERC20Guard.sol:30",
        "version": {
          "withMetadata": "3cb23725a9ab609686f94ecceaa00264017b202e1df3d9047c7b5fafa003bc06",
          "withoutMetadata": "d0984ba4783a8bad04232921f4cfa48d764a34b1dee1dab9752f9f728e012469",
          "linkedWithoutMetadata": "d0984ba4783a8bad04232921f4cfa48d764a34b1dee1dab9752f9f728e012469"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes",
          "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)",
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "WETH",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ERC20Guard",
              "src": "contracts/guards/asset/ERC20Guard.sol:32"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1566_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/asset/ETHGuard.sol:ETHGuard": {
        "src": "contracts/guards/asset/ETHGuard.sol:33",
        "version": {
          "withMetadata": "a1b726ac81ba38ed16f72d962bff2d54094d49eefb541577b1847652a2448dde",
          "withoutMetadata": "fa531d0f3172bbdbed6554c228aaaad1739e5a431e1bc2b3558a0c54658af477",
          "linkedWithoutMetadata": "fa531d0f3172bbdbed6554c228aaaad1739e5a431e1bc2b3558a0c54658af477"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)",
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "WETH",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ETHGuard",
              "src": "contracts/guards/asset/ETHGuard.sol:34"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1566_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/asset/StETHGuard.sol:IStETH": {
        "src": "contracts/guards/asset/StETHGuard.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPooledEthByShares(uint256)",
          "getSharesByPooledEth(uint256)",
          "getTotalShares()",
          "getTotalPooledEther()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/asset/StETHGuard.sol:StETHGuard": {
        "src": "contracts/guards/asset/StETHGuard.sol:19",
        "version": {
          "withMetadata": "da50bd9e865912fda35d1578be3946f12f213efd5a788071f1754dcd580d5f75",
          "withoutMetadata": "78e8263f7f4eab3d95fd1fbb03fd3aea3affebbf791962a80e438028ac84c7a4",
          "linkedWithoutMetadata": "78e8263f7f4eab3d95fd1fbb03fd3aea3affebbf791962a80e438028ac84c7a4"
        },
        "inherit": [
          "contracts/guards/asset/ERC20Guard.sol:ERC20Guard",
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes",
          "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "getBalance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "WETH",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ERC20Guard",
              "src": "contracts/guards/asset/ERC20Guard.sol:32"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1566_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/platform/AmbientGuard.sol:AmbientGuard": {
        "src": "contracts/guards/platform/AmbientGuard.sol:28",
        "version": {
          "withMetadata": "835981ec52b71549d254703377ab11b6d213e11ee435a7cc46a71d58c10de14b",
          "withoutMetadata": "917b7d3d24b5e9e0daf50d5a7409b741dbdf2bee868af0f82ccacdc251215ef3",
          "linkedWithoutMetadata": "917b7d3d24b5e9e0daf50d5a7409b741dbdf2bee868af0f82ccacdc251215ef3"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes",
          "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "platformName",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "AmbientGuard",
              "src": "contracts/guards/platform/AmbientGuard.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1566_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/platform/KyberswapGuard.sol:KyberswapGuard": {
        "src": "contracts/guards/platform/KyberswapGuard.sol:25",
        "version": {
          "withMetadata": "e3ce0b582ff23087bc4c66001f251dbb04b67ec4bd83e7a6d6035e252966307a",
          "withoutMetadata": "bb43280c008dd00d5157f9f98bb9fb10329798dd0fee934ab6475ddf5a7ab00e",
          "linkedWithoutMetadata": "bb43280c008dd00d5157f9f98bb9fb10329798dd0fee934ab6475ddf5a7ab00e"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes",
          "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [
          "@uniswap/v3-periphery/contracts/libraries/Path.sol:Path"
        ],
        "methods": [
          "initialize()",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "platformName",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "KyberswapGuard",
              "src": "contracts/guards/platform/KyberswapGuard.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1566_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IAggregatorV3Interface.sol:IAggregatorV3Interface": {
        "src": "contracts/interfaces/IAggregatorV3Interface.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IAssetHandler.sol:IAssetHandler": {
        "src": "contracts/interfaces/IAssetHandler.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addAsset(address,uint16,address)",
          "addAssets(struct IAssetHandler.Asset[])",
          "removeAsset(address)",
          "priceAggregators(address)",
          "assetTypes(address)",
          "getUSDPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IGovernance.sol:IGovernance": {
        "src": "contracts/interfaces/IGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "contractGuards(address)",
          "assetGuards(uint16)",
          "nameToDestination(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasAssetInfo.sol:IHasAssetInfo": {
        "src": "contracts/interfaces/IHasAssetInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidAsset(address)",
          "getAssetPrice(address)",
          "getAssetType(address)",
          "getMaximumSupportedAssetCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo": {
        "src": "contracts/interfaces/IHasGuardInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasOwnable.sol:IHasOwnable": {
        "src": "contracts/interfaces/IHasOwnable.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasPausable.sol:IHasPausable": {
        "src": "contracts/interfaces/IHasPausable.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPaused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset": {
        "src": "contracts/interfaces/IHasSupportedAsset.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes": {
        "src": "contracts/interfaces/ITransactionTypes.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:8",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "emergencyLiquidateAll()",
          "addSupportedAsset(address)",
          "batchAddSupportedAssets(address[])",
          "removeSupportedAsset(address)",
          "updateFees(uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "pause()",
          "unpause()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "factory()",
          "manager()",
          "underlyingAsset()",
          "protocolTreasury()",
          "currentEpoch()",
          "vaultState()",
          "epochStartTime()",
          "fundraisingDuration()",
          "minFundraisingAmount()",
          "managerFee()",
          "withdrawalFee()",
          "maxCapacity()",
          "minDepositAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVaultFactory.sol:IVaultFactory": {
        "src": "contracts/interfaces/IVaultFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenType(address)",
          "getAssetType(address)",
          "getDeployedVaults()",
          "getVaultCount()",
          "getVaultsByManager(address)",
          "getVaultInfo(address)",
          "getDetailedVaultInfo(address)",
          "getFactoryStats()",
          "isValidVault(address)",
          "getVaultManager(address)",
          "isAssetWhitelisted(address)",
          "version()",
          "emergencyRecoverAsset(address,uint256)",
          "setTreasuryAddress(address)",
          "setAdminAddress(address)",
          "proxyAdmin()",
          "vaultImplementation()",
          "implementationVersion()",
          "deployedVaults(uint256)",
          "isVault(address)",
          "vaultManager(address)",
          "vaultIndex(address)",
          "underlyingAssetAllowed(address)",
          "tokenType(address)",
          "whitelistedAssets(uint256)",
          "assetIndex(address)",
          "maxCapacityLimit()",
          "minCapacityLimit()",
          "creationFee()",
          "treasury()",
          "admin()",
          "owner()",
          "paused()",
          "governance()",
          "getAssetHandler()",
          "vaultStorageVersion()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IWETH.sol:IWETH": {
        "src": "contracts/interfaces/IWETH.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/ambient/ICrocQuery.sol:ICrocQuery": {
        "src": "contracts/interfaces/external/ambient/ICrocQuery.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "queryPrice(address,address,uint256)",
          "queryCurve(address,address,uint256)",
          "queryCurveTick(address,address,uint256)",
          "queryRangeTokens(address,address,address,uint256,int24,int24)",
          "queryRangePosition(address,address,address,uint256,int24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/ambient/ICrocSwapDex.sol:ICrocSwapDex": {
        "src": "contracts/interfaces/external/ambient/ICrocSwapDex.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userCmd(uint16,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/kyberswap/IMetaAggregationRouterV2.sol:IMetaAggregationRouterV2": {
        "src": "contracts/interfaces/external/kyberswap/IMetaAggregationRouterV2.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swap((address,address,bytes,(address,address,address[],uint256[],address[],uint256[],address,uint256,uint256,uint256,bytes),bytes))",
          "swapSimpleMode(address,(address,address,address[],uint256[],address[],uint256[],address,uint256,uint256,uint256,bytes),bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard": {
        "src": "contracts/interfaces/guards/IAssetGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard": {
        "src": "contracts/interfaces/guards/IPlatformGuard.sol:6",
        "inherit": [
          "contracts/interfaces/guards/IGuard.sol:IGuard"
        ],
        "libraries": [],
        "methods": [
          "platformName()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/ITxTrackingGuard.sol:ITxTrackingGuard": {
        "src": "contracts/interfaces/guards/ITxTrackingGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isTxTrackingGuard()",
          "afterTxGuard(address,address,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/AssetLogic.sol:AssetLogic": {
        "src": "contracts/utils/AssetLogic.sol:30",
        "version": {
          "withMetadata": "d50d1ab49190d6f833b1124842ebfa703a45a40534912706a83af295af746662",
          "withoutMetadata": "7fae6f8b65a143a4c7bccdd935e62da265a5d4930269d0c232bedf1ca35447b2",
          "linkedWithoutMetadata": "7fae6f8b65a143a4c7bccdd935e62da265a5d4930269d0c232bedf1ca35447b2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/FeeLogic.sol:FeeLogic": {
        "src": "contracts/utils/FeeLogic.sol:32",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/FeeLogic.sol:IVaultMinter": {
        "src": "contracts/utils/FeeLogic.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "convertToShares(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/TxDataUtils.sol:TxDataUtils": {
        "src": "contracts/utils/TxDataUtils.sol:20",
        "version": {
          "withMetadata": "8cb004785e763015bdeba03de981235690d55637ba6b96312909c6052b135ff9",
          "withoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb",
          "linkedWithoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb"
        },
        "inherit": [],
        "libraries": [
          "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib"
        ],
        "methods": [
          "getMethod(bytes)",
          "getParams(bytes)",
          "getInput(bytes,uint8)",
          "getBytes(bytes,uint8,uint256)",
          "getArrayLast(bytes,uint8)",
          "getArrayLength(bytes,uint8)",
          "getArrayIndex(bytes,uint8,uint8)",
          "read4left(bytes,uint256)",
          "read32(bytes,uint256,uint256)",
          "convert32toAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/VaultLogic.sol:VaultLogic": {
        "src": "contracts/utils/VaultLogic.sol:15",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:ERC4626Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:51",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "decimals()",
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "maxMint(address)",
          "maxWithdraw(address)",
          "maxRedeem(address)",
          "previewDeposit(uint256)",
          "previewMint(uint256)",
          "previewWithdraw(uint256)",
          "previewRedeem(uint256)",
          "deposit(uint256,address)",
          "mint(uint256,address)",
          "withdraw(uint256,address,address)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1621": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(ERC4626Storage)387_storage": {
              "label": "struct ERC4626Upgradeable.ERC4626Storage",
              "members": [
                {
                  "label": "_asset",
                  "type": "t_contract(IERC20)1621",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_underlyingDecimals",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC4626": [
              {
                "contract": "ERC4626Upgradeable",
                "label": "_asset",
                "type": "t_contract(IERC20)1621",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:56",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC4626Upgradeable",
                "label": "_underlyingDecimals",
                "type": "t_uint8",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:57",
                "offset": 20,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)755_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils"
        ],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(EIP712Storage)824_storage": {
              "label": "struct EIP712Upgradeable.EIP712Storage",
              "members": [
                {
                  "label": "_hashedName",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_hashedVersion",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_version",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44",
                "offset": 0,
                "slot": "3"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC1363.sol:IERC1363": {
        "src": "@openzeppelin/contracts/interfaces/IERC1363.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFromAndCall(address,address,uint256)",
          "transferFromAndCall(address,address,uint256,bytes)",
          "approveAndCall(address,uint256)",
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267": {
        "src": "@openzeppelin/contracts/interfaces/IERC5267.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "db5df44becafaf3bbe1dce50a4e5b800698e29607bbd33858e8d63b703068088",
          "withoutMetadata": "7fb5ed68306b380728eee4483ffc46446c67b9fc8cc571f1349f0ca48ad2c9bf",
          "linkedWithoutMetadata": "7fb5ed68306b380728eee4483ffc46446c67b9fc8cc571f1349f0ca48ad2c9bf"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:26"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:15",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "613c0acf87bfe4d12cc4143a0d439ad70fe05bb5fa7359d9fd382a60ce6db3d6",
          "withoutMetadata": "156db0c1c0f718defa5eaa534156f98e88c355328c2ed215498ced894c984c10",
          "linkedWithoutMetadata": "156db0c1c0f718defa5eaa534156f98e88c355328c2ed215498ced894c984c10"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProxyAdmin",
            "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:17",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:62",
        "version": {
          "withMetadata": "d8485658017fc48fe600503bd704240239a8fb5a4dfc6186c57af53c2dd66709",
          "withoutMetadata": "d8485658017fc48fe600503bd704240239a8fb5a4dfc6186c57af53c2dd66709",
          "linkedWithoutMetadata": "d8485658017fc48fe600503bd704240239a8fb5a4dfc6186c57af53c2dd66709"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:79"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_admin",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:67"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:11",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin/contracts/utils/Errors.sol:14",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:13",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils": {
        "src": "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:15",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/Panic.sol:Panic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:11",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/Vault.sol:Vault": {
        "src": "contracts/Vault.sol:30",
        "version": {
          "withMetadata": "4a0cd8143fcd3afe9b7c14b048075a2a2b1cde200f576809640e69cc13d81938",
          "withoutMetadata": "ee8935138547a97f8778da78207509779afba3df4443e3315eb32b62724a3ec8",
          "linkedWithoutMetadata": "ee8935138547a97f8778da78207509779afba3df4443e3315eb32b62724a3ec8"
        },
        "inherit": [
          "contracts/utils/FeeLogic.sol:IVaultMinter",
          "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset",
          "contracts/interfaces/IVault.sol:IVault",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:ERC4626Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "contracts/utils/FeeLogic.sol:FeeLogic",
          "contracts/utils/VaultLogic.sol:VaultLogic",
          "contracts/utils/AssetLogic.sol:AssetLogic",
          "@openzeppelin/contracts/utils/math/Math.sol:Math"
        ],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "emergencyLiquidateAll()",
          "assetBalance(address)",
          "decodeRevertReason(bytes)",
          "totalAssets()",
          "maxDeposit(address)",
          "maxWithdraw(address)",
          "previewDeposit(uint256)",
          "previewWithdraw(uint256)",
          "deposit(uint256,address)",
          "withdraw(uint256,address,address)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "mint(address,uint256)",
          "convertToShares(uint256)",
          "_updateAssetPricesExternal()",
          "addSupportedAsset(address)",
          "batchAddSupportedAssets(address[])",
          "removeSupportedAsset(address)",
          "addSupportedPlatform(string)",
          "removeSupportedPlatform(string)",
          "updateFees(uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "updateOracleProtection(uint256,uint256)",
          "setEmergencyOracleMode(bool)",
          "setEmergencyPrice(address,uint256)",
          "pause()",
          "unpause()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "convertAssetValueToUnderlying(address,uint256)",
          "getAutoRealizationStatus()",
          "previewWithdrawalImpact(uint256)",
          "shouldManagerRealize()",
          "version()",
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)",
          "previewWithdrawalAfterFees(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/Vault.sol:208",
            "expectedLinearization": [
              "ERC20Upgradeable",
              "ERC4626Upgradeable",
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable"
            ],
            "foundOrder": [
              "ERC4626Upgradeable",
              "ERC20Upgradeable",
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable"
            ]
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "underlyingAsset",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:97"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:98"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:99"
            },
            {
              "label": "protocolTreasury",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:100"
            },
            {
              "label": "currentEpoch",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:103"
            },
            {
              "label": "vaultState",
              "offset": 0,
              "slot": "5",
              "type": "t_enum(VaultState)16263",
              "contract": "Vault",
              "src": "contracts/Vault.sol:104"
            },
            {
              "label": "epochStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:105"
            },
            {
              "label": "fundraisingDuration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:106"
            },
            {
              "label": "minFundraisingAmount",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:107"
            },
            {
              "label": "managerFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:111"
            },
            {
              "label": "withdrawalFee",
              "offset": 2,
              "slot": "9",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:112"
            },
            {
              "label": "_totalAssets",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:125"
            },
            {
              "label": "lastRealizationTime",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:126"
            },
            {
              "label": "maxCapacity",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:127"
            },
            {
              "label": "minDepositAmount",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:128"
            },
            {
              "label": "realizationCooldown",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:131"
            },
            {
              "label": "maxPriceDeviationBps",
              "offset": 0,
              "slot": "15",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:132"
            },
            {
              "label": "emergencyOracleMode",
              "offset": 2,
              "slot": "15",
              "type": "t_bool",
              "contract": "Vault",
              "src": "contracts/Vault.sol:133"
            },
            {
              "label": "lastAssetPrices",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:135"
            },
            {
              "label": "currentRealization",
              "offset": 0,
              "slot": "17",
              "type": "t_struct(RealizationState)10023_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:145"
            },
            {
              "label": "supportedAssets",
              "offset": 0,
              "slot": "22",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:148"
            },
            {
              "label": "assetPosition",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:149"
            },
            {
              "label": "isAssetSupported",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:150"
            },
            {
              "label": "supportedPlatforms",
              "offset": 0,
              "slot": "25",
              "type": "t_array(t_string_storage)dyn_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:153"
            },
            {
              "label": "isPlatformSupported",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_string_memory_ptr,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:154"
            },
            {
              "label": "authorizedStrategies",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:157"
            },
            {
              "label": "epochStartAssets",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:160"
            },
            {
              "label": "epochEndAssets",
              "offset": 0,
              "slot": "29",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:161"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1621": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(ERC4626Storage)387_storage": {
              "label": "struct ERC4626Upgradeable.ERC4626Storage",
              "members": [
                {
                  "label": "_asset",
                  "type": "t_contract(IERC20)1621",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_underlyingDecimals",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)755_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]",
              "numberOfBytes": "32"
            },
            "t_enum(VaultState)16263": {
              "label": "enum IVault.VaultState",
              "members": [
                "FUNDRAISING",
                "LIVE"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_bool)": {
              "label": "mapping(string => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RealizationState)10023_storage": {
              "label": "struct Vault.RealizationState",
              "members": [
                {
                  "label": "isRealized",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "realizedAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "preRealizationValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "totalFeesExtracted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC4626": [
              {
                "contract": "ERC4626Upgradeable",
                "label": "_asset",
                "type": "t_contract(IERC20)1621",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:56",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC4626Upgradeable",
                "label": "_underlyingDecimals",
                "type": "t_uint8",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:57",
                "offset": 20,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/VaultFactory.sol:VaultFactory": {
        "src": "contracts/VaultFactory.sol:71",
        "version": {
          "withMetadata": "f1b2153b006fcb311c94fa3aa46429b8b4ce8e3ad929d5fd5a66fd09efb91ae5",
          "withoutMetadata": "745dcdf76d88c302fe9de47097e61bbf49090702724bce5d3d257d026a2ad1c2",
          "linkedWithoutMetadata": "745dcdf76d88c302fe9de47097e61bbf49090702724bce5d3d257d026a2ad1c2"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IHasAssetInfo.sol:IHasAssetInfo",
          "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo",
          "contracts/interfaces/IVaultFactory.sol:IVaultFactory"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "getAdjustedMaxCapacityLimit(address)",
          "getAdjustedMinCapacityLimit(address)",
          "createVault(string,string,address,address,uint256,uint256,uint256)",
          "setAssetWhitelist(address,uint16,bool)",
          "batchSetAssetWhitelist(address[],uint16[],bool[])",
          "getTokenType(address)",
          "getWhitelistedAssets()",
          "setGovernanceAddress(address)",
          "setTreasuryAddress(address)",
          "setAdminAddress(address)",
          "updateVaultFees(address,uint256,uint256)",
          "getAssetHandler()",
          "setAssetHandler(address)",
          "setMaximumSupportedAssetCount(uint256)",
          "getMaximumSupportedAssetCount()",
          "isValidAsset(address)",
          "getAssetPrice(address)",
          "getAssetType(address)",
          "updateVaultImplementation(address)",
          "upgradeVault(address,address)",
          "batchUpgradeVaults(address[],address)",
          "setFactorySettings(uint256,uint256,uint256)",
          "setFactorySettingsInAssetUnits(uint256,uint256,uint256)",
          "getAdjustedCapacityLimits(address)",
          "pause()",
          "unpause()",
          "addUnderlyingAsset(address,uint16)",
          "addWhitelistedAsset(address,uint16)",
          "removeUnderlyingAsset(address)",
          "removeWhitelistedAsset(address)",
          "getUnderlyingAssets()",
          "getUnderlyingAssetCount()",
          "getWhitelistedAssetCount()",
          "isUnderlyingAssetAllowed(address)",
          "isAssetWhitelisted(address)",
          "setGovernanceAddress(bytes32,address)",
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)",
          "hasGuard(address)",
          "getAssetsWithTypes()",
          "getDeployedVaults()",
          "getVaultCount()",
          "getVaultsByManager(address)",
          "getVaultInfo(address)",
          "getDetailedVaultInfo(address)",
          "getFactoryStats()",
          "isValidVault(address)",
          "getVaultManager(address)",
          "addUnderlyingAssetWhitelist(address)",
          "removeUnderlyingAssetWhitelist(address)",
          "setVaultStorageVersion(uint256)",
          "version()",
          "emergencyRecoverAsset(address,uint256)",
          "owner()",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "proxyAdmin",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:85"
            },
            {
              "label": "vaultImplementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:86"
            },
            {
              "label": "implementationVersion",
              "offset": 20,
              "slot": "1",
              "type": "t_uint32",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:87"
            },
            {
              "label": "deployedVaults",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:90"
            },
            {
              "label": "isVault",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:91"
            },
            {
              "label": "vaultManager",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_address)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:92"
            },
            {
              "label": "vaultIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:93"
            },
            {
              "label": "underlyingAssetAllowed",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:96"
            },
            {
              "label": "underlyingAssets",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:97"
            },
            {
              "label": "underlyingAssetIndex",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:98"
            },
            {
              "label": "assetWhitelisted",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:101"
            },
            {
              "label": "tokenType",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint16)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:102"
            },
            {
              "label": "whitelistedAssets",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:103"
            },
            {
              "label": "assetIndex",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:104"
            },
            {
              "label": "governance",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:106"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:107"
            },
            {
              "label": "admin",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:108"
            },
            {
              "label": "_assetHandler",
              "offset": 0,
              "slot": "16",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:110"
            },
            {
              "label": "_maximumSupportedAssetCount",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:111"
            },
            {
              "label": "vaultVersion",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:113"
            },
            {
              "label": "vaultStorageVersion",
              "offset": 0,
              "slot": "19",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:114"
            },
            {
              "label": "maxCapacityLimit",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:117"
            },
            {
              "label": "minCapacityLimit",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:118"
            },
            {
              "label": "creationFee",
              "offset": 0,
              "slot": "22",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:119"
            },
            {
              "label": "governanceAddresses",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:122"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint16)": {
              "label": "mapping(address => uint16)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IAggregatorV3Interface.sol:IAggregatorV3Interface": {
        "src": "contracts/interfaces/IAggregatorV3Interface.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IAssetHandler.sol:IAssetHandler": {
        "src": "contracts/interfaces/IAssetHandler.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addAsset(address,uint16,address)",
          "addAssets(struct IAssetHandler.Asset[])",
          "removeAsset(address)",
          "priceAggregators(address)",
          "assetTypes(address)",
          "getUSDPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IGovernance.sol:IGovernance": {
        "src": "contracts/interfaces/IGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "contractGuards(address)",
          "assetGuards(uint16)",
          "nameToDestination(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasAssetInfo.sol:IHasAssetInfo": {
        "src": "contracts/interfaces/IHasAssetInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidAsset(address)",
          "getAssetPrice(address)",
          "getAssetType(address)",
          "getMaximumSupportedAssetCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo": {
        "src": "contracts/interfaces/IHasGuardInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasOwnable.sol:IHasOwnable": {
        "src": "contracts/interfaces/IHasOwnable.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasPausable.sol:IHasPausable": {
        "src": "contracts/interfaces/IHasPausable.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPaused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset": {
        "src": "contracts/interfaces/IHasSupportedAsset.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:8",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "emergencyLiquidateAll()",
          "addSupportedAsset(address)",
          "batchAddSupportedAssets(address[])",
          "removeSupportedAsset(address)",
          "updateFees(uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "pause()",
          "unpause()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "factory()",
          "manager()",
          "underlyingAsset()",
          "protocolTreasury()",
          "currentEpoch()",
          "vaultState()",
          "epochStartTime()",
          "fundraisingDuration()",
          "minFundraisingAmount()",
          "managerFee()",
          "withdrawalFee()",
          "maxCapacity()",
          "minDepositAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVaultFactory.sol:IVaultFactory": {
        "src": "contracts/interfaces/IVaultFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenType(address)",
          "getAssetType(address)",
          "getDeployedVaults()",
          "getVaultCount()",
          "getVaultsByManager(address)",
          "getVaultInfo(address)",
          "getDetailedVaultInfo(address)",
          "getFactoryStats()",
          "isValidVault(address)",
          "getVaultManager(address)",
          "isAssetWhitelisted(address)",
          "version()",
          "emergencyRecoverAsset(address,uint256)",
          "setTreasuryAddress(address)",
          "setAdminAddress(address)",
          "proxyAdmin()",
          "vaultImplementation()",
          "implementationVersion()",
          "deployedVaults(uint256)",
          "isVault(address)",
          "vaultManager(address)",
          "vaultIndex(address)",
          "underlyingAssetAllowed(address)",
          "tokenType(address)",
          "whitelistedAssets(uint256)",
          "assetIndex(address)",
          "maxCapacityLimit()",
          "minCapacityLimit()",
          "creationFee()",
          "treasury()",
          "admin()",
          "owner()",
          "paused()",
          "governance()",
          "getAssetHandler()",
          "vaultStorageVersion()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard": {
        "src": "contracts/interfaces/guards/IAssetGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard": {
        "src": "contracts/interfaces/guards/IPlatformGuard.sol:6",
        "inherit": [
          "contracts/interfaces/guards/IGuard.sol:IGuard"
        ],
        "libraries": [],
        "methods": [
          "platformName()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/ITxTrackingGuard.sol:ITxTrackingGuard": {
        "src": "contracts/interfaces/guards/ITxTrackingGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isTxTrackingGuard()",
          "afterTxGuard(address,address,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/AssetLogic.sol:AssetLogic": {
        "src": "contracts/utils/AssetLogic.sol:30",
        "version": {
          "withMetadata": "d50d1ab49190d6f833b1124842ebfa703a45a40534912706a83af295af746662",
          "withoutMetadata": "7fae6f8b65a143a4c7bccdd935e62da265a5d4930269d0c232bedf1ca35447b2",
          "linkedWithoutMetadata": "7fae6f8b65a143a4c7bccdd935e62da265a5d4930269d0c232bedf1ca35447b2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/FeeLogic.sol:FeeLogic": {
        "src": "contracts/utils/FeeLogic.sol:32",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/FeeLogic.sol:IVaultMinter": {
        "src": "contracts/utils/FeeLogic.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "convertToShares(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/VaultLogic.sol:VaultLogic": {
        "src": "contracts/utils/VaultLogic.sol:15",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)188_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils"
        ],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(EIP712Storage)277_storage": {
              "label": "struct EIP712Upgradeable.EIP712Storage",
              "members": [
                {
                  "label": "_hashedName",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_hashedVersion",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_version",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44",
                "offset": 0,
                "slot": "3"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267": {
        "src": "@openzeppelin/contracts/interfaces/IERC5267.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "db5df44becafaf3bbe1dce50a4e5b800698e29607bbd33858e8d63b703068088",
          "withoutMetadata": "7fb5ed68306b380728eee4483ffc46446c67b9fc8cc571f1349f0ca48ad2c9bf",
          "linkedWithoutMetadata": "7fb5ed68306b380728eee4483ffc46446c67b9fc8cc571f1349f0ca48ad2c9bf"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:26"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:15",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "613c0acf87bfe4d12cc4143a0d439ad70fe05bb5fa7359d9fd382a60ce6db3d6",
          "withoutMetadata": "156db0c1c0f718defa5eaa534156f98e88c355328c2ed215498ced894c984c10",
          "linkedWithoutMetadata": "156db0c1c0f718defa5eaa534156f98e88c355328c2ed215498ced894c984c10"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProxyAdmin",
            "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:17",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:62",
        "version": {
          "withMetadata": "d8485658017fc48fe600503bd704240239a8fb5a4dfc6186c57af53c2dd66709",
          "withoutMetadata": "d8485658017fc48fe600503bd704240239a8fb5a4dfc6186c57af53c2dd66709",
          "linkedWithoutMetadata": "d8485658017fc48fe600503bd704240239a8fb5a4dfc6186c57af53c2dd66709"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:79"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_admin",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:67"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:29",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:11",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin/contracts/utils/Errors.sol:14",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:13",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils": {
        "src": "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:15",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/Panic.sol:Panic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:11",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/VaultFactory.sol:VaultFactory": {
        "src": "contracts/VaultFactory.sol:71",
        "version": {
          "withMetadata": "f738754243c5d526ffa41fcd9a0e8729230eb2732f7b4f22ac42d6448402d705",
          "withoutMetadata": "8b19ef7fc03dc7287f5d00f36edbea2d739ef685108ea43e5d2f9f795222a311",
          "linkedWithoutMetadata": "8b19ef7fc03dc7287f5d00f36edbea2d739ef685108ea43e5d2f9f795222a311"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IHasAssetInfo.sol:IHasAssetInfo",
          "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo",
          "contracts/interfaces/IVaultFactory.sol:IVaultFactory"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "getAdjustedMaxCapacityLimit(address)",
          "getAdjustedMinCapacityLimit(address)",
          "createVault(string,string,address,address,uint256,uint256,uint256)",
          "setAssetWhitelist(address,uint16,bool)",
          "batchSetAssetWhitelist(address[],uint16[],bool[])",
          "getTokenType(address)",
          "getWhitelistedAssets()",
          "setGovernanceAddress(address)",
          "setTreasuryAddress(address)",
          "setAdminAddress(address)",
          "updateVaultFees(address,uint256,uint256)",
          "getAssetHandler()",
          "setAssetHandler(address)",
          "setMaximumSupportedAssetCount(uint256)",
          "getMaximumSupportedAssetCount()",
          "isValidAsset(address)",
          "getAssetPrice(address)",
          "getAssetType(address)",
          "updateVaultImplementation(address)",
          "upgradeVault(address,address)",
          "batchUpgradeVaults(address[],address)",
          "setFactorySettings(uint256,uint256,uint256)",
          "pause()",
          "unpause()",
          "addUnderlyingAsset(address,uint16)",
          "addWhitelistedAsset(address,uint16)",
          "removeUnderlyingAsset(address)",
          "removeWhitelistedAsset(address)",
          "getUnderlyingAssets()",
          "getUnderlyingAssetCount()",
          "getWhitelistedAssetCount()",
          "isUnderlyingAssetAllowed(address)",
          "isAssetWhitelisted(address)",
          "setGovernanceAddress(bytes32,address)",
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)",
          "hasGuard(address)",
          "getAssetsWithTypes()",
          "getDeployedVaults()",
          "getVaultCount()",
          "getVaultsByManager(address)",
          "getVaultInfo(address)",
          "getDetailedVaultInfo(address)",
          "getFactoryStats()",
          "isValidVault(address)",
          "getVaultManager(address)",
          "addUnderlyingAssetWhitelist(address)",
          "removeUnderlyingAssetWhitelist(address)",
          "setVaultStorageVersion(uint256)",
          "version()",
          "emergencyRecoverAsset(address,uint256)",
          "owner()",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "proxyAdmin",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:85"
            },
            {
              "label": "vaultImplementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:86"
            },
            {
              "label": "implementationVersion",
              "offset": 20,
              "slot": "1",
              "type": "t_uint32",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:87"
            },
            {
              "label": "deployedVaults",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:90"
            },
            {
              "label": "isVault",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:91"
            },
            {
              "label": "vaultManager",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_address)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:92"
            },
            {
              "label": "vaultIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:93"
            },
            {
              "label": "underlyingAssetAllowed",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:96"
            },
            {
              "label": "underlyingAssets",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:97"
            },
            {
              "label": "underlyingAssetIndex",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:98"
            },
            {
              "label": "assetWhitelisted",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:101"
            },
            {
              "label": "tokenType",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint16)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:102"
            },
            {
              "label": "whitelistedAssets",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:103"
            },
            {
              "label": "assetIndex",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:104"
            },
            {
              "label": "governance",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:106"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:107"
            },
            {
              "label": "admin",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:108"
            },
            {
              "label": "_assetHandler",
              "offset": 0,
              "slot": "16",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:110"
            },
            {
              "label": "_maximumSupportedAssetCount",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:111"
            },
            {
              "label": "vaultVersion",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:113"
            },
            {
              "label": "vaultStorageVersion",
              "offset": 0,
              "slot": "19",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:114"
            },
            {
              "label": "maxCapacityLimit",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:117"
            },
            {
              "label": "minCapacityLimit",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:118"
            },
            {
              "label": "creationFee",
              "offset": 0,
              "slot": "22",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:119"
            },
            {
              "label": "governanceAddresses",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:122"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)188_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint16)": {
              "label": "mapping(address => uint16)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IAggregatorV3Interface.sol:IAggregatorV3Interface": {
        "src": "contracts/interfaces/IAggregatorV3Interface.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IAssetHandler.sol:IAssetHandler": {
        "src": "contracts/interfaces/IAssetHandler.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addAsset(address,uint16,address)",
          "addAssets(struct IAssetHandler.Asset[])",
          "removeAsset(address)",
          "priceAggregators(address)",
          "assetTypes(address)",
          "getUSDPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IGovernance.sol:IGovernance": {
        "src": "contracts/interfaces/IGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "contractGuards(address)",
          "assetGuards(uint16)",
          "nameToDestination(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasAssetInfo.sol:IHasAssetInfo": {
        "src": "contracts/interfaces/IHasAssetInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidAsset(address)",
          "getAssetPrice(address)",
          "getAssetType(address)",
          "getMaximumSupportedAssetCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo": {
        "src": "contracts/interfaces/IHasGuardInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasOwnable.sol:IHasOwnable": {
        "src": "contracts/interfaces/IHasOwnable.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasPausable.sol:IHasPausable": {
        "src": "contracts/interfaces/IHasPausable.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPaused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:8",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "emergencyLiquidateAll()",
          "addSupportedAsset(address)",
          "batchAddSupportedAssets(address[])",
          "removeSupportedAsset(address)",
          "updateFees(uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "pause()",
          "unpause()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "factory()",
          "manager()",
          "underlyingAsset()",
          "protocolTreasury()",
          "currentEpoch()",
          "vaultState()",
          "epochStartTime()",
          "fundraisingDuration()",
          "minFundraisingAmount()",
          "managerFee()",
          "withdrawalFee()",
          "maxCapacity()",
          "minDepositAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVaultFactory.sol:IVaultFactory": {
        "src": "contracts/interfaces/IVaultFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenType(address)",
          "getAssetType(address)",
          "getDeployedVaults()",
          "getVaultCount()",
          "getVaultsByManager(address)",
          "getVaultInfo(address)",
          "getDetailedVaultInfo(address)",
          "getFactoryStats()",
          "isValidVault(address)",
          "getVaultManager(address)",
          "isAssetWhitelisted(address)",
          "version()",
          "emergencyRecoverAsset(address,uint256)",
          "setTreasuryAddress(address)",
          "setAdminAddress(address)",
          "proxyAdmin()",
          "vaultImplementation()",
          "implementationVersion()",
          "deployedVaults(uint256)",
          "isVault(address)",
          "vaultManager(address)",
          "vaultIndex(address)",
          "underlyingAssetAllowed(address)",
          "tokenType(address)",
          "whitelistedAssets(uint256)",
          "assetIndex(address)",
          "maxCapacityLimit()",
          "minCapacityLimit()",
          "creationFee()",
          "treasury()",
          "admin()",
          "owner()",
          "paused()",
          "governance()",
          "getAssetHandler()",
          "vaultStorageVersion()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard": {
        "src": "contracts/interfaces/guards/IAssetGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard": {
        "src": "contracts/interfaces/guards/IPlatformGuard.sol:6",
        "inherit": [
          "contracts/interfaces/guards/IGuard.sol:IGuard"
        ],
        "libraries": [],
        "methods": [
          "platformName()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/test/MockERC20.sol:MockERC20": {
        "src": "contracts/test/MockERC20.sol:7",
        "version": {
          "withMetadata": "e71af0425026d2a810f38e867ff97e5342012d420be48984684c04e191a43609",
          "withoutMetadata": "4e043bd241cd87c6b1fd9f26e6ab516493da4bd93c1c7996c78709872b3373c9",
          "linkedWithoutMetadata": "4e043bd241cd87c6b1fd9f26e6ab516493da4bd93c1c7996c78709872b3373c9"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint8,uint256)",
          "decimals()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/test/MockERC20.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "MockERC20",
              "src": "contracts/test/MockERC20.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)188_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils"
        ],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(EIP712Storage)277_storage": {
              "label": "struct EIP712Upgradeable.EIP712Storage",
              "members": [
                {
                  "label": "_hashedName",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_hashedVersion",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_version",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44",
                "offset": 0,
                "slot": "3"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267": {
        "src": "@openzeppelin/contracts/interfaces/IERC5267.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "db5df44becafaf3bbe1dce50a4e5b800698e29607bbd33858e8d63b703068088",
          "withoutMetadata": "7fb5ed68306b380728eee4483ffc46446c67b9fc8cc571f1349f0ca48ad2c9bf",
          "linkedWithoutMetadata": "7fb5ed68306b380728eee4483ffc46446c67b9fc8cc571f1349f0ca48ad2c9bf"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:26"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:15",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "613c0acf87bfe4d12cc4143a0d439ad70fe05bb5fa7359d9fd382a60ce6db3d6",
          "withoutMetadata": "156db0c1c0f718defa5eaa534156f98e88c355328c2ed215498ced894c984c10",
          "linkedWithoutMetadata": "156db0c1c0f718defa5eaa534156f98e88c355328c2ed215498ced894c984c10"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProxyAdmin",
            "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:17",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:62",
        "version": {
          "withMetadata": "d8485658017fc48fe600503bd704240239a8fb5a4dfc6186c57af53c2dd66709",
          "withoutMetadata": "d8485658017fc48fe600503bd704240239a8fb5a4dfc6186c57af53c2dd66709",
          "linkedWithoutMetadata": "d8485658017fc48fe600503bd704240239a8fb5a4dfc6186c57af53c2dd66709"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:79"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_admin",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:67"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)858_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:11",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin/contracts/utils/Errors.sol:14",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:13",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils": {
        "src": "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:15",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/Panic.sol:Panic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:11",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib": {
        "src": "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:11",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/VaultFactory.sol:VaultFactory": {
        "src": "contracts/VaultFactory.sol:71",
        "version": {
          "withMetadata": "f738754243c5d526ffa41fcd9a0e8729230eb2732f7b4f22ac42d6448402d705",
          "withoutMetadata": "8b19ef7fc03dc7287f5d00f36edbea2d739ef685108ea43e5d2f9f795222a311",
          "linkedWithoutMetadata": "8b19ef7fc03dc7287f5d00f36edbea2d739ef685108ea43e5d2f9f795222a311"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IHasAssetInfo.sol:IHasAssetInfo",
          "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo",
          "contracts/interfaces/IVaultFactory.sol:IVaultFactory"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "getAdjustedMaxCapacityLimit(address)",
          "getAdjustedMinCapacityLimit(address)",
          "createVault(string,string,address,address,uint256,uint256,uint256)",
          "setAssetWhitelist(address,uint16,bool)",
          "batchSetAssetWhitelist(address[],uint16[],bool[])",
          "getTokenType(address)",
          "getWhitelistedAssets()",
          "setGovernanceAddress(address)",
          "setTreasuryAddress(address)",
          "setAdminAddress(address)",
          "updateVaultFees(address,uint256,uint256)",
          "getAssetHandler()",
          "setAssetHandler(address)",
          "setMaximumSupportedAssetCount(uint256)",
          "getMaximumSupportedAssetCount()",
          "isValidAsset(address)",
          "getAssetPrice(address)",
          "getAssetType(address)",
          "updateVaultImplementation(address)",
          "upgradeVault(address,address)",
          "batchUpgradeVaults(address[],address)",
          "setFactorySettings(uint256,uint256,uint256)",
          "pause()",
          "unpause()",
          "addUnderlyingAsset(address,uint16)",
          "addWhitelistedAsset(address,uint16)",
          "removeUnderlyingAsset(address)",
          "removeWhitelistedAsset(address)",
          "getUnderlyingAssets()",
          "getUnderlyingAssetCount()",
          "getWhitelistedAssetCount()",
          "isUnderlyingAssetAllowed(address)",
          "isAssetWhitelisted(address)",
          "setGovernanceAddress(bytes32,address)",
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)",
          "hasGuard(address)",
          "getAssetsWithTypes()",
          "getDeployedVaults()",
          "getVaultCount()",
          "getVaultsByManager(address)",
          "getVaultInfo(address)",
          "getDetailedVaultInfo(address)",
          "getFactoryStats()",
          "isValidVault(address)",
          "getVaultManager(address)",
          "addUnderlyingAssetWhitelist(address)",
          "removeUnderlyingAssetWhitelist(address)",
          "setVaultStorageVersion(uint256)",
          "version()",
          "emergencyRecoverAsset(address,uint256)",
          "owner()",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "proxyAdmin",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:85"
            },
            {
              "label": "vaultImplementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:86"
            },
            {
              "label": "implementationVersion",
              "offset": 20,
              "slot": "1",
              "type": "t_uint32",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:87"
            },
            {
              "label": "deployedVaults",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:90"
            },
            {
              "label": "isVault",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:91"
            },
            {
              "label": "vaultManager",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_address)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:92"
            },
            {
              "label": "vaultIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:93"
            },
            {
              "label": "underlyingAssetAllowed",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:96"
            },
            {
              "label": "underlyingAssets",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:97"
            },
            {
              "label": "underlyingAssetIndex",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:98"
            },
            {
              "label": "assetWhitelisted",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:101"
            },
            {
              "label": "tokenType",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint16)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:102"
            },
            {
              "label": "whitelistedAssets",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:103"
            },
            {
              "label": "assetIndex",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:104"
            },
            {
              "label": "governance",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:106"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:107"
            },
            {
              "label": "admin",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:108"
            },
            {
              "label": "_assetHandler",
              "offset": 0,
              "slot": "16",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:110"
            },
            {
              "label": "_maximumSupportedAssetCount",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:111"
            },
            {
              "label": "vaultVersion",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:113"
            },
            {
              "label": "vaultStorageVersion",
              "offset": 0,
              "slot": "19",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:114"
            },
            {
              "label": "maxCapacityLimit",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:117"
            },
            {
              "label": "minCapacityLimit",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:118"
            },
            {
              "label": "creationFee",
              "offset": 0,
              "slot": "22",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:119"
            },
            {
              "label": "governanceAddresses",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:122"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)188_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint16)": {
              "label": "mapping(address => uint16)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/platform/AmbientGuard.sol:AmbientGuard": {
        "src": "contracts/guards/platform/AmbientGuard.sol:28",
        "version": {
          "withMetadata": "835981ec52b71549d254703377ab11b6d213e11ee435a7cc46a71d58c10de14b",
          "withoutMetadata": "917b7d3d24b5e9e0daf50d5a7409b741dbdf2bee868af0f82ccacdc251215ef3",
          "linkedWithoutMetadata": "917b7d3d24b5e9e0daf50d5a7409b741dbdf2bee868af0f82ccacdc251215ef3"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes",
          "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "platformName",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "AmbientGuard",
              "src": "contracts/guards/platform/AmbientGuard.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)858_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IAggregatorV3Interface.sol:IAggregatorV3Interface": {
        "src": "contracts/interfaces/IAggregatorV3Interface.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IAssetHandler.sol:IAssetHandler": {
        "src": "contracts/interfaces/IAssetHandler.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addAsset(address,uint16,address)",
          "addAssets(struct IAssetHandler.Asset[])",
          "removeAsset(address)",
          "priceAggregators(address)",
          "assetTypes(address)",
          "getUSDPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IGovernance.sol:IGovernance": {
        "src": "contracts/interfaces/IGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "contractGuards(address)",
          "assetGuards(uint16)",
          "nameToDestination(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasAssetInfo.sol:IHasAssetInfo": {
        "src": "contracts/interfaces/IHasAssetInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidAsset(address)",
          "getAssetPrice(address)",
          "getAssetType(address)",
          "getMaximumSupportedAssetCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo": {
        "src": "contracts/interfaces/IHasGuardInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasOwnable.sol:IHasOwnable": {
        "src": "contracts/interfaces/IHasOwnable.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasPausable.sol:IHasPausable": {
        "src": "contracts/interfaces/IHasPausable.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPaused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset": {
        "src": "contracts/interfaces/IHasSupportedAsset.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes": {
        "src": "contracts/interfaces/ITransactionTypes.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:8",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "emergencyLiquidateAll()",
          "addSupportedAsset(address)",
          "batchAddSupportedAssets(address[])",
          "removeSupportedAsset(address)",
          "updateFees(uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "pause()",
          "unpause()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "factory()",
          "manager()",
          "underlyingAsset()",
          "protocolTreasury()",
          "currentEpoch()",
          "vaultState()",
          "epochStartTime()",
          "fundraisingDuration()",
          "minFundraisingAmount()",
          "managerFee()",
          "withdrawalFee()",
          "maxCapacity()",
          "minDepositAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVaultFactory.sol:IVaultFactory": {
        "src": "contracts/interfaces/IVaultFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenType(address)",
          "getAssetType(address)",
          "getDeployedVaults()",
          "getVaultCount()",
          "getVaultsByManager(address)",
          "getVaultInfo(address)",
          "getDetailedVaultInfo(address)",
          "getFactoryStats()",
          "isValidVault(address)",
          "getVaultManager(address)",
          "isAssetWhitelisted(address)",
          "version()",
          "emergencyRecoverAsset(address,uint256)",
          "setTreasuryAddress(address)",
          "setAdminAddress(address)",
          "proxyAdmin()",
          "vaultImplementation()",
          "implementationVersion()",
          "deployedVaults(uint256)",
          "isVault(address)",
          "vaultManager(address)",
          "vaultIndex(address)",
          "underlyingAssetAllowed(address)",
          "tokenType(address)",
          "whitelistedAssets(uint256)",
          "assetIndex(address)",
          "maxCapacityLimit()",
          "minCapacityLimit()",
          "creationFee()",
          "treasury()",
          "admin()",
          "owner()",
          "paused()",
          "governance()",
          "getAssetHandler()",
          "vaultStorageVersion()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/ambient/ICrocSwapDex.sol:ICrocSwapDex": {
        "src": "contracts/interfaces/external/ambient/ICrocSwapDex.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userCmd(uint16,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard": {
        "src": "contracts/interfaces/guards/IAssetGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard": {
        "src": "contracts/interfaces/guards/IPlatformGuard.sol:6",
        "inherit": [
          "contracts/interfaces/guards/IGuard.sol:IGuard"
        ],
        "libraries": [],
        "methods": [
          "platformName()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/TxDataUtils.sol:TxDataUtils": {
        "src": "contracts/utils/TxDataUtils.sol:20",
        "version": {
          "withMetadata": "8cb004785e763015bdeba03de981235690d55637ba6b96312909c6052b135ff9",
          "withoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb",
          "linkedWithoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb"
        },
        "inherit": [],
        "libraries": [
          "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib"
        ],
        "methods": [
          "getMethod(bytes)",
          "getParams(bytes)",
          "getInput(bytes,uint8)",
          "getBytes(bytes,uint8,uint256)",
          "getArrayLast(bytes,uint8)",
          "getArrayLength(bytes,uint8)",
          "getArrayIndex(bytes,uint8,uint8)",
          "read4left(bytes,uint256)",
          "read32(bytes,uint256,uint256)",
          "convert32toAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)162_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib": {
        "src": "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:11",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/asset/AmbientAssetGuard.sol:AmbientAssetGuard": {
        "src": "contracts/guards/asset/AmbientAssetGuard.sol:26",
        "version": {
          "withMetadata": "139983fdfbc83a0d8777a98edbc85426c0d82bb5c99e22486cae67c0f39a6a74",
          "withoutMetadata": "09c367d26feff058e151560aee2cfcb6937b743249502cc53d43aa4160946748",
          "linkedWithoutMetadata": "09c367d26feff058e151560aee2cfcb6937b743249502cc53d43aa4160946748"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)",
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)",
          "setPoolConfig(address,address,uint256)",
          "getRangeTokens(address,address,address,int24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "crocQueryEndpoint",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "AmbientAssetGuard",
              "src": "contracts/guards/asset/AmbientAssetGuard.sol:28"
            },
            {
              "label": "poolConfigs",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "AmbientAssetGuard",
              "src": "contracts/guards/asset/AmbientAssetGuard.sol:31"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)162_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasAssetInfo.sol:IHasAssetInfo": {
        "src": "contracts/interfaces/IHasAssetInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidAsset(address)",
          "getAssetPrice(address)",
          "getAssetType(address)",
          "getMaximumSupportedAssetCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo": {
        "src": "contracts/interfaces/IHasGuardInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset": {
        "src": "contracts/interfaces/IHasSupportedAsset.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:8",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "emergencyLiquidateAll()",
          "addSupportedAsset(address)",
          "batchAddSupportedAssets(address[])",
          "removeSupportedAsset(address)",
          "updateFees(uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "pause()",
          "unpause()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "factory()",
          "manager()",
          "underlyingAsset()",
          "protocolTreasury()",
          "currentEpoch()",
          "vaultState()",
          "epochStartTime()",
          "fundraisingDuration()",
          "minFundraisingAmount()",
          "managerFee()",
          "withdrawalFee()",
          "maxCapacity()",
          "minDepositAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/ambient/ICrocQuery.sol:ICrocQuery": {
        "src": "contracts/interfaces/external/ambient/ICrocQuery.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "queryPrice(address,address,uint256)",
          "queryCurve(address,address,uint256)",
          "queryCurveTick(address,address,uint256)",
          "queryRangeTokens(address,address,address,uint256,int24,int24)",
          "queryRangePosition(address,address,address,uint256,int24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard": {
        "src": "contracts/interfaces/guards/IAssetGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/TxDataUtils.sol:TxDataUtils": {
        "src": "contracts/utils/TxDataUtils.sol:20",
        "version": {
          "withMetadata": "8cb004785e763015bdeba03de981235690d55637ba6b96312909c6052b135ff9",
          "withoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb",
          "linkedWithoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb"
        },
        "inherit": [],
        "libraries": [
          "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib"
        ],
        "methods": [
          "getMethod(bytes)",
          "getParams(bytes)",
          "getInput(bytes,uint8)",
          "getBytes(bytes,uint8,uint256)",
          "getArrayLast(bytes,uint8)",
          "getArrayLength(bytes,uint8)",
          "getArrayIndex(bytes,uint8,uint8)",
          "read4left(bytes,uint256)",
          "read32(bytes,uint256,uint256)",
          "convert32toAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)162_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib": {
        "src": "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:11",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/asset/AmbientAssetGuard.sol:AmbientAssetGuard": {
        "src": "contracts/guards/asset/AmbientAssetGuard.sol:26",
        "version": {
          "withMetadata": "139983fdfbc83a0d8777a98edbc85426c0d82bb5c99e22486cae67c0f39a6a74",
          "withoutMetadata": "09c367d26feff058e151560aee2cfcb6937b743249502cc53d43aa4160946748",
          "linkedWithoutMetadata": "09c367d26feff058e151560aee2cfcb6937b743249502cc53d43aa4160946748"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)",
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)",
          "setPoolConfig(address,address,uint256)",
          "getRangeTokens(address,address,address,int24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "crocQueryEndpoint",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "AmbientAssetGuard",
              "src": "contracts/guards/asset/AmbientAssetGuard.sol:28"
            },
            {
              "label": "poolConfigs",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "AmbientAssetGuard",
              "src": "contracts/guards/asset/AmbientAssetGuard.sol:31"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)162_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasAssetInfo.sol:IHasAssetInfo": {
        "src": "contracts/interfaces/IHasAssetInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidAsset(address)",
          "getAssetPrice(address)",
          "getAssetType(address)",
          "getMaximumSupportedAssetCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo": {
        "src": "contracts/interfaces/IHasGuardInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset": {
        "src": "contracts/interfaces/IHasSupportedAsset.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:8",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "emergencyLiquidateAll()",
          "addSupportedAsset(address)",
          "batchAddSupportedAssets(address[])",
          "removeSupportedAsset(address)",
          "updateFees(uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "pause()",
          "unpause()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "factory()",
          "manager()",
          "underlyingAsset()",
          "protocolTreasury()",
          "currentEpoch()",
          "vaultState()",
          "epochStartTime()",
          "fundraisingDuration()",
          "minFundraisingAmount()",
          "managerFee()",
          "withdrawalFee()",
          "maxCapacity()",
          "minDepositAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/ambient/ICrocQuery.sol:ICrocQuery": {
        "src": "contracts/interfaces/external/ambient/ICrocQuery.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "queryPrice(address,address,uint256)",
          "queryCurve(address,address,uint256)",
          "queryCurveTick(address,address,int24)",
          "queryRangeTokens(address,address,address,uint256,int24,int24)",
          "queryRangePosition(address,address,address,uint256,int24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard": {
        "src": "contracts/interfaces/guards/IAssetGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/TxDataUtils.sol:TxDataUtils": {
        "src": "contracts/utils/TxDataUtils.sol:20",
        "version": {
          "withMetadata": "8cb004785e763015bdeba03de981235690d55637ba6b96312909c6052b135ff9",
          "withoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb",
          "linkedWithoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb"
        },
        "inherit": [],
        "libraries": [
          "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib"
        ],
        "methods": [
          "getMethod(bytes)",
          "getParams(bytes)",
          "getInput(bytes,uint8)",
          "getBytes(bytes,uint8,uint256)",
          "getArrayLast(bytes,uint8)",
          "getArrayLength(bytes,uint8)",
          "getArrayIndex(bytes,uint8,uint8)",
          "read4left(bytes,uint256)",
          "read32(bytes,uint256,uint256)",
          "convert32toAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)162_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib": {
        "src": "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:11",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/asset/AmbientAssetGuard.sol:AmbientAssetGuard": {
        "src": "contracts/guards/asset/AmbientAssetGuard.sol:26",
        "version": {
          "withMetadata": "139983fdfbc83a0d8777a98edbc85426c0d82bb5c99e22486cae67c0f39a6a74",
          "withoutMetadata": "09c367d26feff058e151560aee2cfcb6937b743249502cc53d43aa4160946748",
          "linkedWithoutMetadata": "09c367d26feff058e151560aee2cfcb6937b743249502cc53d43aa4160946748"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)",
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)",
          "setPoolConfig(address,address,uint256)",
          "getRangeTokens(address,address,address,int24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "crocQueryEndpoint",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "AmbientAssetGuard",
              "src": "contracts/guards/asset/AmbientAssetGuard.sol:28"
            },
            {
              "label": "poolConfigs",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "AmbientAssetGuard",
              "src": "contracts/guards/asset/AmbientAssetGuard.sol:31"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)162_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasAssetInfo.sol:IHasAssetInfo": {
        "src": "contracts/interfaces/IHasAssetInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidAsset(address)",
          "getAssetPrice(address)",
          "getAssetType(address)",
          "getMaximumSupportedAssetCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo": {
        "src": "contracts/interfaces/IHasGuardInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset": {
        "src": "contracts/interfaces/IHasSupportedAsset.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:8",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "emergencyLiquidateAll()",
          "addSupportedAsset(address)",
          "batchAddSupportedAssets(address[])",
          "removeSupportedAsset(address)",
          "updateFees(uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "pause()",
          "unpause()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "factory()",
          "manager()",
          "underlyingAsset()",
          "protocolTreasury()",
          "currentEpoch()",
          "vaultState()",
          "epochStartTime()",
          "fundraisingDuration()",
          "minFundraisingAmount()",
          "managerFee()",
          "withdrawalFee()",
          "maxCapacity()",
          "minDepositAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/ambient/ICrocQuery.sol:ICrocQuery": {
        "src": "contracts/interfaces/external/ambient/ICrocQuery.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "queryPrice(address,address,uint256)",
          "queryCurve(address,address,uint256)",
          "queryCurveTick(address,address,int24)",
          "queryRangeTokens(address,address,address,uint256,int24,int24)",
          "queryRangePosition(address,address,address,uint256,int24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard": {
        "src": "contracts/interfaces/guards/IAssetGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/TxDataUtils.sol:TxDataUtils": {
        "src": "contracts/utils/TxDataUtils.sol:20",
        "version": {
          "withMetadata": "8cb004785e763015bdeba03de981235690d55637ba6b96312909c6052b135ff9",
          "withoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb",
          "linkedWithoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb"
        },
        "inherit": [],
        "libraries": [
          "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib"
        ],
        "methods": [
          "getMethod(bytes)",
          "getParams(bytes)",
          "getInput(bytes,uint8)",
          "getBytes(bytes,uint8,uint256)",
          "getArrayLast(bytes,uint8)",
          "getArrayLength(bytes,uint8)",
          "getArrayIndex(bytes,uint8,uint8)",
          "read4left(bytes,uint256)",
          "read32(bytes,uint256,uint256)",
          "convert32toAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)162_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib": {
        "src": "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:11",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/asset/AmbientAssetGuard.sol:AmbientAssetGuard": {
        "src": "contracts/guards/asset/AmbientAssetGuard.sol:26",
        "version": {
          "withMetadata": "139983fdfbc83a0d8777a98edbc85426c0d82bb5c99e22486cae67c0f39a6a74",
          "withoutMetadata": "09c367d26feff058e151560aee2cfcb6937b743249502cc53d43aa4160946748",
          "linkedWithoutMetadata": "09c367d26feff058e151560aee2cfcb6937b743249502cc53d43aa4160946748"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)",
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)",
          "setPoolConfig(address,address,uint256)",
          "getRangeTokens(address,address,address,int24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "crocQueryEndpoint",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "AmbientAssetGuard",
              "src": "contracts/guards/asset/AmbientAssetGuard.sol:28"
            },
            {
              "label": "poolConfigs",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "AmbientAssetGuard",
              "src": "contracts/guards/asset/AmbientAssetGuard.sol:31"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)162_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasAssetInfo.sol:IHasAssetInfo": {
        "src": "contracts/interfaces/IHasAssetInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidAsset(address)",
          "getAssetPrice(address)",
          "getAssetType(address)",
          "getMaximumSupportedAssetCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo": {
        "src": "contracts/interfaces/IHasGuardInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset": {
        "src": "contracts/interfaces/IHasSupportedAsset.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:8",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "emergencyLiquidateAll()",
          "addSupportedAsset(address)",
          "batchAddSupportedAssets(address[])",
          "removeSupportedAsset(address)",
          "updateFees(uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "pause()",
          "unpause()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "factory()",
          "manager()",
          "underlyingAsset()",
          "protocolTreasury()",
          "currentEpoch()",
          "vaultState()",
          "epochStartTime()",
          "fundraisingDuration()",
          "minFundraisingAmount()",
          "managerFee()",
          "withdrawalFee()",
          "maxCapacity()",
          "minDepositAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/ambient/ICrocQuery.sol:ICrocQuery": {
        "src": "contracts/interfaces/external/ambient/ICrocQuery.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "queryPrice(address,address,uint256)",
          "queryCurve(address,address,uint256)",
          "queryCurveTick(address,address,uint256,int24)",
          "queryRangeTokens(address,address,address,uint256,int24,int24)",
          "queryRangePosition(address,address,address,uint256,int24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard": {
        "src": "contracts/interfaces/guards/IAssetGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/TxDataUtils.sol:TxDataUtils": {
        "src": "contracts/utils/TxDataUtils.sol:20",
        "version": {
          "withMetadata": "8cb004785e763015bdeba03de981235690d55637ba6b96312909c6052b135ff9",
          "withoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb",
          "linkedWithoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb"
        },
        "inherit": [],
        "libraries": [
          "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib"
        ],
        "methods": [
          "getMethod(bytes)",
          "getParams(bytes)",
          "getInput(bytes,uint8)",
          "getBytes(bytes,uint8,uint256)",
          "getArrayLast(bytes,uint8)",
          "getArrayLength(bytes,uint8)",
          "getArrayIndex(bytes,uint8,uint8)",
          "read4left(bytes,uint256)",
          "read32(bytes,uint256,uint256)",
          "convert32toAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)162_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib": {
        "src": "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:11",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/asset/AmbientAssetGuard.sol:AmbientAssetGuard": {
        "src": "contracts/guards/asset/AmbientAssetGuard.sol:26",
        "version": {
          "withMetadata": "139983fdfbc83a0d8777a98edbc85426c0d82bb5c99e22486cae67c0f39a6a74",
          "withoutMetadata": "09c367d26feff058e151560aee2cfcb6937b743249502cc53d43aa4160946748",
          "linkedWithoutMetadata": "09c367d26feff058e151560aee2cfcb6937b743249502cc53d43aa4160946748"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)",
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)",
          "setPoolConfig(address,address,uint256)",
          "getRangeTokens(address,address,address,int24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "crocQueryEndpoint",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "AmbientAssetGuard",
              "src": "contracts/guards/asset/AmbientAssetGuard.sol:28"
            },
            {
              "label": "poolConfigs",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "AmbientAssetGuard",
              "src": "contracts/guards/asset/AmbientAssetGuard.sol:31"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)162_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasAssetInfo.sol:IHasAssetInfo": {
        "src": "contracts/interfaces/IHasAssetInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidAsset(address)",
          "getAssetPrice(address)",
          "getAssetType(address)",
          "getMaximumSupportedAssetCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo": {
        "src": "contracts/interfaces/IHasGuardInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset": {
        "src": "contracts/interfaces/IHasSupportedAsset.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:8",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "emergencyLiquidateAll()",
          "addSupportedAsset(address)",
          "batchAddSupportedAssets(address[])",
          "removeSupportedAsset(address)",
          "updateFees(uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "pause()",
          "unpause()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "factory()",
          "manager()",
          "underlyingAsset()",
          "protocolTreasury()",
          "currentEpoch()",
          "vaultState()",
          "epochStartTime()",
          "fundraisingDuration()",
          "minFundraisingAmount()",
          "managerFee()",
          "withdrawalFee()",
          "maxCapacity()",
          "minDepositAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/ambient/ICrocQuery.sol:ICrocQuery": {
        "src": "contracts/interfaces/external/ambient/ICrocQuery.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "queryPrice(address,address,uint256)",
          "queryCurve(address,address,uint256)",
          "queryRangeTokens(address,address,address,uint256,int24,int24)",
          "queryRangePosition(address,address,address,uint256,int24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard": {
        "src": "contracts/interfaces/guards/IAssetGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/TxDataUtils.sol:TxDataUtils": {
        "src": "contracts/utils/TxDataUtils.sol:20",
        "version": {
          "withMetadata": "8cb004785e763015bdeba03de981235690d55637ba6b96312909c6052b135ff9",
          "withoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb",
          "linkedWithoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb"
        },
        "inherit": [],
        "libraries": [
          "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib"
        ],
        "methods": [
          "getMethod(bytes)",
          "getParams(bytes)",
          "getInput(bytes,uint8)",
          "getBytes(bytes,uint8,uint256)",
          "getArrayLast(bytes,uint8)",
          "getArrayLength(bytes,uint8)",
          "getArrayIndex(bytes,uint8,uint8)",
          "read4left(bytes,uint256)",
          "read32(bytes,uint256,uint256)",
          "convert32toAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)162_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib": {
        "src": "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:11",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/asset/AmbientAssetGuard.sol:AmbientAssetGuard": {
        "src": "contracts/guards/asset/AmbientAssetGuard.sol:26",
        "version": {
          "withMetadata": "7adec3db9ea6731f18292e55fca55cce80c76356b170a4f83f6cb328125c7dcb",
          "withoutMetadata": "97b71f402eb2373c17ef92e608677ab7bd2a6f87a7bfa3951ab068aa6848a556",
          "linkedWithoutMetadata": "97b71f402eb2373c17ef92e608677ab7bd2a6f87a7bfa3951ab068aa6848a556"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)",
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)",
          "setPoolConfig(address,address,uint256)",
          "getAmbientTokens(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "crocQueryEndpoint",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "AmbientAssetGuard",
              "src": "contracts/guards/asset/AmbientAssetGuard.sol:28"
            },
            {
              "label": "poolConfigs",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "AmbientAssetGuard",
              "src": "contracts/guards/asset/AmbientAssetGuard.sol:31"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)162_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasAssetInfo.sol:IHasAssetInfo": {
        "src": "contracts/interfaces/IHasAssetInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidAsset(address)",
          "getAssetPrice(address)",
          "getAssetType(address)",
          "getMaximumSupportedAssetCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo": {
        "src": "contracts/interfaces/IHasGuardInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset": {
        "src": "contracts/interfaces/IHasSupportedAsset.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:8",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "emergencyLiquidateAll()",
          "addSupportedAsset(address)",
          "batchAddSupportedAssets(address[])",
          "removeSupportedAsset(address)",
          "updateFees(uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "pause()",
          "unpause()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "factory()",
          "manager()",
          "underlyingAsset()",
          "protocolTreasury()",
          "currentEpoch()",
          "vaultState()",
          "epochStartTime()",
          "fundraisingDuration()",
          "minFundraisingAmount()",
          "managerFee()",
          "withdrawalFee()",
          "maxCapacity()",
          "minDepositAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/ambient/ICrocQuery.sol:ICrocQuery": {
        "src": "contracts/interfaces/external/ambient/ICrocQuery.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "queryPrice(address,address,uint256)",
          "queryCurve(address,address,uint256)",
          "queryAmbientTokens(address,address,address,uint256)",
          "queryAmbientPosition(address,address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard": {
        "src": "contracts/interfaces/guards/IAssetGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/TxDataUtils.sol:TxDataUtils": {
        "src": "contracts/utils/TxDataUtils.sol:20",
        "version": {
          "withMetadata": "8cb004785e763015bdeba03de981235690d55637ba6b96312909c6052b135ff9",
          "withoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb",
          "linkedWithoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb"
        },
        "inherit": [],
        "libraries": [
          "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib"
        ],
        "methods": [
          "getMethod(bytes)",
          "getParams(bytes)",
          "getInput(bytes,uint8)",
          "getBytes(bytes,uint8,uint256)",
          "getArrayLast(bytes,uint8)",
          "getArrayLength(bytes,uint8)",
          "getArrayIndex(bytes,uint8,uint8)",
          "read4left(bytes,uint256)",
          "read32(bytes,uint256,uint256)",
          "convert32toAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:ERC4626Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:51",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "decimals()",
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "maxMint(address)",
          "maxWithdraw(address)",
          "maxRedeem(address)",
          "previewDeposit(uint256)",
          "previewMint(uint256)",
          "previewWithdraw(uint256)",
          "previewRedeem(uint256)",
          "deposit(uint256,address)",
          "mint(uint256,address)",
          "withdraw(uint256,address,address)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1865": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(ERC4626Storage)387_storage": {
              "label": "struct ERC4626Upgradeable.ERC4626Storage",
              "members": [
                {
                  "label": "_asset",
                  "type": "t_contract(IERC20)1865",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_underlyingDecimals",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC4626": [
              {
                "contract": "ERC4626Upgradeable",
                "label": "_asset",
                "type": "t_contract(IERC20)1865",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:56",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC4626Upgradeable",
                "label": "_underlyingDecimals",
                "type": "t_uint8",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:57",
                "offset": 20,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)755_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils"
        ],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(EIP712Storage)824_storage": {
              "label": "struct EIP712Upgradeable.EIP712Storage",
              "members": [
                {
                  "label": "_hashedName",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_hashedVersion",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_version",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44",
                "offset": 0,
                "slot": "3"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC1363.sol:IERC1363": {
        "src": "@openzeppelin/contracts/interfaces/IERC1363.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFromAndCall(address,address,uint256)",
          "transferFromAndCall(address,address,uint256,bytes)",
          "approveAndCall(address,uint256)",
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626": {
        "src": "@openzeppelin/contracts/interfaces/IERC4626.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "asset()",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "maxDeposit(address)",
          "previewDeposit(uint256)",
          "deposit(uint256,address)",
          "maxMint(address)",
          "previewMint(uint256)",
          "mint(uint256,address)",
          "maxWithdraw(address)",
          "previewWithdraw(uint256)",
          "withdraw(uint256,address,address)",
          "maxRedeem(address)",
          "previewRedeem(uint256)",
          "redeem(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267": {
        "src": "@openzeppelin/contracts/interfaces/IERC5267.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "db5df44becafaf3bbe1dce50a4e5b800698e29607bbd33858e8d63b703068088",
          "withoutMetadata": "7fb5ed68306b380728eee4483ffc46446c67b9fc8cc571f1349f0ca48ad2c9bf",
          "linkedWithoutMetadata": "7fb5ed68306b380728eee4483ffc46446c67b9fc8cc571f1349f0ca48ad2c9bf"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:26"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:15",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "613c0acf87bfe4d12cc4143a0d439ad70fe05bb5fa7359d9fd382a60ce6db3d6",
          "withoutMetadata": "156db0c1c0f718defa5eaa534156f98e88c355328c2ed215498ced894c984c10",
          "linkedWithoutMetadata": "156db0c1c0f718defa5eaa534156f98e88c355328c2ed215498ced894c984c10"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProxyAdmin",
            "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:17",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:62",
        "version": {
          "withMetadata": "d8485658017fc48fe600503bd704240239a8fb5a4dfc6186c57af53c2dd66709",
          "withoutMetadata": "d8485658017fc48fe600503bd704240239a8fb5a4dfc6186c57af53c2dd66709",
          "linkedWithoutMetadata": "d8485658017fc48fe600503bd704240239a8fb5a4dfc6186c57af53c2dd66709"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:79"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_admin",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:67"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1566_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:29",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:11",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin/contracts/utils/Errors.sol:14",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:13",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils": {
        "src": "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:15",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/Panic.sol:Panic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:11",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib": {
        "src": "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:11",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@uniswap/v3-periphery/contracts/libraries/Path.sol:Path": {
        "src": "@uniswap/v3-periphery/contracts/libraries/Path.sol:7",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/Governance.sol:Governance": {
        "src": "contracts/Governance.sol:19",
        "version": {
          "withMetadata": "42edc61192b2f406c21ad42c3585a1ba8224f18dfe6a6751ce18a8544850eae8",
          "withoutMetadata": "494f9a55307d6b14f94de2d12085d3dafa2ae23b3cf70d935067bd0d9c64692b",
          "linkedWithoutMetadata": "494f9a55307d6b14f94de2d12085d3dafa2ae23b3cf70d935067bd0d9c64692b"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IGovernance.sol:IGovernance"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "setContractGuard(address,address)",
          "setAssetGuard(uint16,address)",
          "setAddresses(struct Governance.ContractName[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "contractGuards",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Governance",
              "src": "contracts/Governance.sol:30"
            },
            {
              "label": "assetGuards",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint16,t_address)",
              "contract": "Governance",
              "src": "contracts/Governance.sol:31"
            },
            {
              "label": "nameToDestination",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "Governance",
              "src": "contracts/Governance.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint16,t_address)": {
              "label": "mapping(uint16 => address)",
              "numberOfBytes": "32"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/Vault.sol:Vault": {
        "src": "contracts/Vault.sol:30",
        "version": {
          "withMetadata": "4a0cd8143fcd3afe9b7c14b048075a2a2b1cde200f576809640e69cc13d81938",
          "withoutMetadata": "ee8935138547a97f8778da78207509779afba3df4443e3315eb32b62724a3ec8",
          "linkedWithoutMetadata": "ee8935138547a97f8778da78207509779afba3df4443e3315eb32b62724a3ec8"
        },
        "inherit": [
          "contracts/utils/FeeLogic.sol:IVaultMinter",
          "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset",
          "contracts/interfaces/IVault.sol:IVault",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:ERC4626Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "contracts/utils/FeeLogic.sol:FeeLogic",
          "contracts/utils/VaultLogic.sol:VaultLogic",
          "contracts/utils/AssetLogic.sol:AssetLogic",
          "@openzeppelin/contracts/utils/math/Math.sol:Math"
        ],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "emergencyLiquidateAll()",
          "assetBalance(address)",
          "decodeRevertReason(bytes)",
          "totalAssets()",
          "maxDeposit(address)",
          "maxWithdraw(address)",
          "previewDeposit(uint256)",
          "previewWithdraw(uint256)",
          "deposit(uint256,address)",
          "withdraw(uint256,address,address)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "mint(address,uint256)",
          "convertToShares(uint256)",
          "_updateAssetPricesExternal()",
          "addSupportedAsset(address)",
          "batchAddSupportedAssets(address[])",
          "removeSupportedAsset(address)",
          "addSupportedPlatform(string)",
          "removeSupportedPlatform(string)",
          "updateFees(uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "updateOracleProtection(uint256,uint256)",
          "setEmergencyOracleMode(bool)",
          "setEmergencyPrice(address,uint256)",
          "pause()",
          "unpause()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "convertAssetValueToUnderlying(address,uint256)",
          "getAutoRealizationStatus()",
          "previewWithdrawalImpact(uint256)",
          "shouldManagerRealize()",
          "version()",
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)",
          "previewWithdrawalAfterFees(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/Vault.sol:208",
            "expectedLinearization": [
              "ERC20Upgradeable",
              "ERC4626Upgradeable",
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable"
            ],
            "foundOrder": [
              "ERC4626Upgradeable",
              "ERC20Upgradeable",
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable"
            ]
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "underlyingAsset",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:97"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:98"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:99"
            },
            {
              "label": "protocolTreasury",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Vault",
              "src": "contracts/Vault.sol:100"
            },
            {
              "label": "currentEpoch",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:103"
            },
            {
              "label": "vaultState",
              "offset": 0,
              "slot": "5",
              "type": "t_enum(VaultState)19023",
              "contract": "Vault",
              "src": "contracts/Vault.sol:104"
            },
            {
              "label": "epochStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:105"
            },
            {
              "label": "fundraisingDuration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:106"
            },
            {
              "label": "minFundraisingAmount",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:107"
            },
            {
              "label": "managerFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:111"
            },
            {
              "label": "withdrawalFee",
              "offset": 2,
              "slot": "9",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:112"
            },
            {
              "label": "_totalAssets",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:125"
            },
            {
              "label": "lastRealizationTime",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:126"
            },
            {
              "label": "maxCapacity",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:127"
            },
            {
              "label": "minDepositAmount",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:128"
            },
            {
              "label": "realizationCooldown",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Vault",
              "src": "contracts/Vault.sol:131"
            },
            {
              "label": "maxPriceDeviationBps",
              "offset": 0,
              "slot": "15",
              "type": "t_uint16",
              "contract": "Vault",
              "src": "contracts/Vault.sol:132"
            },
            {
              "label": "emergencyOracleMode",
              "offset": 2,
              "slot": "15",
              "type": "t_bool",
              "contract": "Vault",
              "src": "contracts/Vault.sol:133"
            },
            {
              "label": "lastAssetPrices",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:135"
            },
            {
              "label": "currentRealization",
              "offset": 0,
              "slot": "17",
              "type": "t_struct(RealizationState)11265_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:145"
            },
            {
              "label": "supportedAssets",
              "offset": 0,
              "slot": "22",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:148"
            },
            {
              "label": "assetPosition",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:149"
            },
            {
              "label": "isAssetSupported",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:150"
            },
            {
              "label": "supportedPlatforms",
              "offset": 0,
              "slot": "25",
              "type": "t_array(t_string_storage)dyn_storage",
              "contract": "Vault",
              "src": "contracts/Vault.sol:153"
            },
            {
              "label": "isPlatformSupported",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_string_memory_ptr,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:154"
            },
            {
              "label": "authorizedStrategies",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:157"
            },
            {
              "label": "epochStartAssets",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:160"
            },
            {
              "label": "epochEndAssets",
              "offset": 0,
              "slot": "29",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "Vault",
              "src": "contracts/Vault.sol:161"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1865": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)185_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(ERC4626Storage)387_storage": {
              "label": "struct ERC4626Upgradeable.ERC4626Storage",
              "members": [
                {
                  "label": "_asset",
                  "type": "t_contract(IERC20)1865",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_underlyingDecimals",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)755_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]",
              "numberOfBytes": "32"
            },
            "t_enum(VaultState)19023": {
              "label": "enum IVault.VaultState",
              "members": [
                "FUNDRAISING",
                "LIVE"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_bool)": {
              "label": "mapping(string => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RealizationState)11265_storage": {
              "label": "struct Vault.RealizationState",
              "members": [
                {
                  "label": "isRealized",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "realizedAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "preRealizationValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "totalFeesExtracted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC4626": [
              {
                "contract": "ERC4626Upgradeable",
                "label": "_asset",
                "type": "t_contract(IERC20)1865",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:56",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC4626Upgradeable",
                "label": "_underlyingDecimals",
                "type": "t_uint8",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:57",
                "offset": 20,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/VaultFactory.sol:VaultFactory": {
        "src": "contracts/VaultFactory.sol:71",
        "version": {
          "withMetadata": "aaa010642427c9cf8d4f71d28530d00527f452d485b31b4b7b4f57632200775f",
          "withoutMetadata": "6de5c07f4f6f245203f00c193040e488fc195e227f97de002ed49bdf24c7d210",
          "linkedWithoutMetadata": "6de5c07f4f6f245203f00c193040e488fc195e227f97de002ed49bdf24c7d210"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IHasAssetInfo.sol:IHasAssetInfo",
          "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo",
          "contracts/interfaces/IVaultFactory.sol:IVaultFactory"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "createVault(string,string,address,address,uint256,uint256,uint256)",
          "setAssetWhitelist(address,uint16,bool)",
          "batchSetAssetWhitelist(address[],uint16[],bool[])",
          "getTokenType(address)",
          "getWhitelistedAssets()",
          "setGovernanceAddress(address)",
          "setTreasuryAddress(address)",
          "setAdminAddress(address)",
          "updateVaultFees(address,uint256,uint256)",
          "getAssetHandler()",
          "setAssetHandler(address)",
          "setMaximumSupportedAssetCount(uint256)",
          "getMaximumSupportedAssetCount()",
          "isValidAsset(address)",
          "getAssetPrice(address)",
          "getAssetType(address)",
          "updateVaultImplementation(address)",
          "upgradeVault(address,address)",
          "batchUpgradeVaults(address[],address)",
          "setFactorySettings(uint256,uint256,uint256)",
          "pause()",
          "unpause()",
          "addUnderlyingAsset(address,uint16)",
          "addWhitelistedAsset(address,uint16)",
          "removeUnderlyingAsset(address)",
          "removeWhitelistedAsset(address)",
          "getUnderlyingAssets()",
          "getUnderlyingAssetCount()",
          "getWhitelistedAssetCount()",
          "isUnderlyingAssetAllowed(address)",
          "isAssetWhitelisted(address)",
          "setGovernanceAddress(bytes32,address)",
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)",
          "hasGuard(address)",
          "getAssetsWithTypes()",
          "getDeployedVaults()",
          "getVaultCount()",
          "getVaultsByManager(address)",
          "getVaultInfo(address)",
          "getDetailedVaultInfo(address)",
          "getFactoryStats()",
          "isValidVault(address)",
          "getVaultManager(address)",
          "addUnderlyingAssetWhitelist(address)",
          "removeUnderlyingAssetWhitelist(address)",
          "setVaultStorageVersion(uint256)",
          "version()",
          "emergencyRecoverAsset(address,uint256)",
          "owner()",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "proxyAdmin",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:85"
            },
            {
              "label": "vaultImplementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:86"
            },
            {
              "label": "implementationVersion",
              "offset": 20,
              "slot": "1",
              "type": "t_uint32",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:87"
            },
            {
              "label": "deployedVaults",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:90"
            },
            {
              "label": "isVault",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:91"
            },
            {
              "label": "vaultManager",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_address)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:92"
            },
            {
              "label": "vaultIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:93"
            },
            {
              "label": "underlyingAssetAllowed",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:96"
            },
            {
              "label": "underlyingAssets",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:97"
            },
            {
              "label": "underlyingAssetIndex",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:98"
            },
            {
              "label": "assetWhitelisted",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:101"
            },
            {
              "label": "tokenType",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint16)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:102"
            },
            {
              "label": "whitelistedAssets",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:103"
            },
            {
              "label": "assetIndex",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:104"
            },
            {
              "label": "governance",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:106"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:107"
            },
            {
              "label": "admin",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:108"
            },
            {
              "label": "_assetHandler",
              "offset": 0,
              "slot": "16",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:110"
            },
            {
              "label": "_maximumSupportedAssetCount",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:111"
            },
            {
              "label": "vaultVersion",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:113"
            },
            {
              "label": "vaultStorageVersion",
              "offset": 0,
              "slot": "19",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:114"
            },
            {
              "label": "maxCapacityLimit",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:117"
            },
            {
              "label": "minCapacityLimit",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:118"
            },
            {
              "label": "creationFee",
              "offset": 0,
              "slot": "22",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:119"
            },
            {
              "label": "governanceAddresses",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "VaultFactory",
              "src": "contracts/VaultFactory.sol:122"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)679_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint16)": {
              "label": "mapping(address => uint16)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/asset/ERC20Guard.sol:ERC20Guard": {
        "src": "contracts/guards/asset/ERC20Guard.sol:30",
        "version": {
          "withMetadata": "3cb23725a9ab609686f94ecceaa00264017b202e1df3d9047c7b5fafa003bc06",
          "withoutMetadata": "d0984ba4783a8bad04232921f4cfa48d764a34b1dee1dab9752f9f728e012469",
          "linkedWithoutMetadata": "d0984ba4783a8bad04232921f4cfa48d764a34b1dee1dab9752f9f728e012469"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes",
          "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)",
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "WETH",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ERC20Guard",
              "src": "contracts/guards/asset/ERC20Guard.sol:32"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1566_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/asset/ETHGuard.sol:ETHGuard": {
        "src": "contracts/guards/asset/ETHGuard.sol:33",
        "version": {
          "withMetadata": "a1b726ac81ba38ed16f72d962bff2d54094d49eefb541577b1847652a2448dde",
          "withoutMetadata": "fa531d0f3172bbdbed6554c228aaaad1739e5a431e1bc2b3558a0c54658af477",
          "linkedWithoutMetadata": "fa531d0f3172bbdbed6554c228aaaad1739e5a431e1bc2b3558a0c54658af477"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)",
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "WETH",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ETHGuard",
              "src": "contracts/guards/asset/ETHGuard.sol:34"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1566_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/asset/StETHGuard.sol:IStETH": {
        "src": "contracts/guards/asset/StETHGuard.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPooledEthByShares(uint256)",
          "getSharesByPooledEth(uint256)",
          "getTotalShares()",
          "getTotalPooledEther()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/asset/StETHGuard.sol:StETHGuard": {
        "src": "contracts/guards/asset/StETHGuard.sol:19",
        "version": {
          "withMetadata": "da50bd9e865912fda35d1578be3946f12f213efd5a788071f1754dcd580d5f75",
          "withoutMetadata": "78e8263f7f4eab3d95fd1fbb03fd3aea3affebbf791962a80e438028ac84c7a4",
          "linkedWithoutMetadata": "78e8263f7f4eab3d95fd1fbb03fd3aea3affebbf791962a80e438028ac84c7a4"
        },
        "inherit": [
          "contracts/guards/asset/ERC20Guard.sol:ERC20Guard",
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes",
          "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "getBalance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "WETH",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ERC20Guard",
              "src": "contracts/guards/asset/ERC20Guard.sol:32"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1566_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/platform/AmbientGuard.sol:AmbientGuard": {
        "src": "contracts/guards/platform/AmbientGuard.sol:28",
        "version": {
          "withMetadata": "b8815c253e6321fcd94075062dabda2f73b47c5d331f1db55bd8a8420fb0fd2a",
          "withoutMetadata": "b95bcdd1291a61bc526a5937e843a69be250ba17882755c0e74c0fb36869c991",
          "linkedWithoutMetadata": "b95bcdd1291a61bc526a5937e843a69be250ba17882755c0e74c0fb36869c991"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes",
          "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "platformName",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "AmbientGuard",
              "src": "contracts/guards/platform/AmbientGuard.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1566_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/guards/platform/KyberswapGuard.sol:KyberswapGuard": {
        "src": "contracts/guards/platform/KyberswapGuard.sol:25",
        "version": {
          "withMetadata": "e3ce0b582ff23087bc4c66001f251dbb04b67ec4bd83e7a6d6035e252966307a",
          "withoutMetadata": "bb43280c008dd00d5157f9f98bb9fb10329798dd0fee934ab6475ddf5a7ab00e",
          "linkedWithoutMetadata": "bb43280c008dd00d5157f9f98bb9fb10329798dd0fee934ab6475ddf5a7ab00e"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes",
          "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard",
          "contracts/interfaces/guards/IGuard.sol:IGuard",
          "contracts/utils/TxDataUtils.sol:TxDataUtils"
        ],
        "libraries": [
          "@uniswap/v3-periphery/contracts/libraries/Path.sol:Path"
        ],
        "methods": [
          "initialize()",
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "platformName",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "KyberswapGuard",
              "src": "contracts/guards/platform/KyberswapGuard.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)1566_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IAggregatorV3Interface.sol:IAggregatorV3Interface": {
        "src": "contracts/interfaces/IAggregatorV3Interface.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IAssetHandler.sol:IAssetHandler": {
        "src": "contracts/interfaces/IAssetHandler.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addAsset(address,uint16,address)",
          "addAssets(struct IAssetHandler.Asset[])",
          "removeAsset(address)",
          "priceAggregators(address)",
          "assetTypes(address)",
          "getUSDPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IGovernance.sol:IGovernance": {
        "src": "contracts/interfaces/IGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "contractGuards(address)",
          "assetGuards(uint16)",
          "nameToDestination(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasAdministrable.sol:IHasAdministrable": {
        "src": "contracts/interfaces/IHasAdministrable.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "admin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasAssetInfo.sol:IHasAssetInfo": {
        "src": "contracts/interfaces/IHasAssetInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidAsset(address)",
          "getAssetPrice(address)",
          "getAssetType(address)",
          "getMaximumSupportedAssetCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasDaoInfo.sol:IHasDaoInfo": {
        "src": "contracts/interfaces/IHasDaoInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getDaoFee()",
          "daoAddress()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasGuardInfo.sol:IHasGuardInfo": {
        "src": "contracts/interfaces/IHasGuardInfo.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGuard(address)",
          "getAssetGuard(address)",
          "getAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasOwnable.sol:IHasOwnable": {
        "src": "contracts/interfaces/IHasOwnable.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasPausable.sol:IHasPausable": {
        "src": "contracts/interfaces/IHasPausable.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPaused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IHasSupportedAsset.sol:IHasSupportedAsset": {
        "src": "contracts/interfaces/IHasSupportedAsset.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSupportedAssets()",
          "isSupportedAsset(address)",
          "getAssetType(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/ITransactionTypes.sol:ITransactionTypes": {
        "src": "contracts/interfaces/ITransactionTypes.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVault.sol:IVault": {
        "src": "contracts/interfaces/IVault.sol:8",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC4626.sol:IERC4626",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,address,uint256,uint256,uint256)",
          "callContract(address,uint256,bytes)",
          "realizeByManager()",
          "liquidateAllPositionsForHarvest()",
          "goLive()",
          "returnToFundraising()",
          "advanceEpoch()",
          "emergencyLiquidateAll()",
          "addSupportedAsset(address)",
          "batchAddSupportedAssets(address[])",
          "removeSupportedAsset(address)",
          "updateFees(uint256,uint256)",
          "updateVaultSettings(uint256,uint256)",
          "updateEpochSettings(uint256,uint256)",
          "setStrategyAuthorization(address,bool)",
          "updateProtocolTreasury(address)",
          "pause()",
          "unpause()",
          "getSupportedAssetsCount()",
          "getAllSupportedAssets()",
          "getVaultInfo()",
          "getEpochInfo()",
          "canGoLive()",
          "areAllPositionsLiquidated()",
          "getAssetsToLiquidate()",
          "factory()",
          "manager()",
          "underlyingAsset()",
          "protocolTreasury()",
          "currentEpoch()",
          "vaultState()",
          "epochStartTime()",
          "fundraisingDuration()",
          "minFundraisingAmount()",
          "managerFee()",
          "withdrawalFee()",
          "maxCapacity()",
          "minDepositAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IVaultFactory.sol:IVaultFactory": {
        "src": "contracts/interfaces/IVaultFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenType(address)",
          "getAssetType(address)",
          "getDeployedVaults()",
          "getVaultCount()",
          "getVaultsByManager(address)",
          "getVaultInfo(address)",
          "getDetailedVaultInfo(address)",
          "getFactoryStats()",
          "isValidVault(address)",
          "getVaultManager(address)",
          "isAssetWhitelisted(address)",
          "version()",
          "emergencyRecoverAsset(address,uint256)",
          "setTreasuryAddress(address)",
          "setAdminAddress(address)",
          "proxyAdmin()",
          "vaultImplementation()",
          "implementationVersion()",
          "deployedVaults(uint256)",
          "isVault(address)",
          "vaultManager(address)",
          "vaultIndex(address)",
          "underlyingAssetAllowed(address)",
          "tokenType(address)",
          "whitelistedAssets(uint256)",
          "assetIndex(address)",
          "maxCapacityLimit()",
          "minCapacityLimit()",
          "creationFee()",
          "treasury()",
          "admin()",
          "owner()",
          "paused()",
          "governance()",
          "getAssetHandler()",
          "vaultStorageVersion()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IWETH.sol:IWETH": {
        "src": "contracts/interfaces/IWETH.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/ambient/ICrocQuery.sol:ICrocQuery": {
        "src": "contracts/interfaces/external/ambient/ICrocQuery.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "queryPrice(address,address,uint256)",
          "queryCurve(address,address,uint256)",
          "queryAmbientTokens(address,address,address,uint256)",
          "queryAmbientPosition(address,address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/ambient/ICrocSwapDex.sol:ICrocSwapDex": {
        "src": "contracts/interfaces/external/ambient/ICrocSwapDex.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userCmd(uint16,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/external/kyberswap/IMetaAggregationRouterV2.sol:IMetaAggregationRouterV2": {
        "src": "contracts/interfaces/external/kyberswap/IMetaAggregationRouterV2.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swap((address,address,bytes,(address,address,address[],uint256[],address[],uint256[],address,uint256,uint256,uint256,bytes),bytes))",
          "swapSimpleMode(address,(address,address,address[],uint256[],address[],uint256[],address,uint256,uint256,uint256,bytes),bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IAssetGuard.sol:IAssetGuard": {
        "src": "contracts/interfaces/guards/IAssetGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBalance(address,address)",
          "getDecimals(address)",
          "calcValue(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IGuard.sol:IGuard": {
        "src": "contracts/interfaces/guards/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "txGuard(address,address,bytes)",
          "txGuard(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/IPlatformGuard.sol:IPlatformGuard": {
        "src": "contracts/interfaces/guards/IPlatformGuard.sol:6",
        "inherit": [
          "contracts/interfaces/guards/IGuard.sol:IGuard"
        ],
        "libraries": [],
        "methods": [
          "platformName()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/guards/ITxTrackingGuard.sol:ITxTrackingGuard": {
        "src": "contracts/interfaces/guards/ITxTrackingGuard.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isTxTrackingGuard()",
          "afterTxGuard(address,address,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/test/MockAssetHandler.sol:IERC20Metadata": {
        "src": "contracts/test/MockAssetHandler.sol:86",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/test/MockAssetHandler.sol:MockAssetHandler": {
        "src": "contracts/test/MockAssetHandler.sol:7",
        "version": {
          "withMetadata": "1b1b0b46e831111d3dbbc03295bec6deefd8ada481bcf06b87f9639444a07afb",
          "withoutMetadata": "62b1b275e2fc4e94730306199a585d984903e74347e521f0420cd68fbc2c0ab4",
          "linkedWithoutMetadata": "62b1b275e2fc4e94730306199a585d984903e74347e521f0420cd68fbc2c0ab4"
        },
        "inherit": [
          "contracts/interfaces/IAssetHandler.sol:IAssetHandler"
        ],
        "libraries": [],
        "methods": [
          "setPrice(address,uint256)",
          "setAssetType(address,uint16)",
          "setAssetGuard(address,address)",
          "addAsset(address,uint16,address)",
          "addAssets(struct IAssetHandler.Asset[])",
          "removeAsset(address)",
          "getUSDPrice(address)",
          "getAssetType(address)",
          "getAssetGuard(address)",
          "isValidAsset(address)",
          "calculateRedemptionValue(address,uint256,address)",
          "getAssetDecimals(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "prices",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "MockAssetHandler",
              "src": "contracts/test/MockAssetHandler.sol:8"
            },
            {
              "label": "assetTypes",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint16)",
              "contract": "MockAssetHandler",
              "src": "contracts/test/MockAssetHandler.sol:9"
            },
            {
              "label": "assetGuards",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_address)",
              "contract": "MockAssetHandler",
              "src": "contracts/test/MockAssetHandler.sol:10"
            },
            {
              "label": "priceAggregators",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_address)",
              "contract": "MockAssetHandler",
              "src": "contracts/test/MockAssetHandler.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint16)": {
              "label": "mapping(address => uint16)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/test/MockERC20.sol:MockERC20": {
        "src": "contracts/test/MockERC20.sol:8",
        "version": {
          "withMetadata": "c515ab243ce987e343ad49ea88e7e5b2fa413bc8e4c559c1492b0c835bdd75d1",
          "withoutMetadata": "b60eb1159c4f98732fd6940ab02da92ceb435861d245b026d09212dcf56b4d0e",
          "linkedWithoutMetadata": "b60eb1159c4f98732fd6940ab02da92ceb435861d245b026d09212dcf56b4d0e"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint8)",
          "decimals()",
          "mint(address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/test/MockERC20.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "MockERC20",
              "src": "contracts/test/MockERC20.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/test/MockOracle.sol:MockOracle": {
        "src": "contracts/test/MockOracle.sol:6",
        "version": {
          "withMetadata": "16a7f9344e3b04b7c61698c3ec789d0057b7ca85e2ea3798bfc6510e0062bee6",
          "withoutMetadata": "fc6b19d2dc5de2c93e77b55a85dacada28aabf905ad436f9196126f9ef74c8f3",
          "linkedWithoutMetadata": "fc6b19d2dc5de2c93e77b55a85dacada28aabf905ad436f9196126f9ef74c8f3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "setPrice(address,uint256)",
          "getPrice(address)",
          "latestRoundData(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "prices",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "MockOracle",
              "src": "contracts/test/MockOracle.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/AssetHandler.sol:AssetHandler": {
        "src": "contracts/utils/AssetHandler.sol:29",
        "version": {
          "withMetadata": "dcbf73ffc14bc9d31e4eb3837ba08c250e61ea994e0b7689f3e7dfd394bc0b22",
          "withoutMetadata": "293226cf3556e6440625dff42f61fcfd231f22b0aec313de6d8f6c9fa075f9d4",
          "linkedWithoutMetadata": "293226cf3556e6440625dff42f61fcfd231f22b0aec313de6d8f6c9fa075f9d4"
        },
        "inherit": [
          "contracts/interfaces/IAssetHandler.sol:IAssetHandler",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(struct IAssetHandler.Asset[])",
          "getUSDPrice(address)",
          "setChainlinkTimeout(uint256)",
          "addAsset(address,uint16,address)",
          "addAssets(struct IAssetHandler.Asset[])",
          "removeAsset(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "chainlinkTimeout",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "AssetHandler",
              "src": "contracts/utils/AssetHandler.sol:31"
            },
            {
              "label": "assetTypes",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint16)",
              "contract": "AssetHandler",
              "src": "contracts/utils/AssetHandler.sol:34"
            },
            {
              "label": "priceAggregators",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_address)",
              "contract": "AssetHandler",
              "src": "contracts/utils/AssetHandler.sol:35"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)50_storage",
              "contract": "AssetHandler",
              "src": "contracts/utils/AssetHandler.sol:128"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint16)": {
              "label": "mapping(address => uint16)",
              "numberOfBytes": "32"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/AssetLogic.sol:AssetLogic": {
        "src": "contracts/utils/AssetLogic.sol:30",
        "version": {
          "withMetadata": "d50d1ab49190d6f833b1124842ebfa703a45a40534912706a83af295af746662",
          "withoutMetadata": "7fae6f8b65a143a4c7bccdd935e62da265a5d4930269d0c232bedf1ca35447b2",
          "linkedWithoutMetadata": "7fae6f8b65a143a4c7bccdd935e62da265a5d4930269d0c232bedf1ca35447b2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/FeeLogic.sol:FeeLogic": {
        "src": "contracts/utils/FeeLogic.sol:32",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/FeeLogic.sol:IVaultMinter": {
        "src": "contracts/utils/FeeLogic.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "convertToShares(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/TxDataUtils.sol:TxDataUtils": {
        "src": "contracts/utils/TxDataUtils.sol:20",
        "version": {
          "withMetadata": "8cb004785e763015bdeba03de981235690d55637ba6b96312909c6052b135ff9",
          "withoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb",
          "linkedWithoutMetadata": "ede0ac3404d1fc6db3e7e9bf228070dd2b5c329e62483e9acde495fb806710cb"
        },
        "inherit": [],
        "libraries": [
          "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol:BytesLib"
        ],
        "methods": [
          "getMethod(bytes)",
          "getParams(bytes)",
          "getInput(bytes,uint8)",
          "getBytes(bytes,uint8,uint256)",
          "getArrayLast(bytes,uint8)",
          "getArrayLength(bytes,uint8)",
          "getArrayIndex(bytes,uint8,uint8)",
          "read4left(bytes,uint256)",
          "read32(bytes,uint256,uint256)",
          "convert32toAddress(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/utils/VaultLogic.sol:VaultLogic": {
        "src": "contracts/utils/VaultLogic.sol:15",
        "version": {
          "withMetadata": "03b488c098dd3175e6708204b6b4d959a85d97010614f30a858f034bd0410613",
          "withoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568",
          "linkedWithoutMetadata": "ef51aca7aca5d0718cb96883d326646a1b17e1d1087661f068995ef31477e568"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    }
  ]
}